# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2022, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2022.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.12\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-10-12 09:44+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.10.3\n"

#: ../../whatsnew/3.12.rst:4
msgid "What's New In Python 3.12"
msgstr ""

#: ../../whatsnew/3.12.rst
msgid "Release"
msgstr ""

#: ../../whatsnew/3.12.rst:6
msgid "|release|"
msgstr ""

#: ../../whatsnew/3.12.rst
msgid "Date"
msgstr ""

#: ../../whatsnew/3.12.rst:7
msgid "|today|"
msgstr ""

#: ../../whatsnew/3.12.rst:49
msgid "This article explains the new features in Python 3.12, compared to 3.11."
msgstr ""

#: ../../whatsnew/3.12.rst:51
msgid "For full details, see the :ref:`changelog <changelog>`."
msgstr ""

#: ../../whatsnew/3.12.rst:55
msgid ""
"Prerelease users should be aware that this document is currently in draft"
" form. It will be updated substantially as Python 3.12 moves towards "
"release, so it's worth checking back even after reading earlier versions."
msgstr ""

#: ../../whatsnew/3.12.rst:61
msgid "Summary -- Release highlights"
msgstr ""

#: ../../whatsnew/3.12.rst:69
msgid "Important deprecations, removals or restrictions:"
msgstr ""

#: ../../whatsnew/3.12.rst:71
msgid ":pep:`623`, Remove wstr from Unicode"
msgstr ""

#: ../../whatsnew/3.12.rst:75 ../../whatsnew/3.12.rst:540
msgid "New Features"
msgstr ""

#: ../../whatsnew/3.12.rst:80
msgid "Other Language Changes"
msgstr ""

#: ../../whatsnew/3.12.rst:82
msgid ""
":class:`types.MappingProxyType` instances are now hashable if the "
"underlying mapping is hashable. (Contributed by Serhiy Storchaka in "
":gh:`87995`.)"
msgstr ""

#: ../../whatsnew/3.12.rst:86
msgid ""
":class:`memoryview` now supports the half-float type (the \"e\" format "
"code). (Contributed by Dong-hee Na and Antoine Pitrou in :gh:`90751`.)"
msgstr ""

#: ../../whatsnew/3.12.rst:89
msgid ""
"The parser now raises :exc:`SyntaxError` when parsing source code "
"containing null bytes. (Contributed by Pablo Galindo in :gh:`96670`.)"
msgstr ""

#: ../../whatsnew/3.12.rst:92
msgid ""
":func:`ast.parse` now raises :exc:`SyntaxError` instead of "
":exc:`ValueError` when parsing source code containing null bytes. "
"(Contributed by Pablo Galindo in :gh:`96670`.)"
msgstr ""

#: ../../whatsnew/3.12.rst:96
msgid ""
"The Garbage Collector now runs only on the eval breaker mechanism of the "
"Python bytecode evaluation loop instead on object allocations. The GC can"
" also run when :c:func:`PyErr_CheckSignals` is called so C extensions "
"that need to run for a long time without executing any Python code also "
"have a chance to execute the GC periodically. (Contributed by Pablo "
"Galindo in :gh:`97922`.)"
msgstr ""

#: ../../whatsnew/3.12.rst:104
msgid "New Modules"
msgstr ""

#: ../../whatsnew/3.12.rst:106
msgid "None yet."
msgstr ""

#: ../../whatsnew/3.12.rst:110
msgid "Improved Modules"
msgstr ""

#: ../../whatsnew/3.12.rst:113
msgid "asyncio"
msgstr ""

#: ../../whatsnew/3.12.rst:115
msgid ""
"On Linux, :mod:`asyncio` uses :class:`~asyncio.PidfdChildWatcher` by "
"default if :func:`os.pidfd_open` is available and functional instead of "
":class:`~asyncio.ThreadedChildWatcher`. (Contributed by Kumar Aditya in "
":gh:`98024`.)"
msgstr ""

#: ../../whatsnew/3.12.rst:120
msgid ""
"The child watcher classes :class:`~asyncio.MultiLoopChildWatcher`, "
":class:`~asyncio.FastChildWatcher` and :class:`~asyncio.SafeChildWatcher`"
" are deprecated and will be removed in Python 3.14. It is recommended to "
"not manually configure a child watcher as the event loop now uses the "
"best available child watcher for each platform "
"(:class:`~asyncio.PidfdChildWatcher` if supported and "
":class:`~asyncio.ThreadedChildWatcher` otherwise). (Contributed by Kumar "
"Aditya in :gh:`94597`.)"
msgstr ""

#: ../../whatsnew/3.12.rst:131
msgid "pathlib"
msgstr ""

#: ../../whatsnew/3.12.rst:133
msgid ""
"Add :meth:`~pathlib.Path.walk` for walking the directory trees and "
"generating all file or directory names within them, similar to "
":func:`os.walk`. (Contributed by Stanislav Zmiev in :gh:`90385`.)"
msgstr ""

#: ../../whatsnew/3.12.rst:138
msgid "dis"
msgstr ""

#: ../../whatsnew/3.12.rst:140
msgid ""
"Pseudo instruction opcodes (which are used by the compiler but do not "
"appear in executable bytecode) are now exposed in the :mod:`dis` module. "
":data:`~dis.HAVE_ARGUMENT` is still relevant to real opcodes, but it is "
"not useful for pseudo instructions. Use the new :data:`~dis.hasarg` "
"collection instead. (Contributed by Irit Katriel in :gh:`94216`.)"
msgstr ""

#: ../../whatsnew/3.12.rst:149
msgid "os"
msgstr ""

#: ../../whatsnew/3.12.rst:151
msgid ""
"Add :data:`os.PIDFD_NONBLOCK` to open a file descriptor for a process "
"with :func:`os.pidfd_open` in non-blocking mode. (Contributed by Kumar "
"Aditya in :gh:`93312`.)"
msgstr ""

#: ../../whatsnew/3.12.rst:156
msgid "shutil"
msgstr ""

#: ../../whatsnew/3.12.rst:158
msgid ""
":func:`shutil.make_archive` now passes the *root_dir* argument to custom "
"archivers which support it. In this case it no longer temporarily changes"
" the current working directory of the process to *root_dir* to perform "
"archiving. (Contributed by Serhiy Storchaka in :gh:`74696`.)"
msgstr ""

#: ../../whatsnew/3.12.rst:166
msgid "sqlite3"
msgstr ""

#: ../../whatsnew/3.12.rst:168
msgid ""
"Add a :ref:`command-line interface <sqlite3-cli>`. (Contributed by Erlend"
" E. Aasland in :gh:`77617`.)"
msgstr ""

#: ../../whatsnew/3.12.rst:172
msgid "threading"
msgstr ""

#: ../../whatsnew/3.12.rst:174
msgid ""
"Add :func:`threading.settrace_all_threads` and "
":func:`threading.setprofile_all_threads` that allow to set tracing and "
"profiling functions in all running threads in addition to the calling "
"one. (Contributed by Pablo Galindo in :gh:`93503`.)"
msgstr ""

#: ../../whatsnew/3.12.rst:180
msgid "unicodedata"
msgstr ""

#: ../../whatsnew/3.12.rst:182
msgid ""
"The Unicode database has been updated to version 15.0.0. (Contributed by "
"Benjamin Peterson in :gh:`96734`)."
msgstr ""

#: ../../whatsnew/3.12.rst:186
msgid "tempfile"
msgstr ""

#: ../../whatsnew/3.12.rst:188
msgid ""
"The :class:`tempfile.NamedTemporaryFile` function has a new optional "
"parameter *delete_on_close* (Contributed by Evgeny Zorin in :gh:`58451`.)"
msgstr ""

#: ../../whatsnew/3.12.rst:192
msgid "Optimizations"
msgstr ""

#: ../../whatsnew/3.12.rst:194
msgid ""
"Removed ``wstr`` and ``wstr_length`` members from Unicode objects. It "
"reduces object size by 8 or 16 bytes on 64bit platform. (:pep:`623`) "
"(Contributed by Inada Naoki in :gh:`92536`.)"
msgstr ""

#: ../../whatsnew/3.12.rst:198
msgid ""
"Added experimental support for using the BOLT binary optimizer in the "
"build process, which improves performance by 1-5%. (Contributed by Kevin "
"Modzelewski in :gh:`90536`.)"
msgstr ""

#: ../../whatsnew/3.12.rst:204
msgid "CPython bytecode changes"
msgstr ""

#: ../../whatsnew/3.12.rst:206
msgid ""
"Removed the :opcode:`LOAD_METHOD` instruction. It has been merged into "
":opcode:`LOAD_ATTR`. :opcode:`LOAD_ATTR` will now behave like the old "
":opcode:`LOAD_METHOD` instruction if the low bit of its oparg is set. "
"(Contributed by Ken Jin in :gh:`93429`.)"
msgstr ""

#: ../../whatsnew/3.12.rst:213
msgid "Demos and Tools"
msgstr ""

#: ../../whatsnew/3.12.rst:215
msgid ""
"Remove the ``Tools/demo/`` directory which contained old demo scripts. A "
"copy can be found in the `old-demos project "
"<https://github.com/gvanrossum/old-demos>`_. (Contributed by Victor "
"Stinner in :gh:`97681`.)"
msgstr ""

#: ../../whatsnew/3.12.rst:220
msgid ""
"Remove outdated example scripts of the ``Tools/scripts/`` directory. A "
"copy can be found in the `old-demos project "
"<https://github.com/gvanrossum/old-demos>`_. (Contributed by Victor "
"Stinner in :gh:`97669`.)"
msgstr ""

#: ../../whatsnew/3.12.rst:227 ../../whatsnew/3.12.rst:633
msgid "Deprecated"
msgstr ""

#: ../../whatsnew/3.12.rst:229
msgid ""
":class:`typing.Hashable` and :class:`typing.Sized` aliases for "
":class:`collections.abc.Hashable` and :class:`collections.abc.Sized`. "
"(:gh:`94309`.)"
msgstr ""

#: ../../whatsnew/3.12.rst:232
msgid ""
"The :mod:`sqlite3` :ref:`default adapters and converters <sqlite3"
"-default-converters>` are now deprecated. Instead, use the :ref:`sqlite3"
"-adapter-converter-recipes` and tailor them to your needs. (Contributed "
"by Erlend E. Aasland in :gh:`90016`.)"
msgstr ""

#: ../../whatsnew/3.12.rst:238
msgid ""
"The 3-arg signatures (type, value, traceback) of "
":meth:`~coroutine.throw`, :meth:`~generator.throw` and "
":meth:`~agen.athrow` are deprecated and may be removed in a future "
"version of Python. Use the single-arg versions of these functions "
"instead. (Contributed by Ofey Chan in :gh:`89874`.)"
msgstr ""

#: ../../whatsnew/3.12.rst:243
msgid ""
":exc:`DeprecationWarning` is now raised when ``__package__`` on a module "
"differs from ``__spec__.parent`` (previously it was "
":exc:`ImportWarning`). (Contributed by Brett Cannon in :gh:`65961`.)"
msgstr ""

#: ../../whatsnew/3.12.rst:250
msgid "Pending Removal in Python 3.13"
msgstr ""

#: ../../whatsnew/3.12.rst:252
msgid ""
"The following modules and APIs have been deprecated in earlier Python "
"releases, and will be removed in Python 3.13."
msgstr ""

#: ../../whatsnew/3.12.rst:255
msgid "Modules (see :pep:`594`):"
msgstr ""

#: ../../whatsnew/3.12.rst:257
msgid ":mod:`aifc`"
msgstr ""

#: ../../whatsnew/3.12.rst:258
msgid ":mod:`audioop`"
msgstr ""

#: ../../whatsnew/3.12.rst:259
msgid ":mod:`cgi`"
msgstr ""

#: ../../whatsnew/3.12.rst:260
msgid ":mod:`cgitb`"
msgstr ""

#: ../../whatsnew/3.12.rst:261
msgid ":mod:`chunk`"
msgstr ""

#: ../../whatsnew/3.12.rst:262
msgid ":mod:`crypt`"
msgstr ""

#: ../../whatsnew/3.12.rst:263
msgid ":mod:`imghdr`"
msgstr ""

#: ../../whatsnew/3.12.rst:264
msgid ":mod:`mailcap`"
msgstr ""

#: ../../whatsnew/3.12.rst:265
msgid ":mod:`msilib`"
msgstr ""

#: ../../whatsnew/3.12.rst:266
msgid ":mod:`nis`"
msgstr ""

#: ../../whatsnew/3.12.rst:267
msgid ":mod:`nntplib`"
msgstr ""

#: ../../whatsnew/3.12.rst:268
msgid ":mod:`ossaudiodev`"
msgstr ""

#: ../../whatsnew/3.12.rst:269
msgid ":mod:`pipes`"
msgstr ""

#: ../../whatsnew/3.12.rst:270
msgid ":mod:`sndhdr`"
msgstr ""

#: ../../whatsnew/3.12.rst:271
msgid ":mod:`spwd`"
msgstr ""

#: ../../whatsnew/3.12.rst:272
msgid ":mod:`sunau`"
msgstr ""

#: ../../whatsnew/3.12.rst:273
msgid ":mod:`telnetlib`"
msgstr ""

#: ../../whatsnew/3.12.rst:274
msgid ":mod:`uu`"
msgstr ""

#: ../../whatsnew/3.12.rst:275
msgid ":mod:`xdrlib`"
msgstr ""

#: ../../whatsnew/3.12.rst:277
msgid "APIs:"
msgstr ""

#: ../../whatsnew/3.12.rst:279
msgid ":class:`configparser.LegacyInterpolation` (:gh:`90765`)"
msgstr ""

#: ../../whatsnew/3.12.rst:280
msgid ":func:`locale.getdefaultlocale` (:gh:`90817`)"
msgstr ""

#: ../../whatsnew/3.12.rst:281
msgid ":meth:`turtle.RawTurtle.settiltangle` (:gh:`50096`)"
msgstr ""

#: ../../whatsnew/3.12.rst:282
msgid ":func:`unittest.findTestCases` (:gh:`50096`)"
msgstr ""

#: ../../whatsnew/3.12.rst:283
msgid ":func:`unittest.makeSuite` (:gh:`50096`)"
msgstr ""

#: ../../whatsnew/3.12.rst:284
msgid ":func:`unittest.getTestCaseNames` (:gh:`50096`)"
msgstr ""

#: ../../whatsnew/3.12.rst:285
msgid ":class:`webbrowser.MacOSX` (:gh:`86421`)"
msgstr ""

#: ../../whatsnew/3.12.rst:288
msgid "Pending Removal in Python 3.14"
msgstr ""

#: ../../whatsnew/3.12.rst:290
msgid ""
"Deprecated the following :mod:`importlib.abc` classes, scheduled for "
"removal in Python 3.14:"
msgstr ""

#: ../../whatsnew/3.12.rst:293
msgid ":class:`importlib.abc.ResourceReader`"
msgstr ""

#: ../../whatsnew/3.12.rst:294
msgid ":class:`importlib.abc.Traversable`"
msgstr ""

#: ../../whatsnew/3.12.rst:295
msgid ":class:`importlib.abc.TraversableResources`"
msgstr ""

#: ../../whatsnew/3.12.rst:297
msgid "Use :mod:`importlib.resources.abc` classes instead:"
msgstr ""

#: ../../whatsnew/3.12.rst:299 ../../whatsnew/3.12.rst:301
msgid ":class:`importlib.resources.abc.TraversableResources`"
msgstr ""

#: ../../whatsnew/3.12.rst:300
msgid ":class:`importlib.resources.abc.Traversable`"
msgstr ""

#: ../../whatsnew/3.12.rst:303
msgid "(Contributed by Jason R. Coombs and Hugo van Kemenade in :gh:`93963`.)"
msgstr ""

#: ../../whatsnew/3.12.rst:305
msgid ""
"Creating :c:data:`immutable types <Py_TPFLAGS_IMMUTABLETYPE>` with "
"mutable bases using the C API."
msgstr ""

#: ../../whatsnew/3.12.rst:308
msgid ""
"``__package__`` and ``__cached__`` will cease to be set or taken into "
"consideration by the import system (:gh:`97879`)."
msgstr ""

#: ../../whatsnew/3.12.rst:313
msgid "Pending Removal in Future Versions"
msgstr ""

#: ../../whatsnew/3.12.rst:315
msgid ""
"The following APIs were deprecated in earlier Python versions and will be"
" removed, although there is currently no date scheduled for their "
"removal."
msgstr ""

#: ../../whatsnew/3.12.rst:318
msgid ":class:`typing.Text` (:gh:`92332`)"
msgstr ""

#: ../../whatsnew/3.12.rst:320
msgid ""
"Currently Python accepts numeric literals immediately followed by "
"keywords, for example ``0in x``, ``1or x``, ``0if 1else 2``.  It allows "
"confusing and ambiguous expressions like ``[0x1for x in y]`` (which can "
"be interpreted as ``[0x1 for x in y]`` or ``[0x1f or x in y]``). A syntax"
" warning is raised if the numeric literal is immediately followed by one "
"of keywords :keyword:`and`, :keyword:`else`, :keyword:`for`, "
":keyword:`if`, :keyword:`in`, :keyword:`is` and :keyword:`or`. In a "
"future release it will be changed to a syntax error. (:gh:`87999`)"
msgstr ""

#: ../../whatsnew/3.12.rst:331 ../../whatsnew/3.12.rst:668
msgid "Removed"
msgstr ""

#: ../../whatsnew/3.12.rst:333
msgid "Removed many old deprecated :mod:`unittest` features:"
msgstr ""

#: ../../whatsnew/3.12.rst:335
msgid "A number of :class:`~unittest.TestCase` method aliases:"
msgstr ""

#: ../../whatsnew/3.12.rst:338
msgid "Deprecated alias"
msgstr ""

#: ../../whatsnew/3.12.rst:338
msgid "Method Name"
msgstr ""

#: ../../whatsnew/3.12.rst:338
msgid "Deprecated in"
msgstr ""

#: ../../whatsnew/3.12.rst:340
msgid "``failUnless``"
msgstr ""

#: ../../whatsnew/3.12.rst:340 ../../whatsnew/3.12.rst:347
msgid ":meth:`.assertTrue`"
msgstr ""

#: ../../whatsnew/3.12.rst:340 ../../whatsnew/3.12.rst:341
#: ../../whatsnew/3.12.rst:342 ../../whatsnew/3.12.rst:343
#: ../../whatsnew/3.12.rst:344 ../../whatsnew/3.12.rst:345
#: ../../whatsnew/3.12.rst:346
msgid "3.1"
msgstr ""

#: ../../whatsnew/3.12.rst:341
msgid "``failIf``"
msgstr ""

#: ../../whatsnew/3.12.rst:341
msgid ":meth:`.assertFalse`"
msgstr ""

#: ../../whatsnew/3.12.rst:342
msgid "``failUnlessEqual``"
msgstr ""

#: ../../whatsnew/3.12.rst:342 ../../whatsnew/3.12.rst:348
msgid ":meth:`.assertEqual`"
msgstr ""

#: ../../whatsnew/3.12.rst:343
msgid "``failIfEqual``"
msgstr ""

#: ../../whatsnew/3.12.rst:343 ../../whatsnew/3.12.rst:349
msgid ":meth:`.assertNotEqual`"
msgstr ""

#: ../../whatsnew/3.12.rst:344
msgid "``failUnlessAlmostEqual``"
msgstr ""

#: ../../whatsnew/3.12.rst:344 ../../whatsnew/3.12.rst:350
msgid ":meth:`.assertAlmostEqual`"
msgstr ""

#: ../../whatsnew/3.12.rst:345
msgid "``failIfAlmostEqual``"
msgstr ""

#: ../../whatsnew/3.12.rst:345 ../../whatsnew/3.12.rst:351
msgid ":meth:`.assertNotAlmostEqual`"
msgstr ""

#: ../../whatsnew/3.12.rst:346
msgid "``failUnlessRaises``"
msgstr ""

#: ../../whatsnew/3.12.rst:346
msgid ":meth:`.assertRaises`"
msgstr ""

#: ../../whatsnew/3.12.rst:347
msgid "``assert_``"
msgstr ""

#: ../../whatsnew/3.12.rst:347 ../../whatsnew/3.12.rst:348
#: ../../whatsnew/3.12.rst:349 ../../whatsnew/3.12.rst:350
#: ../../whatsnew/3.12.rst:351 ../../whatsnew/3.12.rst:352
#: ../../whatsnew/3.12.rst:353
msgid "3.2"
msgstr ""

#: ../../whatsnew/3.12.rst:348
msgid "``assertEquals``"
msgstr ""

#: ../../whatsnew/3.12.rst:349
msgid "``assertNotEquals``"
msgstr ""

#: ../../whatsnew/3.12.rst:350
msgid "``assertAlmostEquals``"
msgstr ""

#: ../../whatsnew/3.12.rst:351
msgid "``assertNotAlmostEquals``"
msgstr ""

#: ../../whatsnew/3.12.rst:352
msgid "``assertRegexpMatches``"
msgstr ""

#: ../../whatsnew/3.12.rst:352
msgid ":meth:`.assertRegex`"
msgstr ""

#: ../../whatsnew/3.12.rst:353
msgid "``assertRaisesRegexp``"
msgstr ""

#: ../../whatsnew/3.12.rst:353
msgid ":meth:`.assertRaisesRegex`"
msgstr ""

#: ../../whatsnew/3.12.rst:354
msgid "``assertNotRegexpMatches``"
msgstr ""

#: ../../whatsnew/3.12.rst:354
msgid ":meth:`.assertNotRegex`"
msgstr ""

#: ../../whatsnew/3.12.rst:354
msgid "3.5"
msgstr ""

#: ../../whatsnew/3.12.rst:357
msgid ""
"You can use https://github.com/isidentical/teyit to automatically "
"modernise your unit tests."
msgstr ""

#: ../../whatsnew/3.12.rst:360
msgid ""
"Undocumented and broken :class:`~unittest.TestCase` method "
"``assertDictContainsSubset`` (deprecated in Python 3.2)."
msgstr ""

#: ../../whatsnew/3.12.rst:363
msgid ""
"Undocumented :meth:`TestLoader.loadTestsFromModule "
"<unittest.TestLoader.loadTestsFromModule>` parameter *use_load_tests* "
"(deprecated and ignored since Python 3.2)."
msgstr ""

#: ../../whatsnew/3.12.rst:367
msgid ""
"An alias of the :class:`~unittest.TextTestResult` class: "
"``_TextTestResult`` (deprecated in Python 3.2)."
msgstr ""

#: ../../whatsnew/3.12.rst:370
msgid "(Contributed by Serhiy Storchaka in :issue:`45162`.)"
msgstr ""

#: ../../whatsnew/3.12.rst:372
msgid ""
"Several names deprecated in the :mod:`configparser` way back in 3.2 have "
"been removed per :gh:`89336`:"
msgstr ""

#: ../../whatsnew/3.12.rst:375
msgid ""
":class:`configparser.ParsingError` no longer has a ``filename`` attribute"
" or argument. Use the ``source`` attribute and argument instead."
msgstr ""

#: ../../whatsnew/3.12.rst:377
msgid ""
":mod:`configparser` no longer has a ``SafeConfigParser`` class. Use the "
"shorter :class:`~configparser.ConfigParser` name instead."
msgstr ""

#: ../../whatsnew/3.12.rst:379
msgid ""
":class:`configparser.ConfigParser` no longer has a ``readfp`` method. Use"
" :meth:`~configparser.ConfigParser.read_file` instead."
msgstr ""

#: ../../whatsnew/3.12.rst:382
msgid ""
"The following undocumented :mod:`sqlite3` features, deprecated in Python "
"3.10, are now removed:"
msgstr ""

#: ../../whatsnew/3.12.rst:385
msgid "``sqlite3.enable_shared_cache()``"
msgstr ""

#: ../../whatsnew/3.12.rst:386
msgid "``sqlite3.OptimizedUnicode``"
msgstr ""

#: ../../whatsnew/3.12.rst:388
msgid ""
"If a shared cache must be used, open the database in URI mode using the "
"``cache=shared`` query parameter."
msgstr ""

#: ../../whatsnew/3.12.rst:391
msgid ""
"The ``sqlite3.OptimizedUnicode`` text factory has been an alias for "
":class:`str` since Python 3.3. Code that previously set the text factory "
"to ``OptimizedUnicode`` can either use ``str`` explicitly, or rely on the"
" default value which is also ``str``."
msgstr ""

#: ../../whatsnew/3.12.rst:396
msgid "(Contributed by Erlend E. Aasland in :gh:`92548`.)"
msgstr ""

#: ../../whatsnew/3.12.rst:398
msgid ""
"The ``--experimental-isolated-subinterpreters`` configure flag (and "
"corresponding ``EXPERIMENTAL_ISOLATED_SUBINTERPRETERS``) have been "
"removed."
msgstr ""

#: ../../whatsnew/3.12.rst:402
msgid ""
"``smtpd`` has been removed according to the schedule in :pep:`594`, "
"having been deprecated in Python 3.4.7 and 3.5.4. Use aiosmtpd_ PyPI "
"module or any other :mod:`asyncio`-based server instead. (Contributed by "
"Oleg Iarygin in :gh:`93243`.)"
msgstr ""

#: ../../whatsnew/3.12.rst:410
msgid ""
"Remove ``io.OpenWrapper`` and ``_pyio.OpenWrapper``, deprecated in Python"
" 3.10: just use :func:`open` instead. The :func:`open` (:func:`io.open`) "
"function is a built-in function. Since Python 3.10, :func:`_pyio.open` is"
" also a static method. (Contributed by Victor Stinner in :gh:`94169`.)"
msgstr ""

#: ../../whatsnew/3.12.rst:416
msgid ""
"Remove the :func:`ssl.RAND_pseudo_bytes` function, deprecated in Python "
"3.6: use :func:`os.urandom` or :func:`ssl.RAND_bytes` instead. "
"(Contributed by Victor Stinner in :gh:`94199`.)"
msgstr ""

#: ../../whatsnew/3.12.rst:420
msgid ""
":mod:`gzip`: Remove the ``filename`` attribute of :class:`gzip.GzipFile`,"
" deprecated since Python 2.6, use the :attr:`~gzip.GzipFile.name` "
"attribute instead. In write mode, the ``filename`` attribute added "
"``'.gz'`` file extension if it was not present. (Contributed by Victor "
"Stinner in :gh:`94196`.)"
msgstr ""

#: ../../whatsnew/3.12.rst:426
msgid ""
"Remove the :func:`ssl.match_hostname` function. The "
":func:`ssl.match_hostname` was deprecated in Python 3.7. OpenSSL performs"
" hostname matching since Python 3.7, Python no longer uses the "
":func:`ssl.match_hostname` function. (Contributed by Victor Stinner in "
":gh:`94199`.)"
msgstr ""

#: ../../whatsnew/3.12.rst:432
msgid ""
"Remove the :func:`locale.format` function, deprecated in Python 3.7: use "
":func:`locale.format_string` instead. (Contributed by Victor Stinner in "
":gh:`94226`.)"
msgstr ""

#: ../../whatsnew/3.12.rst:436
msgid ""
":mod:`hashlib`: Remove the pure Python implementation of "
":func:`hashlib.pbkdf2_hmac()`, deprecated in Python 3.10. Python 3.10 and"
" newer requires OpenSSL 1.1.1 (:pep:`644`): this OpenSSL version provides"
" a C implementation of :func:`~hashlib.pbkdf2_hmac()` which is faster. "
"(Contributed by Victor Stinner in :gh:`94199`.)"
msgstr ""

#: ../../whatsnew/3.12.rst:442
msgid ""
":mod:`xml.etree`: Remove the ``ElementTree.Element.copy()`` method of the"
" pure Python implementation, deprecated in Python 3.10, use the "
":func:`copy.copy` function instead.  The C implementation of "
":mod:`xml.etree` has no ``copy()`` method, only a ``__copy__()`` method. "
"(Contributed by Victor Stinner in :gh:`94383`.)"
msgstr ""

#: ../../whatsnew/3.12.rst:448
msgid ""
":mod:`zipimport`: Remove ``find_loader()`` and ``find_module()`` methods,"
" deprecated in Python 3.10: use the ``find_spec()`` method instead.  See "
":pep:`451` for the rationale. (Contributed by Victor Stinner in "
":gh:`94379`.)"
msgstr ""

#: ../../whatsnew/3.12.rst:453
msgid ""
"Remove the :func:`ssl.wrap_socket` function, deprecated in Python 3.7: "
"instead, create a :class:`ssl.SSLContext` object and call its "
":class:`ssl.SSLContext.wrap_socket` method. Any package that still uses "
":func:`ssl.wrap_socket` is broken and insecure. The function neither "
"sends a SNI TLS extension nor validates server hostname. Code is subject "
"to `CWE-295 <https://cwe.mitre.org/data/definitions/295.html>`_: Improper"
" Certificate Validation. (Contributed by Victor Stinner in :gh:`94199`.)"
msgstr ""

#: ../../whatsnew/3.12.rst:462
msgid ""
"Many previously deprecated cleanups in :mod:`importlib` have now been "
"completed:"
msgstr ""

#: ../../whatsnew/3.12.rst:465
msgid "References to, and support for ``module_repr()`` has been eradicated."
msgstr ""

#: ../../whatsnew/3.12.rst:468
msgid ""
"``importlib.util.set_package`` has been removed. (Contributed by Brett "
"Cannon in :gh:`65961`.)"
msgstr ""

#: ../../whatsnew/3.12.rst:471
msgid ""
"Removed the ``suspicious`` rule from the documentation Makefile, and "
"removed ``Doc/tools/rstlint.py``, both in favor of `sphinx-lint "
"<https://github.com/sphinx-contrib/sphinx-lint>`_. (Contributed by Julien"
" Palard in :gh:`98179`.)"
msgstr ""

#: ../../whatsnew/3.12.rst:478 ../../whatsnew/3.12.rst:585
msgid "Porting to Python 3.12"
msgstr ""

#: ../../whatsnew/3.12.rst:480
msgid ""
"This section lists previously described changes and other bugfixes that "
"may require changes to your code."
msgstr ""

#: ../../whatsnew/3.12.rst:484
msgid "Changes in the Python API"
msgstr ""

#: ../../whatsnew/3.12.rst:486
msgid ""
"More strict rules are now applied for numerical group references and "
"group names in regular expressions. Only sequence of ASCII digits is now "
"accepted as a numerical reference. The group name in bytes patterns and "
"replacement strings can now only contain ASCII letters and digits and "
"underscore. (Contributed by Serhiy Storchaka in :gh:`91760`.)"
msgstr ""

#: ../../whatsnew/3.12.rst:493
msgid ""
"Removed randrange() functionality deprecated since Python 3.10.  "
"Formerly, randrange(10.0) losslessly converted to randrange(10). Now, it "
"raises a TypeError. Also, the exception raised for non-integral values "
"such as randrange(10.5) or randrange('10') has been changed from "
"ValueError to TypeError.  This also prevents bugs where "
"``randrange(1e25)`` would silently select from a larger range than "
"``randrange(10**25)``. (Originally suggested by Serhiy Storchaka "
"gh-86388.)"
msgstr ""

#: ../../whatsnew/3.12.rst:501
msgid ""
":class:`argparse.ArgumentParser` changed encoding and error handler for "
"reading arguments from file (e.g. ``fromfile_prefix_chars`` option) from "
"default text encoding (e.g. :func:`locale.getpreferredencoding(False) "
"<locale.getpreferredencoding>`) to :term:`filesystem encoding and error "
"handler`. Argument files should be encoded in UTF-8 instead of ANSI "
"Codepage on Windows."
msgstr ""

#: ../../whatsnew/3.12.rst:507
msgid ""
"Removed the ``asyncore``-based ``smtpd`` module deprecated in Python "
"3.4.7 and 3.5.4.  A recommended replacement is the :mod:`asyncio`-based "
"aiosmtpd_ PyPI module."
msgstr ""

#: ../../whatsnew/3.12.rst:511
msgid ""
":func:`shlex.split`: Passing ``None`` for *s* argument now raises an "
"exception, rather than reading :data:`sys.stdin`. The feature was "
"deprecated in Python 3.9. (Contributed by Victor Stinner in :gh:`94352`.)"
msgstr ""

#: ../../whatsnew/3.12.rst:518
msgid "Build Changes"
msgstr ""

#: ../../whatsnew/3.12.rst:520
msgid ""
"Python no longer uses ``setup.py`` to build shared C extension modules. "
"Build parameters like headers and libraries are detected in ``configure``"
" script. Extensions are built by ``Makefile``. Most extensions use ``pkg-"
"config`` and fall back to manual detection. (Contributed by Christian "
"Heimes in :gh:`93939`.)"
msgstr ""

#: ../../whatsnew/3.12.rst:526
msgid ""
"``va_start()`` with two parameters, like ``va_start(args, format),`` is "
"now required to build Python. ``va_start()`` is no longer called with a "
"single parameter. (Contributed by Kumar Aditya in :gh:`93207`.)"
msgstr ""

#: ../../whatsnew/3.12.rst:531
msgid ""
"CPython now uses the ThinLTO option as the default link time optimization"
" policy if the Clang compiler accepts the flag. (Contributed by Dong-hee "
"Na in :gh:`89536`.)"
msgstr ""

#: ../../whatsnew/3.12.rst:537
msgid "C API Changes"
msgstr ""

#: ../../whatsnew/3.12.rst:542
msgid ""
"Added the new limited C API function :c:func:`PyType_FromMetaclass`, "
"which generalizes the existing :c:func:`PyType_FromModuleAndSpec` using "
"an additional metaclass argument. (Contributed by Wenzel Jakob in "
":gh:`93012`.)"
msgstr ""

#: ../../whatsnew/3.12.rst:547
msgid ""
"API for creating objects that can be called using :ref:`the vectorcall "
"protocol <vectorcall>` was added to the :ref:`Limited API <stable>`:"
msgstr ""

#: ../../whatsnew/3.12.rst:551
msgid ":const:`Py_TPFLAGS_HAVE_VECTORCALL`"
msgstr ""

#: ../../whatsnew/3.12.rst:552
msgid ":c:func:`PyVectorcall_NARGS`"
msgstr ""

#: ../../whatsnew/3.12.rst:553
msgid ":c:func:`PyVectorcall_Call`"
msgstr ""

#: ../../whatsnew/3.12.rst:554
msgid ":c:type:`vectorcallfunc`"
msgstr ""

#: ../../whatsnew/3.12.rst:556
msgid ""
"The :const:`Py_TPFLAGS_HAVE_VECTORCALL` flag is now removed from a class "
"when the class's :py:meth:`~object.__call__` method is reassigned. This "
"makes vectorcall safe to use with mutable types (i.e. heap types without "
"the :const:`immutable <Py_TPFLAGS_IMMUTABLETYPE>` flag). Mutable types "
"that do not override :c:member:`~PyTypeObject.tp_call` now inherit the "
"``Py_TPFLAGS_HAVE_VECTORCALL`` flag. (Contributed by Petr Viktorin in "
":gh:`93274`.)"
msgstr ""

#: ../../whatsnew/3.12.rst:564
msgid ""
"The :const:`Py_TPFLAGS_MANAGED_DICT` and "
":const:`Py_TPFLAGS_MANAGED_WEAKREF` flags have been added. This allows "
"extensions classes to support object ``__dict__`` and weakrefs with less "
"bookkeeping, using less memory and with faster access."
msgstr ""

#: ../../whatsnew/3.12.rst:569
msgid ""
"Added two new public functions, :c:func:`PyEval_SetProfileAllThreads` and"
" :c:func:`PyEval_SetTraceAllThreads`, that allow to set tracing and "
"profiling functions in all running threads in addition to the calling "
"one. (Contributed by Pablo Galindo in :gh:`93503`.)"
msgstr ""

#: ../../whatsnew/3.12.rst:575
msgid ""
"Added new function :c:func:`PyFunction_SetVectorcall` to the C API which "
"sets the vectorcall field of a given :c:type:`PyFunctionObject`. "
"(Contributed by Andrew Frost in :gh:`92257`.)"
msgstr ""

#: ../../whatsnew/3.12.rst:579
msgid ""
"The C API now permits registering callbacks via "
":c:func:`PyDict_AddWatcher`, :c:func:`PyDict_AddWatch` and related APIs "
"to be called whenever a dictionary is modified. This is intended for use "
"by optimizing interpreters, JIT compilers, or debuggers."
msgstr ""

#: ../../whatsnew/3.12.rst:587
msgid ""
"Legacy Unicode APIs based on ``Py_UNICODE*`` representation has been "
"removed. Please migrate to APIs based on UTF-8 or ``wchar_t*``."
msgstr ""

#: ../../whatsnew/3.12.rst:590
msgid ""
"Argument parsing functions like :c:func:`PyArg_ParseTuple` doesn't "
"support ``Py_UNICODE*`` based format (e.g. ``u``, ``Z``) anymore. Please "
"migrate to other formats for Unicode like ``s``, ``z``, ``es``, and "
"``U``."
msgstr ""

#: ../../whatsnew/3.12.rst:594
msgid ""
"``tp_weaklist`` for all static builtin types is always ``NULL``. This is "
"an internal-only field on ``PyTypeObject`` but we're pointing out the "
"change in case someone happens to be accessing the field directly anyway."
"  To avoid breakage, consider using the existing public C-API instead, "
"or, if necessary, the (internal-only) "
"``_PyObject_GET_WEAKREFS_LISTPTR()`` macro."
msgstr ""

#: ../../whatsnew/3.12.rst:601
msgid ""
"This internal-only :c:member:`PyTypeObject.tp_subclasses` may now not be "
"a valid object pointer.  Its type was changed to :c:expr:`void *` to "
"reflect this.  We mention this in case someone happens to be accessing "
"the internal-only field directly."
msgstr ""

#: ../../whatsnew/3.12.rst:606
msgid ""
"To get a list of subclasses, call the Python method "
":py:meth:`~class.__subclasses__` (using :c:func:`PyObject_CallMethod`, "
"for example)."
msgstr ""

#: ../../whatsnew/3.12.rst:610
msgid ""
"An unrecognized format character in :c:func:`PyUnicode_FromFormat` and "
":c:func:`PyUnicode_FromFormatV` now sets a :exc:`SystemError`. In "
"previous versions it caused all the rest of the format string to be "
"copied as-is to the result string, and any extra arguments discarded. "
"(Contributed by Serhiy Storchaka in :gh:`95781`.)"
msgstr ""

#: ../../whatsnew/3.12.rst:616
msgid ""
"Fixed wrong sign placement in :c:func:`PyUnicode_FromFormat` and "
":c:func:`PyUnicode_FromFormatV`. (Contributed by Philip Georgi in "
":gh:`95504`.)"
msgstr ""

#: ../../whatsnew/3.12.rst:620
msgid ""
"Extension classes wanting to add a ``__dict__`` or weak reference slot "
"should use :const:`Py_TPFLAGS_MANAGED_DICT` and "
":const:`Py_TPFLAGS_MANAGED_WEAKREF` instead of ``tp_dictoffset`` and "
"``tp_weaklistoffset``, respectively. The use of ``tp_dictoffset`` and "
"``tp_weaklistoffset`` is still supported, but does not fully support "
"multiple inheritance (:gh:`95589`), and performance may be worse. Classes"
" declaring :const:`Py_TPFLAGS_MANAGED_DICT` should call "
":c:func:`_PyObject_VisitManagedDict` and "
":c:func:`_PyObject_ClearManagedDict` to traverse and clear their "
"instance's dictionaries. To clear weakrefs, call "
":c:func:`PyObject_ClearWeakRefs`, as before."
msgstr ""

#: ../../whatsnew/3.12.rst:635
msgid "Deprecate global configuration variable:"
msgstr ""

#: ../../whatsnew/3.12.rst:637
msgid ":c:var:`Py_DebugFlag`: use :c:member:`PyConfig.parser_debug`"
msgstr ""

#: ../../whatsnew/3.12.rst:638
msgid ":c:var:`Py_VerboseFlag`: use :c:member:`PyConfig.verbose`"
msgstr ""

#: ../../whatsnew/3.12.rst:639
msgid ":c:var:`Py_QuietFlag`: use :c:member:`PyConfig.quiet`"
msgstr ""

#: ../../whatsnew/3.12.rst:640
msgid ":c:var:`Py_InteractiveFlag`: use :c:member:`PyConfig.interactive`"
msgstr ""

#: ../../whatsnew/3.12.rst:641
msgid ":c:var:`Py_InspectFlag`: use :c:member:`PyConfig.inspect`"
msgstr ""

#: ../../whatsnew/3.12.rst:642
msgid ":c:var:`Py_OptimizeFlag`: use :c:member:`PyConfig.optimization_level`"
msgstr ""

#: ../../whatsnew/3.12.rst:643
msgid ":c:var:`Py_NoSiteFlag`: use :c:member:`PyConfig.site_import`"
msgstr ""

#: ../../whatsnew/3.12.rst:644
msgid ":c:var:`Py_BytesWarningFlag`: use :c:member:`PyConfig.bytes_warning`"
msgstr ""

#: ../../whatsnew/3.12.rst:645
msgid ":c:var:`Py_FrozenFlag`: use :c:member:`PyConfig.pathconfig_warnings`"
msgstr ""

#: ../../whatsnew/3.12.rst:646
msgid ""
":c:var:`Py_IgnoreEnvironmentFlag`: use "
":c:member:`PyConfig.use_environment`"
msgstr ""

#: ../../whatsnew/3.12.rst:647
msgid ":c:var:`Py_DontWriteBytecodeFlag`: use :c:member:`PyConfig.write_bytecode`"
msgstr ""

#: ../../whatsnew/3.12.rst:648
msgid ""
":c:var:`Py_NoUserSiteDirectory`: use "
":c:member:`PyConfig.user_site_directory`"
msgstr ""

#: ../../whatsnew/3.12.rst:649
msgid ":c:var:`Py_UnbufferedStdioFlag`: use :c:member:`PyConfig.buffered_stdio`"
msgstr ""

#: ../../whatsnew/3.12.rst:650
msgid ""
":c:var:`Py_HashRandomizationFlag`: use :c:member:`PyConfig.use_hash_seed`"
" and :c:member:`PyConfig.hash_seed`"
msgstr ""

#: ../../whatsnew/3.12.rst:652
msgid ":c:var:`Py_IsolatedFlag`: use :c:member:`PyConfig.isolated`"
msgstr ""

#: ../../whatsnew/3.12.rst:653
msgid ""
":c:var:`Py_LegacyWindowsFSEncodingFlag`: use "
":c:member:`PyConfig.legacy_windows_fs_encoding`"
msgstr ""

#: ../../whatsnew/3.12.rst:654
msgid ""
":c:var:`Py_LegacyWindowsStdioFlag`: use "
":c:member:`PyConfig.legacy_windows_stdio`"
msgstr ""

#: ../../whatsnew/3.12.rst:655
msgid ""
":c:var:`Py_FileSystemDefaultEncoding`: use "
":c:member:`PyConfig.filesystem_encoding`"
msgstr ""

#: ../../whatsnew/3.12.rst:656
msgid ""
":c:var:`Py_FileSystemDefaultEncodeErrors`: use "
":c:member:`PyConfig.filesystem_errors`"
msgstr ""

#: ../../whatsnew/3.12.rst:657
msgid ""
":c:var:`Py_UTF8Mode`: use :c:member:`PyPreConfig.utf8_mode` (see "
":c:func:`Py_PreInitialize`)"
msgstr ""

#: ../../whatsnew/3.12.rst:659
msgid ""
"The :c:func:`Py_InitializeFromConfig` API should be used with "
":c:type:`PyConfig` instead. (Contributed by Victor Stinner in "
":gh:`77782`.)"
msgstr ""

#: ../../whatsnew/3.12.rst:663
msgid ""
"Creating :c:data:`immutable types <Py_TPFLAGS_IMMUTABLETYPE>` with "
"mutable bases is deprecated and will be disabled in Python 3.14."
msgstr ""

#: ../../whatsnew/3.12.rst:670
msgid ""
"Remove the ``token.h`` header file. There was never any public tokenizer "
"C API. The ``token.h`` header file was only designed to be used by Python"
" internals. (Contributed by Victor Stinner in :gh:`92651`.)"
msgstr ""

#: ../../whatsnew/3.12.rst:675
msgid "Leagcy Unicode APIs has been removed. See :pep:`623` for detail."
msgstr ""

#: ../../whatsnew/3.12.rst:677
msgid ":c:macro:`PyUnicode_WCHAR_KIND`"
msgstr ""

#: ../../whatsnew/3.12.rst:678
msgid ":c:func:`PyUnicode_AS_UNICODE`"
msgstr ""

#: ../../whatsnew/3.12.rst:679
msgid ":c:func:`PyUnicode_AsUnicode`"
msgstr ""

#: ../../whatsnew/3.12.rst:680
msgid ":c:func:`PyUnicode_AsUnicodeAndSize`"
msgstr ""

#: ../../whatsnew/3.12.rst:681
msgid ":c:func:`PyUnicode_AS_DATA`"
msgstr ""

#: ../../whatsnew/3.12.rst:682
msgid ":c:func:`PyUnicode_FromUnicode`"
msgstr ""

#: ../../whatsnew/3.12.rst:683
msgid ":c:func:`PyUnicode_GET_SIZE`"
msgstr ""

#: ../../whatsnew/3.12.rst:684
msgid ":c:func:`PyUnicode_GetSize`"
msgstr ""

#: ../../whatsnew/3.12.rst:685
msgid ":c:func:`PyUnicode_GET_DATA_SIZE`"
msgstr ""

#: ../../whatsnew/3.12.rst:687
msgid ""
"Remove the ``PyUnicode_InternImmortal()`` function and the "
"``SSTATE_INTERNED_IMMORTAL`` macro. (Contributed by Victor Stinner in "
":gh:`85858`.)"
msgstr ""

#~ msgid "(Contributed by Erlend E. Aasland in :gh:`92548`)"
#~ msgstr ""

