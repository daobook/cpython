# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2021, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2021.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.11\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-12-13 09:49+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.1\n"

#: ../../whatsnew/3.11.rst:3
msgid "What's New In Python 3.11"
msgstr ""

#: ../../whatsnew/3.11.rst
msgid "Release"
msgstr ""

#: ../../whatsnew/3.11.rst:5
msgid "|release|"
msgstr ""

#: ../../whatsnew/3.11.rst
msgid "Date"
msgstr ""

#: ../../whatsnew/3.11.rst:6
msgid "|today|"
msgstr ""

#: ../../whatsnew/3.11.rst:48
msgid "This article explains the new features in Python 3.11, compared to 3.10."
msgstr ""

#: ../../whatsnew/3.11.rst:50
msgid "For full details, see the :ref:`changelog <changelog>`."
msgstr ""

#: ../../whatsnew/3.11.rst:54
msgid ""
"Prerelease users should be aware that this document is currently in draft"
" form. It will be updated substantially as Python 3.11 moves towards "
"release, so it's worth checking back even after reading earlier versions."
msgstr ""

#: ../../whatsnew/3.11.rst:60
msgid "Summary -- Release highlights"
msgstr ""

#: ../../whatsnew/3.11.rst:70 ../../whatsnew/3.11.rst:606
msgid "New Features"
msgstr ""

#: ../../whatsnew/3.11.rst:75
msgid "Enhanced error locations in tracebacks"
msgstr ""

#: ../../whatsnew/3.11.rst:77
msgid ""
"When printing tracebacks, the interpreter will now point to the exact "
"expression that caused the error instead of just the line. For example:"
msgstr ""

#: ../../whatsnew/3.11.rst:91
msgid ""
"Previous versions of the interpreter would point to just the line making "
"it ambiguous which object was ``None``. These enhanced errors can also be"
" helpful when dealing with deeply nested dictionary objects and multiple "
"function calls,"
msgstr ""

#: ../../whatsnew/3.11.rst:112
msgid "as well as complex arithmetic expressions:"
msgstr ""

#: ../../whatsnew/3.11.rst:122 ../../whatsnew/3.11.rst:146
msgid ""
"See :pep:`657` for more details. (Contributed by Pablo Galindo, Batuhan "
"Taskaya and Ammar Askar in :issue:`43950`.)"
msgstr ""

#: ../../whatsnew/3.11.rst:126
msgid ""
"This feature requires storing column positions in code objects which may "
"result in a small increase of disk usage of compiled Python files or "
"interpreter memory usage. To avoid storing the extra information and/or "
"deactivate printing the extra traceback information, the :option:`-X` "
"``no_debug_ranges`` command line flag or the "
":envvar:`PYTHONNODEBUGRANGES` environment variable can be used."
msgstr ""

#: ../../whatsnew/3.11.rst:134
msgid "Column information for code objects"
msgstr ""

#: ../../whatsnew/3.11.rst:136
msgid ""
"The information used by the enhanced traceback feature is made available "
"as a general API that can be used to correlate bytecode instructions with"
" source code. This information can be retrieved using:"
msgstr ""

#: ../../whatsnew/3.11.rst:140
msgid "The :meth:`codeobject.co_positions` method in Python."
msgstr ""

#: ../../whatsnew/3.11.rst:141
msgid "The :c:func:`PyCode_Addr2Location` function in the C-API."
msgstr ""

#: ../../whatsnew/3.11.rst:143
msgid ""
"The :option:`-X` ``no_debug_ranges`` option and the environment variable "
":envvar:`PYTHONNODEBUGRANGES` can be used to disable this feature."
msgstr ""

#: ../../whatsnew/3.11.rst:150
msgid "Exceptions can be enriched with a string ``__note__``"
msgstr ""

#: ../../whatsnew/3.11.rst:152
msgid ""
"The ``__note__`` field was added to :exc:`BaseException`. It is ``None`` "
"by default but can be set to a string which is added to the exception's "
"traceback. (Contributed by Irit Katriel in :issue:`45607`.)"
msgstr ""

#: ../../whatsnew/3.11.rst:157
msgid "Other Language Changes"
msgstr ""

#: ../../whatsnew/3.11.rst:159
msgid ""
"Asynchronous comprehensions are now allowed inside comprehensions in "
"asynchronous functions. Outer comprehensions implicitly become "
"asynchronous. (Contributed by Serhiy Storchaka in :issue:`33346`.)"
msgstr ""

#: ../../whatsnew/3.11.rst:163
msgid ""
"A :exc:`TypeError` is now raised instead of an :exc:`AttributeError` in "
":meth:`contextlib.ExitStack.enter_context` and "
":meth:`contextlib.AsyncExitStack.enter_async_context` for objects which "
"do not support the :term:`context manager` or :term:`asynchronous context"
" manager` protocols correspondingly. (Contributed by Serhiy Storchaka in "
":issue:`44471`.)"
msgstr ""

#: ../../whatsnew/3.11.rst:170
msgid ""
"A :exc:`TypeError` is now raised instead of an :exc:`AttributeError` in "
":keyword:`with` and :keyword:`async with` statements for objects which do"
" not support the :term:`context manager` or :term:`asynchronous context "
"manager` protocols correspondingly. (Contributed by Serhiy Storchaka in "
":issue:`12022`.)"
msgstr ""

#: ../../whatsnew/3.11.rst:178
msgid "Other CPython Implementation Changes"
msgstr ""

#: ../../whatsnew/3.11.rst:180
msgid ""
"Special methods :meth:`complex.__complex__` and :meth:`bytes.__bytes__` "
"are implemented to support :class:`typing.SupportsComplex` and "
":class:`typing.SupportsBytes` protocols. (Contributed by Mark Dickinson "
"and Dong-hee Na in :issue:`24234`.)"
msgstr ""

#: ../../whatsnew/3.11.rst:184
msgid ""
"``siphash13`` is added as a new internal hashing algorithms. It's has "
"similar security properties as ``siphash24`` but it is slightly faster "
"for long inputs. ``str``, ``bytes``, and some other types now use it as "
"default algorithm for ``hash()``. :pep:`552` hash-based pyc files now use"
" ``siphash13``, too. (Contributed by Inada Naoki in :issue:`29410`.)"
msgstr ""

#: ../../whatsnew/3.11.rst:190
msgid ""
"When an active exception is re-raised by a :keyword:`raise` statement "
"with no parameters, the traceback attached to this exception is now "
"always ``sys.exc_info()[1].__traceback__``. This means that changes made "
"to the traceback in the current :keyword:`except` clause are reflected in"
" the re-raised exception. (Contributed by Irit Katriel in "
":issue:`45711`.)"
msgstr ""

#: ../../whatsnew/3.11.rst:197
msgid "New Modules"
msgstr ""

#: ../../whatsnew/3.11.rst:199
msgid "None yet."
msgstr ""

#: ../../whatsnew/3.11.rst:203
msgid "Improved Modules"
msgstr ""

#: ../../whatsnew/3.11.rst:206
msgid "fractions"
msgstr ""

#: ../../whatsnew/3.11.rst:208
msgid ""
"Support :PEP:`515`-style initialization of :class:`~fractions.Fraction` "
"from string.  (Contributed by Sergey B Kirpichev in :issue:`44258`.)"
msgstr ""

#: ../../whatsnew/3.11.rst:211
msgid ""
":class:`~fractions.Fraction` now implements an ``__int__`` method, so "
"that an ``isinstance(some_fraction, typing.SupportsInt)`` check passes. "
"(Contributed by Mark Dickinson in :issue:`44547`.)"
msgstr ""

#: ../../whatsnew/3.11.rst:217
msgid "inspect"
msgstr ""

#: ../../whatsnew/3.11.rst:218
msgid ""
"Add :func:`inspect.getmembers_static`: return all members without "
"triggering dynamic lookup via the descriptor protocol. (Contributed by "
"Weipeng Hong in :issue:`30533`.)"
msgstr ""

#: ../../whatsnew/3.11.rst:224
msgid "math"
msgstr ""

#: ../../whatsnew/3.11.rst:225
msgid ""
"Add :func:`math.exp2`: return 2 raised to the power of x. (Contributed by"
" Gideon Mitchell in :issue:`45917`.)"
msgstr ""

#: ../../whatsnew/3.11.rst:228
msgid ""
"Add :func:`math.cbrt`: return the cube root of x. (Contributed by Ajith "
"Ramachandran in :issue:`44357`.)"
msgstr ""

#: ../../whatsnew/3.11.rst:231
msgid ""
"The behaviour of two :func:`math.pow` corner cases was changed, for "
"consistency with the IEEE 754 specification. The operations "
"``math.pow(0.0, -math.inf)`` and ``math.pow(-0.0, -math.inf)`` now return"
" ``inf``. Previously they raised :exc:`ValueError`. (Contributed by Mark "
"Dickinson in :issue:`44339`.)"
msgstr ""

#: ../../whatsnew/3.11.rst:239
msgid "operator"
msgstr ""

#: ../../whatsnew/3.11.rst:241
msgid ""
"A new function ``operator.call`` has been added, such that "
"``operator.call(obj, *args, **kwargs) == obj(*args, **kwargs)``. "
"(Contributed by Antony Lee in :issue:`44019`.)"
msgstr ""

#: ../../whatsnew/3.11.rst:247
msgid "os"
msgstr ""

#: ../../whatsnew/3.11.rst:249
msgid ""
"On Windows, :func:`os.urandom` now uses ``BCryptGenRandom()``, instead of"
" ``CryptGenRandom()`` which is deprecated. (Contributed by Dong-hee Na in"
" :issue:`44611`.)"
msgstr ""

#: ../../whatsnew/3.11.rst:255
msgid "sqlite3"
msgstr ""

#: ../../whatsnew/3.11.rst:257
msgid ""
"You can now disable the authorizer by passing :const:`None` to "
":meth:`~sqlite3.Connection.set_authorizer`. (Contributed by Erlend E. "
"Aasland in :issue:`44491`.)"
msgstr ""

#: ../../whatsnew/3.11.rst:261
msgid ""
"Collation name :meth:`~sqlite3.Connection.create_collation` can now "
"contain any Unicode character.  Collation names with invalid characters "
"now raise :exc:`UnicodeEncodeError` instead of "
":exc:`sqlite3.ProgrammingError`. (Contributed by Erlend E. Aasland in "
":issue:`44688`.)"
msgstr ""

#: ../../whatsnew/3.11.rst:266
msgid ""
":mod:`sqlite3` exceptions now include the SQLite extended error code as "
":attr:`~sqlite3.Error.sqlite_errorcode` and the SQLite error name as "
":attr:`~sqlite3.Error.sqlite_errorname`. (Contributed by Aviv Palivoda, "
"Daniel Shahaf, and Erlend E. Aasland in :issue:`16379` and "
":issue:`24139`.)"
msgstr ""

#: ../../whatsnew/3.11.rst:272
msgid ""
"Add :meth:`~sqlite3.Connection.setlimit` and "
":meth:`~sqlite3.Connection.getlimit` to :class:`sqlite3.Connection` for "
"setting and getting SQLite limits by connection basis. (Contributed by "
"Erlend E. Aasland in :issue:`45243`.)"
msgstr ""

#: ../../whatsnew/3.11.rst:277
msgid ""
":mod:`sqlite3` now sets :attr:`sqlite3.threadsafety` based on the default"
" threading mode the underlying SQLite library has been compiled with. "
"(Contributed by Erlend E. Aasland in :issue:`45613`.)"
msgstr ""

#: ../../whatsnew/3.11.rst:281
msgid ""
":mod:`sqlite3` C callbacks now use unraisable exceptions if callback "
"tracebacks are enabled. Users can now register an :func:`unraisable hook "
"handler <sys.unraisablehook>` to improve their debug experience. "
"(Contributed by Erlend E. Aasland in :issue:`45828`.)"
msgstr ""

#: ../../whatsnew/3.11.rst:289
msgid "sys"
msgstr ""

#: ../../whatsnew/3.11.rst:291
msgid ""
":func:`sys.exc_info` now derives the ``type`` and ``traceback`` fields "
"from the ``value`` (the exception instance), so when an exception is "
"modified while it is being handled, the changes are reflected in the "
"results of subsequent calls to :func:`exc_info`. (Contributed by Irit "
"Katriel in :issue:`45711`.)"
msgstr ""

#: ../../whatsnew/3.11.rst:299
msgid "threading"
msgstr ""

#: ../../whatsnew/3.11.rst:301
msgid ""
"On Unix, if the ``sem_clockwait()`` function is available in the C "
"library (glibc 2.30 and newer), the :meth:`threading.Lock.acquire` method"
" now uses the monotonic clock (:data:`time.CLOCK_MONOTONIC`) for the "
"timeout, rather than using the system clock "
"(:data:`time.CLOCK_REALTIME`), to not be affected by system clock "
"changes. (Contributed by Victor Stinner in :issue:`41710`.)"
msgstr ""

#: ../../whatsnew/3.11.rst:310
msgid "time"
msgstr ""

#: ../../whatsnew/3.11.rst:312
msgid ""
"On Unix, :func:`time.sleep` now uses the ``clock_nanosleep()`` or "
"``nanosleep()`` function, if available, which has a resolution of 1 "
"nanosecond (10\\ :sup:`-9` seconds), rather than using ``select()`` which"
" has a resolution of 1 microsecond (10\\ :sup:`-6` seconds). (Contributed"
" by Benjamin Szőke and Victor Stinner in :issue:`21302`.)"
msgstr ""

#: ../../whatsnew/3.11.rst:318
msgid ""
"On Windows 8.1 and newer, :func:`time.sleep` now uses a waitable timer "
"based on `high-resolution timers <https://docs.microsoft.com/en-us"
"/windows-hardware/drivers/kernel/high-resolution-timers>`_ which has a "
"resolution of 100 nanoseconds (10\\ :sup:`-7` seconds). Previously, it "
"had a resolution of 1 millisecond (10\\ :sup:`-3` seconds). (Contributed "
"by Benjamin Szőke, Dong-hee Na, Eryk Sun and Victor Stinner in "
":issue:`21302` and :issue:`45429`.)"
msgstr ""

#: ../../whatsnew/3.11.rst:327
msgid "unicodedata"
msgstr ""

#: ../../whatsnew/3.11.rst:329
msgid "The Unicode database has been updated to version 14.0.0. (:issue:`45190`)."
msgstr ""

#: ../../whatsnew/3.11.rst:333
msgid "fcntl"
msgstr ""

#: ../../whatsnew/3.11.rst:335
msgid ""
"On FreeBSD, the :attr:`F_DUP2FD` and :attr:`F_DUP2FD_CLOEXEC` flags "
"respectively are supported, the former equals to ``dup2`` usage while the"
" latter set the ``FD_CLOEXEC`` flag in addition."
msgstr ""

#: ../../whatsnew/3.11.rst:341
msgid "Optimizations"
msgstr ""

#: ../../whatsnew/3.11.rst:343
#, python-format
msgid ""
"Compiler now optimizes simple C-style formatting with literal format "
"containing only format codes ``%s``, ``%r`` and ``%a`` and makes it as "
"fast as corresponding f-string expression. (Contributed by Serhiy "
"Storchaka in :issue:`28307`.)"
msgstr ""

#: ../../whatsnew/3.11.rst:348
msgid ""
"\"Zero-cost\" exceptions are implemented. The cost of ``try`` statements "
"is almost eliminated when no exception is raised. (Contributed by Mark "
"Shannon in :issue:`40222`.)"
msgstr ""

#: ../../whatsnew/3.11.rst:352
msgid ""
"Method calls with keywords are now faster due to bytecode changes which "
"avoid creating bound method instances. Previously, this optimization was "
"applied only to method calls with purely positional arguments. "
"(Contributed by Ken Jin and Mark Shannon in :issue:`26110`, based on "
"ideas implemented in PyPy.)"
msgstr ""

#: ../../whatsnew/3.11.rst:359
msgid ""
"Pure ASCII strings are now normalized in constant time by "
":func:`unicodedata.normalize`. (Contributed by Dong-hee Na in "
":issue:`44987`.)"
msgstr ""

#: ../../whatsnew/3.11.rst:362
msgid ""
":mod:`math` functions :func:`~math.comb` and :func:`~math.perm` are now "
"up to 10 times or more faster for large arguments (the speed up is larger"
" for larger *k*). (Contributed by Serhiy Storchaka in :issue:`37295`.)"
msgstr ""

#: ../../whatsnew/3.11.rst:369
msgid "CPython bytecode changes"
msgstr ""

#: ../../whatsnew/3.11.rst:371
msgid ""
"Replaced all numeric ``BINARY_*`` and ``INPLACE_*`` instructions with a "
"single :opcode:`BINARY_OP` implementation."
msgstr ""

#: ../../whatsnew/3.11.rst:374
msgid ""
"Added a new :opcode:`CALL_METHOD_KW` opcode.  Calls a method in a similar"
" fashion as :opcode:`CALL_METHOD`, but also supports keyword arguments.  "
"Works in tandem with :opcode:`LOAD_METHOD`."
msgstr ""

#: ../../whatsnew/3.11.rst:378
msgid "Removed ``COPY_DICT_WITHOUT_KEYS``."
msgstr ""

#: ../../whatsnew/3.11.rst:380
msgid ""
":opcode:`MATCH_CLASS` and :opcode:`MATCH_KEYS` no longer push an "
"additional boolean value indicating whether the match succeeded or "
"failed. Instead, they indicate failure with :const:`None` (where a tuple "
"of extracted values would otherwise be)."
msgstr ""

#: ../../whatsnew/3.11.rst:385
msgid ""
"Added :opcode:`COPY`, which pushes the *i*-th item to the top of the "
"stack. The item is not removed from its original location."
msgstr ""

#: ../../whatsnew/3.11.rst:388
msgid ":opcode:`JUMP_IF_NOT_EXC_MATCH` no longer pops the active exception."
msgstr ""

#: ../../whatsnew/3.11.rst:392 ../../whatsnew/3.11.rst:737
msgid "Deprecated"
msgstr ""

#: ../../whatsnew/3.11.rst:394
msgid ""
"The :mod:`lib2to3` package and ``2to3`` tool are now deprecated and may "
"not be able to parse Python 3.10 or newer. See the :pep:`617` (New PEG "
"parser for CPython).  (Contributed by Victor Stinner in :issue:`40360`.)"
msgstr ""

#: ../../whatsnew/3.11.rst:398
msgid ""
":class:`webbrowser.MacOSX` is deprecated and will be removed in Python "
"3.13. It is untested and undocumented and also not used by webbrowser "
"itself. (Contributed by Dong-hee Na in :issue:`42255`.)"
msgstr ""

#: ../../whatsnew/3.11.rst:402
msgid ""
"The behavior of returning a value from a :class:`~unittest.TestCase` and "
":class:`~unittest.IsolatedAsyncioTestCase` test methods (other than the "
"default ``None`` value), is now deprecated."
msgstr ""

#: ../../whatsnew/3.11.rst:406
msgid ""
"Deprecated the following :mod:`unittest` functions, scheduled for removal"
" in Python 3.13:"
msgstr ""

#: ../../whatsnew/3.11.rst:409
msgid ":func:`unittest.findTestCases`"
msgstr ""

#: ../../whatsnew/3.11.rst:410
msgid ":func:`unittest.makeSuite`"
msgstr ""

#: ../../whatsnew/3.11.rst:411
msgid ":func:`unittest.getTestCaseNames`"
msgstr ""

#: ../../whatsnew/3.11.rst:413
msgid "Use :class:`~unittest.TestLoader` method instead:"
msgstr ""

#: ../../whatsnew/3.11.rst:415
msgid ":meth:`unittest.TestLoader.loadTestsFromModule`"
msgstr ""

#: ../../whatsnew/3.11.rst:416
msgid ":meth:`unittest.TestLoader.loadTestsFromTestCase`"
msgstr ""

#: ../../whatsnew/3.11.rst:417
msgid ":meth:`unittest.TestLoader.getTestCaseNames`"
msgstr ""

#: ../../whatsnew/3.11.rst:419
msgid "(Contributed by Erlend E. Aasland in :issue:`5846`.)"
msgstr ""

#: ../../whatsnew/3.11.rst:421
msgid ""
"The :meth:`turtle.RawTurtle.settiltangle` is deprecated since Python 3.1,"
" it now emits a deprecation warning and will be removed in Python 3.13. "
"Use :meth:`turtle.RawTurtle.tiltangle` instead (it was earlier "
"incorrectly marked as deprecated, its docstring is now corrected). "
"(Contributed by Hugo van Kemenade in :issue:`45837`.)"
msgstr ""

#: ../../whatsnew/3.11.rst:428 ../../whatsnew/3.11.rst:756
msgid "Removed"
msgstr ""

#: ../../whatsnew/3.11.rst:430
msgid ""
":class:`smtpd.MailmanProxy` is now removed as it is unusable without an "
"external module, ``mailman``. (Contributed by Dong-hee Na in "
":issue:`35800`.)"
msgstr ""

#: ../../whatsnew/3.11.rst:433
msgid ""
"The ``binhex`` module, deprecated in Python 3.9, is now removed. The "
"following :mod:`binascii` functions, deprecated in Python 3.9, are now "
"also removed:"
msgstr ""

#: ../../whatsnew/3.11.rst:437
msgid "``a2b_hqx()``, ``b2a_hqx()``;"
msgstr ""

#: ../../whatsnew/3.11.rst:438
msgid "``rlecode_hqx()``, ``rledecode_hqx()``."
msgstr ""

#: ../../whatsnew/3.11.rst:440
msgid "The :func:`binascii.crc_hqx` function remains available."
msgstr ""

#: ../../whatsnew/3.11.rst:442
msgid "(Contributed by Victor Stinner in :issue:`45085`.)"
msgstr ""

#: ../../whatsnew/3.11.rst:444
msgid ""
"The distutils ``bdist_msi`` command, deprecated in Python 3.9, is now "
"removed. Use ``bdist_wheel`` (wheel packages) instead. (Contributed by "
"Hugo van Kemenade in :issue:`45124`.)"
msgstr ""

#: ../../whatsnew/3.11.rst:448
msgid ""
"Due to significant security concerns, the *reuse_address* parameter of "
":meth:`asyncio.loop.create_datagram_endpoint`, disabled in Python 3.9, is"
" now entirely removed. This is because of the behavior of the socket "
"option ``SO_REUSEADDR`` in UDP. (Contributed by Hugo van Kemenade in "
":issue:`45129`.)"
msgstr ""

#: ../../whatsnew/3.11.rst:454
msgid ""
"Removed :meth:`__getitem__` methods of "
":class:`xml.dom.pulldom.DOMEventStream`, "
":class:`wsgiref.util.FileWrapper` and :class:`fileinput.FileInput`, "
"deprecated since Python 3.9. (Contributed by Hugo van Kemenade in "
":issue:`45132`.)"
msgstr ""

#: ../../whatsnew/3.11.rst:459
msgid "Removed many old deprecated :mod:`unittest` features:"
msgstr ""

#: ../../whatsnew/3.11.rst:461
msgid ""
":class:`~unittest.TestCase` method aliases ``failUnlessEqual``, "
"``failIfEqual``, ``failUnless``, ``failIf``, ``failUnlessRaises``, "
"``failUnlessAlmostEqual``, ``failIfAlmostEqual`` (deprecated in Python "
"3.1), ``assertEquals``, ``assertNotEquals``, ``assert_``, "
"``assertAlmostEquals``, ``assertNotAlmostEquals``, "
"``assertRegexpMatches``, ``assertRaisesRegexp`` (deprecated in Python "
"3.2), and ``assertNotRegexpMatches`` (deprecated in Python 3.5)."
msgstr ""

#: ../../whatsnew/3.11.rst:469
msgid ""
"Undocumented and broken :class:`~unittest.TestCase` method "
"``assertDictContainsSubset`` (deprecated in Python 3.2)."
msgstr ""

#: ../../whatsnew/3.11.rst:472
msgid ""
"Undocumented :meth:`<unittest.TestLoader.loadTestsFromModule> "
"TestLoader.loadTestsFromModule` parameter *use_load_tests* (deprecated "
"and ignored since Python 3.2)."
msgstr ""

#: ../../whatsnew/3.11.rst:476
msgid ""
"An alias of the :class:`~unittest.TextTestResult` class: "
"``_TextTestResult`` (deprecated in Python 3.2)."
msgstr ""

#: ../../whatsnew/3.11.rst:479
msgid "(Contributed by Serhiy Storchaka in :issue:`45162`.)"
msgstr ""

#: ../../whatsnew/3.11.rst:481
msgid ""
"The following deprecated functions and methods are removed in the "
":mod:`gettext` module: :func:`~gettext.lgettext`, "
":func:`~gettext.ldgettext`, :func:`~gettext.lngettext` and "
":func:`~gettext.ldngettext`."
msgstr ""

#: ../../whatsnew/3.11.rst:485
msgid ""
"Function :func:`~gettext.bind_textdomain_codeset`, methods "
":meth:`~gettext.NullTranslations.output_charset` and "
":meth:`~gettext.NullTranslations.set_output_charset`, and the *codeset* "
"parameter of functions :func:`~gettext.translation` and "
":func:`~gettext.install` are also removed, since they are only used for "
"the ``l*gettext()`` functions. (Contributed by Dong-hee Na and Serhiy "
"Storchaka in :issue:`44235`.)"
msgstr ""

#: ../../whatsnew/3.11.rst:493
msgid ""
"Removed from the :mod:`configparser` module: the "
":class:`SafeConfigParser` class, the :attr:`filename` property of the "
":class:`ParsingError` class, the :meth:`readfp` method of the "
":class:`ConfigParser` class, deprecated since Python 3.2. (Contributed by"
" Hugo van Kemenade in :issue:`45173`.)"
msgstr ""

#: ../../whatsnew/3.11.rst:500
msgid ""
"The :func:`@asyncio.coroutine <asyncio.coroutine>` :term:`decorator` "
"enabling legacy generator-based coroutines to be compatible with "
"async/await code. The function has been deprecated since Python 3.8 and "
"the removal was initially scheduled for Python 3.10. Use :keyword:`async "
"def` instead. (Contributed by Illia Volochii in :issue:`43216`.)"
msgstr ""

#: ../../whatsnew/3.11.rst:506
msgid ""
":class:`asyncio.coroutines.CoroWrapper` used for wrapping legacy "
"generator-based coroutine objects in the debug mode. (Contributed by "
"Illia Volochii in :issue:`43216`.)"
msgstr ""

#: ../../whatsnew/3.11.rst:510
msgid ""
"Removed the deprecated ``split()`` method of :class:`_tkinter.TkappType`."
" (Contributed by Erlend E. Aasland in :issue:`38371`.)"
msgstr ""

#: ../../whatsnew/3.11.rst:513
msgid "Removed from the :mod:`inspect` module:"
msgstr ""

#: ../../whatsnew/3.11.rst:515
msgid ""
"the ``getargspec`` function, deprecated since Python 3.0; use "
":func:`inspect.signature` or :func:`inspect.getfullargspec` instead."
msgstr ""

#: ../../whatsnew/3.11.rst:518
msgid ""
"the ``formatargspec`` function, deprecated since Python 3.5; use the "
":func:`inspect.signature` function and :class:`Signature` object "
"directly."
msgstr ""

#: ../../whatsnew/3.11.rst:522
msgid ""
"the undocumented ``Signature.from_callable`` and "
"``Signature.from_function`` functions, deprecated since Python 3.5; use "
"the :meth:`Signature.from_callable() <inspect.Signature.from_callable>` "
"method instead."
msgstr ""

#: ../../whatsnew/3.11.rst:527
msgid "(Contributed by Hugo van Kemenade in :issue:`45320`.)"
msgstr ""

#: ../../whatsnew/3.11.rst:531 ../../whatsnew/3.11.rst:635
msgid "Porting to Python 3.11"
msgstr ""

#: ../../whatsnew/3.11.rst:533
msgid ""
"This section lists previously described changes and other bugfixes that "
"may require changes to your code."
msgstr ""

#: ../../whatsnew/3.11.rst:538
msgid "Changes in the Python API"
msgstr ""

#: ../../whatsnew/3.11.rst:540
msgid ""
"Prohibited passing non-:class:`concurrent.futures.ThreadPoolExecutor` "
"executors to :meth:`loop.set_default_executor` following a deprecation in"
" Python 3.8. (Contributed by Illia Volochii in :issue:`43234`.)"
msgstr ""

#: ../../whatsnew/3.11.rst:545
msgid ""
":func:`open`, :func:`io.open`, :func:`codecs.open` and "
":class:`fileinput.FileInput` no longer accept ``'U'`` (\"universal "
"newline\") in the file mode. This flag was deprecated since Python 3.3. "
"In Python 3, the \"universal newline\" is used by default when a file is "
"open in text mode.  The :ref:`newline parameter <open-newline-parameter>`"
" of :func:`open` controls how universal newlines works. (Contributed by "
"Victor Stinner in :issue:`37330`.)"
msgstr ""

#: ../../whatsnew/3.11.rst:553
msgid ""
"The :mod:`pdb` module now reads the :file:`.pdbrc` configuration file "
"with the ``'utf-8'`` encoding. (Contributed by Srinivas Reddy Thatiparthy"
" (శ్రీనివాస్  రెడ్డి తాటిపర్తి) in :issue:`41137`.)"
msgstr ""

#: ../../whatsnew/3.11.rst:557
msgid ""
"When sorting using tuples as keys, the order of the result may differ "
"from earlier releases if the tuple elements don't define a total ordering"
" (see :ref:`expressions-value-comparisons` for information on total "
"ordering).  It's generally true that the result of sorting simply isn't "
"well-defined in the absence of a total ordering on list elements."
msgstr ""

#: ../../whatsnew/3.11.rst:566
msgid "Build Changes"
msgstr ""

#: ../../whatsnew/3.11.rst:568
msgid ""
"CPython can now be built with the ThinLTO option via ``--with-lto=thin``."
" (Contributed by Dong-hee Na and Brett Holman in :issue:`44340`.)"
msgstr ""

#: ../../whatsnew/3.11.rst:571
msgid ""
"libpython is no longer linked against libcrypt. (Contributed by Mike "
"Gilbert in :issue:`45433`.)"
msgstr ""

#: ../../whatsnew/3.11.rst:574
msgid ""
"Building Python now requires a C99 ``<math.h>`` header file providing the"
" following functions: ``copysign()``, ``hypot()``, ``isfinite()``, "
"``isinf()``, ``isnan()``, ``round()``. (Contributed by Victor Stinner in "
":issue:`45440`.)"
msgstr ""

#: ../../whatsnew/3.11.rst:579
msgid ""
"Freelists for object structs can now be disabled. A new "
":program:`configure` option :option:`!--without-freelists` can be used to"
" disable all freelists except empty tuple singleton. (Contributed by "
"Christian Heimes in :issue:`45522`)"
msgstr ""

#: ../../whatsnew/3.11.rst:584
msgid ""
"``Modules/Setup`` and ``Modules/makesetup`` have been improved and tied "
"up. Extension modules can now be built through ``makesetup``. All except "
"some test modules can be linked statically into main binary or library. "
"(Contributed by Brett Cannon and Christian Heimes in :issue:`45548`, "
":issue:`45570`, :issue:`45571`, and :issue:`43974`.)"
msgstr ""

#: ../../whatsnew/3.11.rst:590
msgid ""
"Build dependencies, compiler flags, and linker flags for most stdlib "
"extension modules are now detected by :program:`configure`. libffi, "
"libnsl, libsqlite3, zlib, bzip2, liblzma, libcrypt, and uuid flags are "
"detected by ``pkg-config`` (when available). (Contributed by Christian "
"Heimes and Erlend Egeberg Aasland in :issue:`bpo-45847`, :issue:`45747`, "
"and :issue:`45763`.)"
msgstr ""

#: ../../whatsnew/3.11.rst:597
msgid ""
"CPython now has experimental support for cross compiling to WebAssembly "
"platform ``wasm32-emscripten``. The effort is inspired by previous work "
"like Pyodide. (Contributed by Christian Heimes and Ethan Smith in "
":issue:`40280`.)"
msgstr ""

#: ../../whatsnew/3.11.rst:603
msgid "C API Changes"
msgstr ""

#: ../../whatsnew/3.11.rst:608
msgid ""
"Add a new :c:func:`PyType_GetName` function to get type's short name. "
"(Contributed by Hai Shi in :issue:`42035`.)"
msgstr ""

#: ../../whatsnew/3.11.rst:611
msgid ""
"Add a new :c:func:`PyType_GetQualName` function to get type's qualified "
"name. (Contributed by Hai Shi in :issue:`42035`.)"
msgstr ""

#: ../../whatsnew/3.11.rst:614
msgid ""
"Add new :c:func:`PyThreadState_EnterTracing` and "
":c:func:`PyThreadState_LeaveTracing` functions to the limited C API to "
"suspend and resume tracing and profiling. (Contributed by Victor Stinner "
"in :issue:`43760`.)"
msgstr ""

#: ../../whatsnew/3.11.rst:619
msgid ""
":c:func:`PyErr_SetExcInfo()` no longer uses the ``type`` and "
"``traceback`` arguments, the interpreter now derives those values from "
"the exception instance (the ``value`` argument). The function still "
"steals references of all three arguments. (Contributed by Irit Katriel in"
" :issue:`45711`.)"
msgstr ""

#: ../../whatsnew/3.11.rst:625
msgid ""
":c:func:`PyErr_GetExcInfo()` now derives the ``type`` and ``traceback`` "
"fields of the result from the exception instance (the ``value`` field). "
"(Contributed by Irit Katriel in :issue:`45711`.)"
msgstr ""

#: ../../whatsnew/3.11.rst:629
msgid ""
"Added the :c:data:`Py_Version` constant which bears the same value as "
":c:macro:`PY_VERSION_HEX`. (Contributed by  Gabriele N. Tornetta in "
":issue:`43931`.)"
msgstr ""

#: ../../whatsnew/3.11.rst:637
msgid ""
"The old trashcan macros "
"(``Py_TRASHCAN_SAFE_BEGIN``/``Py_TRASHCAN_SAFE_END``) are now deprecated."
" They should be replaced by the new macros ``Py_TRASHCAN_BEGIN`` and "
"``Py_TRASHCAN_END``."
msgstr ""

#: ../../whatsnew/3.11.rst:641
msgid "A tp_dealloc function that has the old macros, such as::"
msgstr ""

#: ../../whatsnew/3.11.rst:652
msgid "should migrate to the new macros as follows::"
msgstr ""

#: ../../whatsnew/3.11.rst:663
msgid ""
"Note that ``Py_TRASHCAN_BEGIN`` has a second argument which should be the"
" deallocation function it is in."
msgstr ""

#: ../../whatsnew/3.11.rst:666
msgid ""
"To support older Python versions in the same codebase, you can define the"
" following macros and use them throughout the code (credit: these were "
"copied from the ``mypy`` codebase)::"
msgstr ""

#: ../../whatsnew/3.11.rst:678
msgid ""
"The :c:func:`PyType_Ready` function now raises an error if a type is "
"defined with the :const:`Py_TPFLAGS_HAVE_GC` flag set but has no traverse"
" function (:c:member:`PyTypeObject.tp_traverse`). (Contributed by Victor "
"Stinner in :issue:`44263`.)"
msgstr ""

#: ../../whatsnew/3.11.rst:683
msgid ""
"Heap types with the :const:`Py_TPFLAGS_IMMUTABLETYPE` flag can now "
"inherit the :pep:`590` vectorcall protocol.  Previously, this was only "
"possible for :ref:`static types <static-types>`. (Contributed by Erlend "
"E. Aasland in :issue:`43908`)"
msgstr ""

#: ../../whatsnew/3.11.rst:688
msgid ""
"Since :c:func:`Py_TYPE()` is changed to a inline static function, "
"``Py_TYPE(obj) = new_type`` must be replaced with ``Py_SET_TYPE(obj, "
"new_type)``: see the :c:func:`Py_SET_TYPE()` function (available since "
"Python 3.9). For backward compatibility, this macro can be used::"
msgstr ""

#: ../../whatsnew/3.11.rst:700 ../../whatsnew/3.11.rst:714
msgid "(Contributed by Victor Stinner in :issue:`39573`.)"
msgstr ""

#: ../../whatsnew/3.11.rst:702
msgid ""
"Since :c:func:`Py_SIZE()` is changed to a inline static function, "
"``Py_SIZE(obj) = new_size`` must be replaced with ``Py_SET_SIZE(obj, "
"new_size)``: see the :c:func:`Py_SET_SIZE()` function (available since "
"Python 3.9). For backward compatibility, this macro can be used::"
msgstr ""

#: ../../whatsnew/3.11.rst:716
msgid ""
"``<Python.h>`` no longer includes the header files ``<stdlib.h>``, "
"``<stdio.h>``, ``<errno.h>`` and ``<string.h>`` when the "
"``Py_LIMITED_API`` macro is set to ``0x030b0000`` (Python 3.11) or "
"higher. C extensions should explicitly include the header files after "
"``#include <Python.h>``. (Contributed by Victor Stinner in "
":issue:`45434`.)"
msgstr ""

#: ../../whatsnew/3.11.rst:722
msgid ""
"The non-limited API files ``cellobject.h``, ``classobject.h``, "
"``context.h``, ``funcobject.h``, ``genobject.h`` and ``longintrepr.h`` "
"have been moved to the ``Include/cpython`` directory. Moreover, the "
"``eval.h`` header file was removed. These files must not be included "
"directly, as they are already included in ``Python.h``: :ref:`Include "
"Files <api-includes>`. If they have been included directly, consider "
"including ``Python.h`` instead. (Contributed by Victor Stinner in "
":issue:`35134`.)"
msgstr ""

#: ../../whatsnew/3.11.rst:730
msgid ""
"The :c:func:`PyUnicode_CHECK_INTERNED` macro has been excluded from the "
"limited C API. It was never usable there, because it used internal "
"structures which are not available in the limited C API. (Contributed by "
"Victor Stinner in :issue:`46007`.)"
msgstr ""

#: ../../whatsnew/3.11.rst:739
msgid "Deprecate the following functions to configure the Python initialization:"
msgstr ""

#: ../../whatsnew/3.11.rst:741
msgid ":c:func:`PySys_AddWarnOptionUnicode`"
msgstr ""

#: ../../whatsnew/3.11.rst:742
msgid ":c:func:`PySys_AddWarnOption`"
msgstr ""

#: ../../whatsnew/3.11.rst:743
msgid ":c:func:`PySys_AddXOption`"
msgstr ""

#: ../../whatsnew/3.11.rst:744
msgid ":c:func:`PySys_HasWarnOptions`"
msgstr ""

#: ../../whatsnew/3.11.rst:745
msgid ":c:func:`Py_SetPath`"
msgstr ""

#: ../../whatsnew/3.11.rst:746
msgid ":c:func:`Py_SetProgramName`"
msgstr ""

#: ../../whatsnew/3.11.rst:747
msgid ":c:func:`Py_SetPythonHome`"
msgstr ""

#: ../../whatsnew/3.11.rst:748
msgid ":c:func:`Py_SetStandardStreamEncoding`"
msgstr ""

#: ../../whatsnew/3.11.rst:749
msgid ":c:func:`_Py_SetProgramFullPath`"
msgstr ""

#: ../../whatsnew/3.11.rst:751
msgid ""
"Use the new :c:type:`PyConfig` API of the :ref:`Python Initialization "
"Configuration <init-config>` instead (:pep:`587`). (Contributed by Victor"
" Stinner in :issue:`44113`.)"
msgstr ""

#: ../../whatsnew/3.11.rst:758
msgid ""
":c:func:`PyFrame_BlockSetup` and :c:func:`PyFrame_BlockPop` have been "
"removed. (Contributed by Mark Shannon in :issue:`40222`.)"
msgstr ""

#: ../../whatsnew/3.11.rst:762
msgid "Remove the following math macros using the ``errno`` variable:"
msgstr ""

#: ../../whatsnew/3.11.rst:764
msgid "``Py_ADJUST_ERANGE1()``"
msgstr ""

#: ../../whatsnew/3.11.rst:765
msgid "``Py_ADJUST_ERANGE2()``"
msgstr ""

#: ../../whatsnew/3.11.rst:766
msgid "``Py_OVERFLOWED()``"
msgstr ""

#: ../../whatsnew/3.11.rst:767
msgid "``Py_SET_ERANGE_IF_OVERFLOW()``"
msgstr ""

#: ../../whatsnew/3.11.rst:768
msgid "``Py_SET_ERRNO_ON_MATH_ERROR()``"
msgstr ""

#: ../../whatsnew/3.11.rst:770
msgid "(Contributed by Victor Stinner in :issue:`45412`.)"
msgstr ""

#: ../../whatsnew/3.11.rst:772
msgid ""
"Remove ``Py_UNICODE_COPY()`` and ``Py_UNICODE_FILL()`` macros, deprecated"
" since Python 3.3. Use ``PyUnicode_CopyCharacters()`` or ``memcpy()`` "
"(``wchar_t*`` string), and ``PyUnicode_Fill()`` functions instead. "
"(Contributed by Victor Stinner in :issue:`41123`.)"
msgstr ""

#: ../../whatsnew/3.11.rst:777
msgid ""
"Remove the ``pystrhex.h`` header file. It only contains private "
"functions. C extensions should only include the main ``<Python.h>`` "
"header file. (Contributed by Victor Stinner in :issue:`45434`.)"
msgstr ""

#: ../../whatsnew/3.11.rst:781
msgid ""
"Remove the ``Py_FORCE_DOUBLE()`` macro. It was used by the "
"``Py_IS_INFINITY()`` macro. (Contributed by Victor Stinner in "
":issue:`45440`.)"
msgstr ""

#: ../../whatsnew/3.11.rst:785
msgid ""
"The following items are no longer available when "
":c:macro:`Py_LIMITED_API` is defined:"
msgstr ""

#: ../../whatsnew/3.11.rst:788
msgid ":c:func:`PyMarshal_WriteLongToFile`"
msgstr ""

#: ../../whatsnew/3.11.rst:789
msgid ":c:func:`PyMarshal_WriteObjectToFile`"
msgstr ""

#: ../../whatsnew/3.11.rst:790
msgid ":c:func:`PyMarshal_ReadObjectFromString`"
msgstr ""

#: ../../whatsnew/3.11.rst:791
msgid ":c:func:`PyMarshal_WriteObjectToString`"
msgstr ""

#: ../../whatsnew/3.11.rst:792
msgid "the ``Py_MARSHAL_VERSION`` macro"
msgstr ""

#: ../../whatsnew/3.11.rst:794
msgid "These are not part of the :ref:`limited API <stable-abi-list>`."
msgstr ""

#: ../../whatsnew/3.11.rst:796
msgid "(Contributed by Victor Stinner in :issue:`45474`.)"
msgstr ""

#: ../../whatsnew/3.11.rst:798
msgid ""
"Exclude :c:func:`PyWeakref_GET_OBJECT` from the limited C API. It never "
"worked since the :c:type:`PyWeakReference` structure is opaque in the "
"limited C API. (Contributed by Victor Stinner in :issue:`35134`.)"
msgstr ""

#~ msgid ""
#~ "Remove the ``asyncore`` and ``asynchat`` "
#~ "modules, deprecated in Python 3.6: use"
#~ " the :mod:`asyncio` module instead. "
#~ "(Contributed by Victor Stinner in "
#~ ":issue:`28533`.)"
#~ msgstr ""

#~ msgid ""
#~ "Remove the ``smtpd`` module, deprecated "
#~ "in Python 3.6: the `aiosmtpd "
#~ "<https://aiosmtpd.readthedocs.io/>`__ module can be"
#~ " used instead, it is based on "
#~ "asyncio. (Contributed by Victor Stinner "
#~ "in :issue:`28533`.)"
#~ msgstr ""

#~ msgid ""
#~ "The build dependencies for :mod:`zlib`, "
#~ ":mod:`bz2`, and :mod:`lzma` are now "
#~ "detected by :program:`configure`. (Contributed "
#~ "by Christian Heimes in :issue:`45763`.)"
#~ msgstr ""

#~ msgid ""
#~ "Build dependencies for :mod:`dbm` are "
#~ "now detected by :program:`configure`. "
#~ "``libdb`` 3.x and 4.x are no "
#~ "longer supported. (Contributed by Christian"
#~ " Heimes in :issue:`45747`.)"
#~ msgstr ""

