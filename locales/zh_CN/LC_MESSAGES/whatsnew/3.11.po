# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2021, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2021.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.11\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-04-29 14:49+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.10.1\n"

#: ../../whatsnew/3.11.rst:3
msgid "What's New In Python 3.11"
msgstr ""

#: ../../whatsnew/3.11.rst
msgid "Release"
msgstr ""

#: ../../whatsnew/3.11.rst:5
msgid "|release|"
msgstr ""

#: ../../whatsnew/3.11.rst
msgid "Date"
msgstr ""

#: ../../whatsnew/3.11.rst:6
msgid "|today|"
msgstr ""

#: ../../whatsnew/3.11.rst:48
msgid "This article explains the new features in Python 3.11, compared to 3.10."
msgstr ""

#: ../../whatsnew/3.11.rst:50
msgid "For full details, see the :ref:`changelog <changelog>`."
msgstr ""

#: ../../whatsnew/3.11.rst:54
msgid ""
"Prerelease users should be aware that this document is currently in draft"
" form. It will be updated substantially as Python 3.11 moves towards "
"release, so it's worth checking back even after reading earlier versions."
msgstr ""

#: ../../whatsnew/3.11.rst:60
msgid "Summary -- Release highlights"
msgstr ""

#: ../../whatsnew/3.11.rst:65
#, python-format
msgid ""
"Python 3.11 is up to 10-60% faster than Python 3.10. On average, we "
"measured a 1.22x speedup on the standard benchmark suite. See `Faster "
"CPython`_ for details."
msgstr ""

#: ../../whatsnew/3.11.rst:70
msgid "New syntax features:"
msgstr ""

#: ../../whatsnew/3.11.rst:72
msgid ""
":pep:`654`: Exception Groups and ``except*``. (Contributed by Irit "
"Katriel in :issue:`45292`.)"
msgstr ""

#: ../../whatsnew/3.11.rst:75
msgid "New typing features:"
msgstr ""

#: ../../whatsnew/3.11.rst:77
msgid ":pep:`646`: Variadic generics."
msgstr ""

#: ../../whatsnew/3.11.rst:78
msgid ""
":pep:`655`: Marking individual TypedDict items as required or "
"potentially-missing."
msgstr ""

#: ../../whatsnew/3.11.rst:79
msgid ":pep:`673`: ``Self`` type."
msgstr ""

#: ../../whatsnew/3.11.rst:80
msgid ":pep:`675`: Arbitrary literal string type."
msgstr ""

#: ../../whatsnew/3.11.rst:84 ../../whatsnew/3.11.rst:1332
msgid "New Features"
msgstr ""

#: ../../whatsnew/3.11.rst:89
msgid "Enhanced error locations in tracebacks"
msgstr ""

#: ../../whatsnew/3.11.rst:91
msgid ""
"When printing tracebacks, the interpreter will now point to the exact "
"expression that caused the error instead of just the line. For example:"
msgstr ""

#: ../../whatsnew/3.11.rst:105
msgid ""
"Previous versions of the interpreter would point to just the line making "
"it ambiguous which object was ``None``. These enhanced errors can also be"
" helpful when dealing with deeply nested dictionary objects and multiple "
"function calls,"
msgstr ""

#: ../../whatsnew/3.11.rst:126
msgid "as well as complex arithmetic expressions:"
msgstr ""

#: ../../whatsnew/3.11.rst:136 ../../whatsnew/3.11.rst:160
msgid ""
"See :pep:`657` for more details. (Contributed by Pablo Galindo, Batuhan "
"Taskaya and Ammar Askar in :issue:`43950`.)"
msgstr ""

#: ../../whatsnew/3.11.rst:140
msgid ""
"This feature requires storing column positions in code objects which may "
"result in a small increase of disk usage of compiled Python files or "
"interpreter memory usage. To avoid storing the extra information and/or "
"deactivate printing the extra traceback information, the :option:`-X` "
"``no_debug_ranges`` command line flag or the "
":envvar:`PYTHONNODEBUGRANGES` environment variable can be used."
msgstr ""

#: ../../whatsnew/3.11.rst:148
msgid "Column information for code objects"
msgstr ""

#: ../../whatsnew/3.11.rst:150
msgid ""
"The information used by the enhanced traceback feature is made available "
"as a general API that can be used to correlate bytecode instructions with"
" source code. This information can be retrieved using:"
msgstr ""

#: ../../whatsnew/3.11.rst:154
msgid "The :meth:`codeobject.co_positions` method in Python."
msgstr ""

#: ../../whatsnew/3.11.rst:155
msgid "The :c:func:`PyCode_Addr2Location` function in the C-API."
msgstr ""

#: ../../whatsnew/3.11.rst:157
msgid ""
"The :option:`-X` ``no_debug_ranges`` option and the environment variable "
":envvar:`PYTHONNODEBUGRANGES` can be used to disable this feature."
msgstr ""

#: ../../whatsnew/3.11.rst:164
msgid "Exceptions can be enriched with notes (PEP 678)"
msgstr ""

#: ../../whatsnew/3.11.rst:166
msgid ""
"The :meth:`add_note` method was added to :exc:`BaseException`. It can be "
"used to enrich exceptions with context information which is not available"
" at the time when the exception is raised. The notes added appear in the "
"default traceback. See :pep:`678` for more details. (Contributed by Irit "
"Katriel in :issue:`45607`.)"
msgstr ""

#: ../../whatsnew/3.11.rst:176
msgid "New Features Related to Type Hints"
msgstr ""

#: ../../whatsnew/3.11.rst:178
msgid ""
"This section covers major changes affecting :pep:`484` type hints and the"
" :mod:`typing` module."
msgstr ""

#: ../../whatsnew/3.11.rst:182
msgid "PEP 646: Variadic generics"
msgstr ""

#: ../../whatsnew/3.11.rst:184
msgid ""
":pep:`484` introduced :data:`~typing.TypeVar`, enabling creation of "
"generics parameterised with a single type. :pep:`646` introduces "
":data:`~typing.TypeVarTuple`, enabling parameterisation with an "
"*arbitrary* number of types. In other words, a "
":data:`~typing.TypeVarTuple` is a *variadic* type variable, enabling "
"*variadic* generics. This enables a wide variety of use cases. In "
"particular, it allows the type of array-like structures in numerical "
"computing libraries such as NumPy and TensorFlow to be parameterised with"
" the array *shape*. Static type checkers will now be able to catch shape-"
"related bugs in code that uses these libraries."
msgstr ""

#: ../../whatsnew/3.11.rst:195
msgid "See :pep:`646` for more details."
msgstr ""

#: ../../whatsnew/3.11.rst:197
msgid ""
"(Contributed by Matthew Rahtz in :issue:`43224`, with contributions by "
"Serhiy Storchaka and Jelle Zijlstra. PEP written by Mark Mendoza, Matthew"
" Rahtz, Pradeep Kumar Srinivasan, and Vincent Siles.)"
msgstr ""

#: ../../whatsnew/3.11.rst:202
msgid ""
"PEP 655: Marking individual ``TypedDict`` items as required or not-"
"required"
msgstr ""

#: ../../whatsnew/3.11.rst:204
msgid ""
":data:`~typing.Required` and :data:`~typing.NotRequired` provide a "
"straightforward way to mark whether individual items in a "
":data:`~typing.TypedDict` must be present. Previously this was only "
"possible using inheritance."
msgstr ""

#: ../../whatsnew/3.11.rst:209
msgid ""
"Fields are still required by default, unless the ``total=False`` "
"parameter is set. For example, the following specifies a dictionary with "
"one required and one not-required key::"
msgstr ""

#: ../../whatsnew/3.11.rst:222
msgid "The following definition is equivalent::"
msgstr ""

#: ../../whatsnew/3.11.rst:228
msgid "See :pep:`655` for more details."
msgstr ""

#: ../../whatsnew/3.11.rst:230
msgid ""
"(Contributed by David Foster and Jelle Zijlstra in :issue:`47087`. PEP "
"written by David Foster.)"
msgstr ""

#: ../../whatsnew/3.11.rst:234
msgid "PEP 673: ``Self`` type"
msgstr ""

#: ../../whatsnew/3.11.rst:236
msgid ""
"The new :data:`~typing.Self` annotation provides a simple and intuitive "
"way to annotate methods that return an instance of their class. This "
"behaves the same as the :data:`~typing.TypeVar`-based approach specified "
"in :pep:`484` but is more concise and easier to follow."
msgstr ""

#: ../../whatsnew/3.11.rst:241
msgid ""
"Common use cases include alternative constructors provided as "
"classmethods and :meth:`~object.__enter__` methods that return ``self``::"
msgstr ""

#: ../../whatsnew/3.11.rst:258
msgid ""
":data:`~typing.Self` can also be used to annotate method parameters or "
"attributes of the same type as their enclosing class."
msgstr ""

#: ../../whatsnew/3.11.rst:261
msgid "See :pep:`673` for more details."
msgstr ""

#: ../../whatsnew/3.11.rst:263
msgid ""
"(Contributed by James Hilton-Balfe in :issue:`46534`. PEP written by "
"Pradeep Kumar Srinivasan and James Hilton-Balfe.)"
msgstr ""

#: ../../whatsnew/3.11.rst:267
msgid "PEP 675: Arbitrary literal string type"
msgstr ""

#: ../../whatsnew/3.11.rst:269
msgid ""
"The new :data:`~typing.LiteralString` annotation may be used to indicate "
"that a function parameter can be of any literal string type. This allows "
"a function to accept arbitrary literal string types, as well as strings "
"created from other literal strings. Type checkers can then enforce that "
"sensitive functions, such as those that execute SQL statements or shell "
"commands, are called only with static arguments, providing protection "
"against injection attacks."
msgstr ""

#: ../../whatsnew/3.11.rst:277
msgid "For example, a SQL query function could be annotated as follows::"
msgstr ""

#: ../../whatsnew/3.11.rst:295
msgid "See :pep:`675` for more details."
msgstr ""

#: ../../whatsnew/3.11.rst:297
msgid ""
"(Contributed by Jelle Zijlstra in :issue:`47088`. PEP written by Pradeep "
"Kumar Srinivasan and Graham Bleaney.)"
msgstr ""

#: ../../whatsnew/3.11.rst:302
msgid "Other Language Changes"
msgstr ""

#: ../../whatsnew/3.11.rst:304
msgid ""
"Starred expressions can be used in :ref:`for statements<for>`. (See "
":issue:`46725` for more details.)"
msgstr ""

#: ../../whatsnew/3.11.rst:307
msgid ""
"Asynchronous comprehensions are now allowed inside comprehensions in "
"asynchronous functions. Outer comprehensions implicitly become "
"asynchronous. (Contributed by Serhiy Storchaka in :issue:`33346`.)"
msgstr ""

#: ../../whatsnew/3.11.rst:311
msgid ""
"A :exc:`TypeError` is now raised instead of an :exc:`AttributeError` in "
":meth:`contextlib.ExitStack.enter_context` and "
":meth:`contextlib.AsyncExitStack.enter_async_context` for objects which "
"do not support the :term:`context manager` or :term:`asynchronous context"
" manager` protocols correspondingly. (Contributed by Serhiy Storchaka in "
":issue:`44471`.)"
msgstr ""

#: ../../whatsnew/3.11.rst:318
msgid ""
"A :exc:`TypeError` is now raised instead of an :exc:`AttributeError` in "
":keyword:`with` and :keyword:`async with` statements for objects which do"
" not support the :term:`context manager` or :term:`asynchronous context "
"manager` protocols correspondingly. (Contributed by Serhiy Storchaka in "
":issue:`12022`.)"
msgstr ""

#: ../../whatsnew/3.11.rst:324
msgid ""
"Added :meth:`object.__getstate__` which provides the default "
"implementation of the ``__getstate__()`` method.  :mod:`Copying <copy>` "
"and :mod:`pickling <pickle>` instances of subclasses of builtin types "
":class:`bytearray`, :class:`set`, :class:`frozenset`, "
":class:`collections.OrderedDict`, :class:`collections.deque`, "
":class:`weakref.WeakSet`, and :class:`datetime.tzinfo` now copies and "
"pickles instance attributes implemented as :term:`slots <__slots__>`. "
"(Contributed by Serhiy Storchaka in :issue:`26579`.)"
msgstr ""

#: ../../whatsnew/3.11.rst:335
msgid "Other CPython Implementation Changes"
msgstr ""

#: ../../whatsnew/3.11.rst:337
msgid ""
"Special methods :meth:`complex.__complex__` and :meth:`bytes.__bytes__` "
"are implemented to support :class:`typing.SupportsComplex` and "
":class:`typing.SupportsBytes` protocols. (Contributed by Mark Dickinson "
"and Dong-hee Na in :issue:`24234`.)"
msgstr ""

#: ../../whatsnew/3.11.rst:341
msgid ""
"``siphash13`` is added as a new internal hashing algorithms. It has "
"similar security properties as ``siphash24`` but it is slightly faster "
"for long inputs. ``str``, ``bytes``, and some other types now use it as "
"default algorithm for :func:`hash`. :pep:`552` hash-based pyc files now "
"use ``siphash13``, too. (Contributed by Inada Naoki in :issue:`29410`.)"
msgstr ""

#: ../../whatsnew/3.11.rst:347
msgid ""
"When an active exception is re-raised by a :keyword:`raise` statement "
"with no parameters, the traceback attached to this exception is now "
"always ``sys.exc_info()[1].__traceback__``. This means that changes made "
"to the traceback in the current :keyword:`except` clause are reflected in"
" the re-raised exception. (Contributed by Irit Katriel in "
":issue:`45711`.)"
msgstr ""

#: ../../whatsnew/3.11.rst:353
msgid ""
"The interpreter state's representation of handled exceptions (a.k.a "
"exc_info, or _PyErr_StackItem) now has only the ``exc_value`` field, "
"``exc_type`` and ``exc_traceback`` have been removed as their values can "
"be derived from ``exc_value``. (Contributed by Irit Katriel in "
":issue:`45711`.)"
msgstr ""

#: ../../whatsnew/3.11.rst:358
msgid ""
"A new command line option for the Windows installer ``AppendPath`` has "
"been added. It behaves similiar to ``PrependPath`` but appends the "
"install and scripts directories instead of prepending them. (Contributed "
"by Bastian Neuburger in :issue:`44934`.)"
msgstr ""

#: ../../whatsnew/3.11.rst:365
msgid "New Modules"
msgstr ""

#: ../../whatsnew/3.11.rst:367
msgid ""
"A new module, :mod:`tomllib`, was added for parsing TOML. (Contributed by"
" Taneli Hukkinen in :issue:`40059`.)"
msgstr ""

#: ../../whatsnew/3.11.rst:370
msgid ""
":mod:`wsgiref.types`, containing WSGI-specific types for static type "
"checking, was added. (Contributed by Sebastian Rittau in :issue:`42012`.)"
msgstr ""

#: ../../whatsnew/3.11.rst:376
msgid "Improved Modules"
msgstr ""

#: ../../whatsnew/3.11.rst:379
msgid "asyncio"
msgstr ""

#: ../../whatsnew/3.11.rst:381
msgid ""
"Add raw datagram socket functions to the event loop: "
":meth:`~asyncio.AbstractEventLoop.sock_sendto`, "
":meth:`~asyncio.AbstractEventLoop.sock_recvfrom` and "
":meth:`~asyncio.AbstractEventLoop.sock_recvfrom_into`. (Contributed by "
"Alex Grönholm in :issue:`46805`.)"
msgstr ""

#: ../../whatsnew/3.11.rst:387
msgid ""
"Add :meth:`~asyncio.streams.StreamWriter.start_tls` method for upgrading "
"existing stream-based connections to TLS. (Contributed by Ian Good in "
":issue:`34975`.)"
msgstr ""

#: ../../whatsnew/3.11.rst:392
msgid "fractions"
msgstr ""

#: ../../whatsnew/3.11.rst:394
msgid ""
"Support :PEP:`515`-style initialization of :class:`~fractions.Fraction` "
"from string.  (Contributed by Sergey B Kirpichev in :issue:`44258`.)"
msgstr ""

#: ../../whatsnew/3.11.rst:397
msgid ""
":class:`~fractions.Fraction` now implements an ``__int__`` method, so "
"that an ``isinstance(some_fraction, typing.SupportsInt)`` check passes. "
"(Contributed by Mark Dickinson in :issue:`44547`.)"
msgstr ""

#: ../../whatsnew/3.11.rst:402
msgid "functools"
msgstr ""

#: ../../whatsnew/3.11.rst:404
msgid ""
":func:`functools.singledispatch` now supports :data:`types.UnionType` and"
" :data:`typing.Union` as annotations to the dispatch argument.::"
msgstr ""

#: ../../whatsnew/3.11.rst:429
msgid "(Contributed by Yurii Karabas in :issue:`46014`.)"
msgstr ""

#: ../../whatsnew/3.11.rst:432
msgid "hashlib"
msgstr ""

#: ../../whatsnew/3.11.rst:434
msgid ""
":func:`hashlib.blake2b` and :func:`hashlib.blake2s` now prefer `libb2`_ "
"over Python's vendored copy. (Contributed by Christian Heimes in "
":issue:`47095`.)"
msgstr ""

#: ../../whatsnew/3.11.rst:438
msgid ""
"The internal ``_sha3`` module with SHA3 and SHAKE algorithms now uses "
"*tiny_sha3* instead of the *Keccak Code Package* to reduce code and "
"binary size. The :mod:`hashlib` module prefers optimized SHA3 and SHAKE "
"implementations from OpenSSL. The change affects only installations "
"without OpenSSL support. (Contributed by Christian Heimes in "
":issue:`47098`.)"
msgstr ""

#: ../../whatsnew/3.11.rst:446
msgid "IDLE and idlelib"
msgstr ""

#: ../../whatsnew/3.11.rst:448
msgid ""
"Apply syntax highlighting to `.pyi` files. (Contributed by Alex Waygood "
"and Terry Jan Reedy in :issue:`45447`.)"
msgstr ""

#: ../../whatsnew/3.11.rst:452
msgid "inspect"
msgstr ""

#: ../../whatsnew/3.11.rst:453
msgid ""
"Add :func:`inspect.getmembers_static`: return all members without "
"triggering dynamic lookup via the descriptor protocol. (Contributed by "
"Weipeng Hong in :issue:`30533`.)"
msgstr ""

#: ../../whatsnew/3.11.rst:457
msgid ""
"Add :func:`inspect.ismethodwrapper` for checking if the type of an object"
" is a :class:`~types.MethodWrapperType`. (Contributed by Hakan Çelik in "
":issue:`29418`.)"
msgstr ""

#: ../../whatsnew/3.11.rst:460
msgid ""
"Change the frame-related functions in the :mod:`inspect` module to return"
" a regular object (that is backwards compatible with the old tuple-like "
"interface) that include the extended :pep:`657` position information (end"
" line number, column and end column). The affected functions are: "
":func:`inspect.getframeinfo`, :func:`inspect.getouterframes`, "
":func:`inspect.getinnerframes`, :func:`inspect.stack` and "
":func:`inspect.trace`. (Contributed by Pablo Galindo in :gh:`88116`)"
msgstr ""

#: ../../whatsnew/3.11.rst:469
msgid "locale"
msgstr ""

#: ../../whatsnew/3.11.rst:471
msgid ""
"Add :func:`locale.getencoding` to get the current locale encoding. It is "
"similar to ``locale.getpreferredencoding(False)`` but ignores the "
":ref:`Python UTF-8 Mode <utf8-mode>`."
msgstr ""

#: ../../whatsnew/3.11.rst:476
msgid "math"
msgstr ""

#: ../../whatsnew/3.11.rst:478
msgid ""
"Add :func:`math.exp2`: return 2 raised to the power of x. (Contributed by"
" Gideon Mitchell in :issue:`45917`.)"
msgstr ""

#: ../../whatsnew/3.11.rst:481
msgid ""
"Add :func:`math.cbrt`: return the cube root of x. (Contributed by Ajith "
"Ramachandran in :issue:`44357`.)"
msgstr ""

#: ../../whatsnew/3.11.rst:484
msgid ""
"The behaviour of two :func:`math.pow` corner cases was changed, for "
"consistency with the IEEE 754 specification. The operations "
"``math.pow(0.0, -math.inf)`` and ``math.pow(-0.0, -math.inf)`` now return"
" ``inf``. Previously they raised :exc:`ValueError`. (Contributed by Mark "
"Dickinson in :issue:`44339`.)"
msgstr ""

#: ../../whatsnew/3.11.rst:490
msgid ""
"The :data:`math.nan` value is now always available. (Contributed by "
"Victor Stinner in :issue:`46917`.)"
msgstr ""

#: ../../whatsnew/3.11.rst:495
msgid "operator"
msgstr ""

#: ../../whatsnew/3.11.rst:497
msgid ""
"A new function ``operator.call`` has been added, such that "
"``operator.call(obj, *args, **kwargs) == obj(*args, **kwargs)``. "
"(Contributed by Antony Lee in :issue:`44019`.)"
msgstr ""

#: ../../whatsnew/3.11.rst:503
msgid "os"
msgstr ""

#: ../../whatsnew/3.11.rst:505
msgid ""
"On Windows, :func:`os.urandom` now uses ``BCryptGenRandom()``, instead of"
" ``CryptGenRandom()`` which is deprecated. (Contributed by Dong-hee Na in"
" :issue:`44611`.)"
msgstr ""

#: ../../whatsnew/3.11.rst:511
msgid "pathlib"
msgstr ""

#: ../../whatsnew/3.11.rst:513
msgid ""
":meth:`~pathlib.Path.glob` and :meth:`~pathlib.Path.rglob` return only "
"directories if *pattern* ends with a pathname components separator: "
":data:`~os.sep` or :data:`~os.altsep`. (Contributed by Eisuke Kawasima in"
" :issue:`22276` and :issue:`33392`.)"
msgstr ""

#: ../../whatsnew/3.11.rst:519
msgid "re"
msgstr ""

#: ../../whatsnew/3.11.rst:521
msgid ""
"Atomic grouping (``(?>...)``) and possessive quantifiers (``*+``, ``++``,"
" ``?+``, ``{m,n}+``) are now supported in regular expressions. "
"(Contributed by Jeffrey C. Jacobs and Serhiy Storchaka in "
":issue:`433030`.)"
msgstr ""

#: ../../whatsnew/3.11.rst:526
msgid "shutil"
msgstr ""

#: ../../whatsnew/3.11.rst:528
msgid ""
"Add optional parameter *dir_fd* in :func:`shutil.rmtree`. (Contributed by"
" Serhiy Storchaka in :issue:`46245`.)"
msgstr ""

#: ../../whatsnew/3.11.rst:533
msgid "socket"
msgstr ""

#: ../../whatsnew/3.11.rst:535
msgid ""
"Add CAN Socket support for NetBSD. (Contributed by Thomas Klausner in "
":issue:`30512`.)"
msgstr ""

#: ../../whatsnew/3.11.rst:538
msgid ""
":meth:`~socket.create_connection` has an option to raise, in case of "
"failure to connect, an :exc:`ExceptionGroup` containing all errors "
"instead of only raising the last error. (Contributed by Irit Katriel in "
":issue:`29980`)."
msgstr ""

#: ../../whatsnew/3.11.rst:544
msgid "sqlite3"
msgstr ""

#: ../../whatsnew/3.11.rst:546
msgid ""
"You can now disable the authorizer by passing :const:`None` to "
":meth:`~sqlite3.Connection.set_authorizer`. (Contributed by Erlend E. "
"Aasland in :issue:`44491`.)"
msgstr ""

#: ../../whatsnew/3.11.rst:550
msgid ""
"Collation name :meth:`~sqlite3.Connection.create_collation` can now "
"contain any Unicode character.  Collation names with invalid characters "
"now raise :exc:`UnicodeEncodeError` instead of "
":exc:`sqlite3.ProgrammingError`. (Contributed by Erlend E. Aasland in "
":issue:`44688`.)"
msgstr ""

#: ../../whatsnew/3.11.rst:555
msgid ""
":mod:`sqlite3` exceptions now include the SQLite extended error code as "
":attr:`~sqlite3.Error.sqlite_errorcode` and the SQLite error name as "
":attr:`~sqlite3.Error.sqlite_errorname`. (Contributed by Aviv Palivoda, "
"Daniel Shahaf, and Erlend E. Aasland in :issue:`16379` and "
":issue:`24139`.)"
msgstr ""

#: ../../whatsnew/3.11.rst:561
msgid ""
"Add :meth:`~sqlite3.Connection.setlimit` and "
":meth:`~sqlite3.Connection.getlimit` to :class:`sqlite3.Connection` for "
"setting and getting SQLite limits by connection basis. (Contributed by "
"Erlend E. Aasland in :issue:`45243`.)"
msgstr ""

#: ../../whatsnew/3.11.rst:566
msgid ""
":mod:`sqlite3` now sets :attr:`sqlite3.threadsafety` based on the default"
" threading mode the underlying SQLite library has been compiled with. "
"(Contributed by Erlend E. Aasland in :issue:`45613`.)"
msgstr ""

#: ../../whatsnew/3.11.rst:570
msgid ""
":mod:`sqlite3` C callbacks now use unraisable exceptions if callback "
"tracebacks are enabled. Users can now register an :func:`unraisable hook "
"handler <sys.unraisablehook>` to improve their debug experience. "
"(Contributed by Erlend E. Aasland in :issue:`45828`.)"
msgstr ""

#: ../../whatsnew/3.11.rst:576
msgid ""
"Fetch across rollback no longer raises :exc:`~sqlite3.InterfaceError`. "
"Instead we leave it to the SQLite library to handle these cases. "
"(Contributed by Erlend E. Aasland in :issue:`44092`.)"
msgstr ""

#: ../../whatsnew/3.11.rst:580
msgid ""
"Add :meth:`~sqlite3.Connection.serialize` and "
":meth:`~sqlite3.Connection.deserialize` to :class:`sqlite3.Connection` "
"for serializing and deserializing databases. (Contributed by Erlend E. "
"Aasland in :issue:`41930`.)"
msgstr ""

#: ../../whatsnew/3.11.rst:585
msgid ""
"Add :meth:`~sqlite3.Connection.create_window_function` to "
":class:`sqlite3.Connection` for creating aggregate window functions. "
"(Contributed by Erlend E. Aasland in :issue:`34916`.)"
msgstr ""

#: ../../whatsnew/3.11.rst:589
msgid ""
"Add :meth:`~sqlite3.Connection.blobopen` to :class:`sqlite3.Connection`. "
":class:`sqlite3.Blob` allows incremental I/O operations on blobs. "
"(Contributed by Aviv Palivoda and Erlend E. Aasland in :issue:`24905`)"
msgstr ""

#: ../../whatsnew/3.11.rst:595
msgid "sys"
msgstr ""

#: ../../whatsnew/3.11.rst:597
msgid ""
":func:`sys.exc_info` now derives the ``type`` and ``traceback`` fields "
"from the ``value`` (the exception instance), so when an exception is "
"modified while it is being handled, the changes are reflected in the "
"results of subsequent calls to :func:`exc_info`. (Contributed by Irit "
"Katriel in :issue:`45711`.)"
msgstr ""

#: ../../whatsnew/3.11.rst:603
msgid ""
"Add :func:`sys.exception` which returns the active exception instance "
"(equivalent to ``sys.exc_info()[1]``). (Contributed by Irit Katriel in "
":issue:`46328`.)"
msgstr ""

#: ../../whatsnew/3.11.rst:609
msgid "sysconfig"
msgstr ""

#: ../../whatsnew/3.11.rst:611
msgid ""
"Two new :ref:`installation schemes <installation_paths>` (*posix_venv*, "
"*nt_venv* and *venv*) were added and are used when Python creates new "
"virtual environments or when it is running from a virtual environment. "
"The first two schemes (*posix_venv* and *nt_venv*) are OS-specific for "
"non-Windows and Windows, the *venv* is essentially an alias to one of "
"them according to the OS Python runs on. This is useful for downstream "
"distributors who modify :func:`sysconfig.get_preferred_scheme`. Third "
"party code that creates new virtual environments should use the new "
"*venv* installation scheme to determine the paths, as does :mod:`venv`. "
"(Contributed by Miro Hrončok in :issue:`45413`.)"
msgstr ""

#: ../../whatsnew/3.11.rst:626
msgid "threading"
msgstr ""

#: ../../whatsnew/3.11.rst:628
msgid ""
"On Unix, if the ``sem_clockwait()`` function is available in the C "
"library (glibc 2.30 and newer), the :meth:`threading.Lock.acquire` method"
" now uses the monotonic clock (:data:`time.CLOCK_MONOTONIC`) for the "
"timeout, rather than using the system clock "
"(:data:`time.CLOCK_REALTIME`), to not be affected by system clock "
"changes. (Contributed by Victor Stinner in :issue:`41710`.)"
msgstr ""

#: ../../whatsnew/3.11.rst:637
msgid "time"
msgstr ""

#: ../../whatsnew/3.11.rst:639
msgid ""
"On Unix, :func:`time.sleep` now uses the ``clock_nanosleep()`` or "
"``nanosleep()`` function, if available, which has a resolution of 1 "
"nanosecond (10\\ :sup:`-9` seconds), rather than using ``select()`` which"
" has a resolution of 1 microsecond (10\\ :sup:`-6` seconds). (Contributed"
" by Benjamin Szőke and Victor Stinner in :issue:`21302`.)"
msgstr ""

#: ../../whatsnew/3.11.rst:645
msgid ""
"On Windows 8.1 and newer, :func:`time.sleep` now uses a waitable timer "
"based on `high-resolution timers <https://docs.microsoft.com/en-us"
"/windows-hardware/drivers/kernel/high-resolution-timers>`_ which has a "
"resolution of 100 nanoseconds (10\\ :sup:`-7` seconds). Previously, it "
"had a resolution of 1 millisecond (10\\ :sup:`-3` seconds). (Contributed "
"by Benjamin Szőke, Dong-hee Na, Eryk Sun and Victor Stinner in "
":issue:`21302` and :issue:`45429`.)"
msgstr ""

#: ../../whatsnew/3.11.rst:654
msgid "unicodedata"
msgstr ""

#: ../../whatsnew/3.11.rst:656
msgid "The Unicode database has been updated to version 14.0.0. (:issue:`45190`)."
msgstr ""

#: ../../whatsnew/3.11.rst:660
msgid "venv"
msgstr ""

#: ../../whatsnew/3.11.rst:662
msgid ""
"When new Python virtual environments are created, the *venv* "
":ref:`sysconfig installation scheme <installation_paths>` is used to "
"determine the paths inside the environment. When Python runs in a virtual"
" environment, the same installation scheme is the default. That means "
"that downstream distributors can change the default sysconfig install "
"scheme without changing behavior of virtual environments. Third party "
"code that also creates new virtual environments should do the same. "
"(Contributed by Miro Hrončok in :issue:`45413`.)"
msgstr ""

#: ../../whatsnew/3.11.rst:673
msgid "warnings"
msgstr ""

#: ../../whatsnew/3.11.rst:675
msgid ""
":func:`warnings.catch_warnings` now accepts arguments for "
":func:`warnings.simplefilter`, providing a more concise way to locally "
"ignore warnings or convert them to errors. (Contributed by Zac Hatfield-"
"Dodds in :issue:`47074`.)"
msgstr ""

#: ../../whatsnew/3.11.rst:680
msgid "zipfile"
msgstr ""

#: ../../whatsnew/3.11.rst:682
msgid ""
"Added support for specifying member name encoding for reading metadata in"
" the zipfile's directory and file headers. (Contributed by Stephen J. "
"Turnbull and Serhiy Storchaka in :issue:`28080`.)"
msgstr ""

#: ../../whatsnew/3.11.rst:687
msgid "fcntl"
msgstr ""

#: ../../whatsnew/3.11.rst:689
msgid ""
"On FreeBSD, the :attr:`F_DUP2FD` and :attr:`F_DUP2FD_CLOEXEC` flags "
"respectively are supported, the former equals to ``dup2`` usage while the"
" latter set the ``FD_CLOEXEC`` flag in addition."
msgstr ""

#: ../../whatsnew/3.11.rst:695
msgid "Optimizations"
msgstr ""

#: ../../whatsnew/3.11.rst:697
#, python-format
msgid ""
"Compiler now optimizes simple C-style formatting with literal format "
"containing only format codes ``%s``, ``%r`` and ``%a`` and makes it as "
"fast as corresponding f-string expression. (Contributed by Serhiy "
"Storchaka in :issue:`28307`.)"
msgstr ""

#: ../../whatsnew/3.11.rst:702
msgid ""
"\"Zero-cost\" exceptions are implemented. The cost of ``try`` statements "
"is almost eliminated when no exception is raised. (Contributed by Mark "
"Shannon in :issue:`40222`.)"
msgstr ""

#: ../../whatsnew/3.11.rst:706
msgid ""
"Pure ASCII strings are now normalized in constant time by "
":func:`unicodedata.normalize`. (Contributed by Dong-hee Na in "
":issue:`44987`.)"
msgstr ""

#: ../../whatsnew/3.11.rst:709
msgid ""
":mod:`math` functions :func:`~math.comb` and :func:`~math.perm` are now "
"up to 10 times or more faster for large arguments (the speed up is larger"
" for larger *k*). (Contributed by Serhiy Storchaka in :issue:`37295`.)"
msgstr ""

#: ../../whatsnew/3.11.rst:714
msgid ""
"Dict don't store hash value when all inserted keys are Unicode objects. "
"This reduces dict size. For example, "
"``sys.getsizeof(dict.fromkeys(\"abcdefg\"))`` becomes 272 bytes from 352 "
"bytes on 64bit platform. (Contributed by Inada Naoki in :issue:`46845`.)"
msgstr ""

#: ../../whatsnew/3.11.rst:719
#, python-format
msgid ""
":mod:`re`'s regular expression matching engine has been partially "
"refactored, and now uses computed gotos (or \"threaded code\") on "
"supported platforms. As a result, Python 3.11 executes the `pyperformance"
" regular expression benchmarks "
"<https://pyperformance.readthedocs.io/benchmarks.html#regex-dna>`_ up to "
"10% faster than Python 3.10."
msgstr ""

#: ../../whatsnew/3.11.rst:727
msgid "Faster CPython"
msgstr ""

#: ../../whatsnew/3.11.rst:729
#, python-format
msgid ""
"CPython 3.11 is on average `1.22x faster <https://github.com/faster-"
"cpython/ideas/blob/main/main-vs-310.rst>`_ than CPython 3.10 when "
"measured with the `pyperformance "
"<https://github.com/python/pyperformance>`_ benchmark suite, and compiled"
" with GCC on Ubuntu Linux. Depending on your workload, the speedup could "
"be up to 10-60% faster."
msgstr ""

#: ../../whatsnew/3.11.rst:735
msgid ""
"This project focuses on two major areas in Python: faster startup and "
"faster runtime. Other optimizations not under this project are listed in "
"`Optimizations`_."
msgstr ""

#: ../../whatsnew/3.11.rst:739
msgid "Faster Startup"
msgstr ""

#: ../../whatsnew/3.11.rst:742
msgid "Frozen imports / Static code objects"
msgstr ""

#: ../../whatsnew/3.11.rst:744
msgid ""
"Python caches bytecode in the :ref:`__pycache__<tut-pycache>` directory "
"to speed up module loading."
msgstr ""

#: ../../whatsnew/3.11.rst:747
msgid "Previously in 3.10, Python module execution looked like this:"
msgstr ""

#: ../../whatsnew/3.11.rst:753
msgid ""
"In Python 3.11, the core modules essential for Python startup are "
"\"frozen\". This means that their code objects (and bytecode) are "
"statically allocated by the interpreter. This reduces the steps in module"
" execution process to this:"
msgstr ""

#: ../../whatsnew/3.11.rst:761
#, python-format
msgid ""
"Interpreter startup is now 10-15% faster in Python 3.11. This has a big "
"impact for short-running programs using Python."
msgstr ""

#: ../../whatsnew/3.11.rst:764
msgid ""
"(Contributed by Eric Snow, Guido van Rossum and Kumar Aditya in numerous "
"issues.)"
msgstr ""

#: ../../whatsnew/3.11.rst:768
msgid "Faster Runtime"
msgstr ""

#: ../../whatsnew/3.11.rst:771
msgid "Cheaper, lazy Python frames"
msgstr ""

#: ../../whatsnew/3.11.rst:772
msgid ""
"Python frames are created whenever Python calls a Python function. This "
"frame holds execution information. The following are new frame "
"optimizations:"
msgstr ""

#: ../../whatsnew/3.11.rst:775
msgid "Streamlined the frame creation process."
msgstr ""

#: ../../whatsnew/3.11.rst:776
msgid ""
"Avoided memory allocation by generously re-using frame space on the C "
"stack."
msgstr ""

#: ../../whatsnew/3.11.rst:777
msgid ""
"Streamlined the internal frame struct to contain only essential "
"information. Frames previously held extra debugging and memory management"
" information."
msgstr ""

#: ../../whatsnew/3.11.rst:780
#, python-format
msgid ""
"Old-style frame objects are now created only when required by debuggers. "
"For most user code, no frame objects are created at all. As a result, "
"nearly all Python functions calls have sped up significantly. We measured"
" a 3-7% speedup in pyperformance."
msgstr ""

#: ../../whatsnew/3.11.rst:785
msgid "(Contributed by Mark Shannon in :issue:`44590`.)"
msgstr ""

#: ../../whatsnew/3.11.rst:790
msgid "Inlined Python function calls"
msgstr ""

#: ../../whatsnew/3.11.rst:791
msgid ""
"During a Python function call, Python will call an evaluating C function "
"to interpret that function's code. This effectively limits pure Python "
"recursion to what's safe for the C stack."
msgstr ""

#: ../../whatsnew/3.11.rst:795
msgid ""
"In 3.11, when CPython detects Python code calling another Python "
"function, it sets up a new frame, and \"jumps\" to the new code inside "
"the new frame. This avoids calling the C interpreting function "
"altogether."
msgstr ""

#: ../../whatsnew/3.11.rst:799
#, python-format
msgid ""
"Most Python function calls now consume no C stack space. This speeds up "
"most of such calls. In simple recursive functions like fibonacci or "
"factorial, a 1.7x speedup was observed. This also means recursive "
"functions can recurse significantly deeper (if the user increases the "
"recursion limit). We measured a 1-3% improvement in pyperformance."
msgstr ""

#: ../../whatsnew/3.11.rst:805
msgid "(Contributed by Pablo Galindo and Mark Shannon in :issue:`45256`.)"
msgstr ""

#: ../../whatsnew/3.11.rst:808
msgid "PEP 659: Specializing Adaptive Interpreter"
msgstr ""

#: ../../whatsnew/3.11.rst:809
msgid ""
":pep:`659` is one of the key parts of the faster CPython project. The "
"general idea is that while Python is a dynamic language, most code has "
"regions where objects and types rarely change. This concept is known as "
"*type stability*."
msgstr ""

#: ../../whatsnew/3.11.rst:813
msgid ""
"At runtime, Python will try to look for common patterns and type "
"stability in the executing code. Python will then replace the current "
"operation with a more specialized one. This specialized operation uses "
"fast paths available only to those use cases/types, which generally "
"outperform their generic counterparts. This also brings in another "
"concept called *inline caching*, where Python caches the results of "
"expensive operations directly in the bytecode."
msgstr ""

#: ../../whatsnew/3.11.rst:820
msgid ""
"The specializer will also combine certain common instruction pairs into "
"one superinstruction. This reduces the overhead during execution."
msgstr ""

#: ../../whatsnew/3.11.rst:823
msgid ""
"Python will only specialize when it sees code that is \"hot\" (executed "
"multiple times). This prevents Python from wasting time for run-once "
"code. Python can also de-specialize when code is too dynamic or when the "
"use changes. Specialization is attempted periodically, and specialization"
" attempts are not too expensive. This allows specialization to adapt to "
"new circumstances."
msgstr ""

#: ../../whatsnew/3.11.rst:830
msgid ""
"(PEP written by Mark Shannon, with ideas inspired by Stefan Brunthaler. "
"See :pep:`659` for more information.)"
msgstr ""

#: ../../whatsnew/3.11.rst:837
msgid "Operation"
msgstr ""

#: ../../whatsnew/3.11.rst:837
msgid "Form"
msgstr ""

#: ../../whatsnew/3.11.rst:837
msgid "Specialization"
msgstr ""

#: ../../whatsnew/3.11.rst:837
msgid "Operation speedup (up to)"
msgstr ""

#: ../../whatsnew/3.11.rst:837
msgid "Contributor(s)"
msgstr ""

#: ../../whatsnew/3.11.rst:840
msgid "Binary operations"
msgstr ""

#: ../../whatsnew/3.11.rst:840
msgid "``x+x; x*x; x-x;``"
msgstr ""

#: ../../whatsnew/3.11.rst:840
msgid ""
"Binary add, multiply and subtract for common types such as ``int``, "
"``float``, and ``str`` take custom fast paths for their underlying types."
msgstr ""

#: ../../whatsnew/3.11.rst:840
msgid "10%"
msgstr ""

#: ../../whatsnew/3.11.rst:840
msgid "Mark Shannon, Dong-hee Na, Brandt Bucher, Dennis Sweeney"
msgstr ""

#: ../../whatsnew/3.11.rst:845
msgid "Subscript"
msgstr ""

#: ../../whatsnew/3.11.rst:845
msgid "``a[i]``"
msgstr ""

#: ../../whatsnew/3.11.rst:845
msgid ""
"Subscripting container types such as ``list``, ``tuple`` and ``dict`` "
"directly index the underlying data structures."
msgstr ""

#: ../../whatsnew/3.11.rst:849
msgid ""
"Subscripting custom ``__getitem__`` is also inlined similar to :ref"
":`inline-calls`."
msgstr ""

#: ../../whatsnew/3.11.rst:845 ../../whatsnew/3.11.rst:852
msgid "10-25%"
msgstr ""

#: ../../whatsnew/3.11.rst:845
msgid "Irit Katriel, Mark Shannon"
msgstr ""

#: ../../whatsnew/3.11.rst:852
msgid "Store subscript"
msgstr ""

#: ../../whatsnew/3.11.rst:852
msgid "``a[i] = z``"
msgstr ""

#: ../../whatsnew/3.11.rst:852
msgid "Similar to subscripting specialization above."
msgstr ""

#: ../../whatsnew/3.11.rst:852
msgid "Dennis Sweeney"
msgstr ""

#: ../../whatsnew/3.11.rst:855
msgid "Calls"
msgstr ""

#: ../../whatsnew/3.11.rst:855
msgid "``f(arg)`` ``C(arg)``"
msgstr ""

#: ../../whatsnew/3.11.rst:855
msgid ""
"Calls to common builtin (C) functions and types such as ``len`` and "
"``str`` directly call their underlying C version. This avoids going "
"through the internal calling convention."
msgstr ""

#: ../../whatsnew/3.11.rst:855
msgid "20%"
msgstr ""

#: ../../whatsnew/3.11.rst:855
msgid "Mark Shannon, Ken Jin"
msgstr ""

#: ../../whatsnew/3.11.rst:861
msgid "Load global variable"
msgstr ""

#: ../../whatsnew/3.11.rst:861
msgid "``print`` ``len``"
msgstr ""

#: ../../whatsnew/3.11.rst:861
msgid ""
"The object's index in the globals/builtins namespace is cached. Loading "
"globals and builtins require zero namespace lookups."
msgstr ""

#: ../../whatsnew/3.11.rst:861
msgid "[1]_"
msgstr ""

#: ../../whatsnew/3.11.rst:861 ../../whatsnew/3.11.rst:865
#: ../../whatsnew/3.11.rst:874
msgid "Mark Shannon"
msgstr ""

#: ../../whatsnew/3.11.rst:865
msgid "Load attribute"
msgstr ""

#: ../../whatsnew/3.11.rst:865
msgid "``o.attr``"
msgstr ""

#: ../../whatsnew/3.11.rst:865
msgid ""
"Similar to loading global variables. The attribute's index inside the "
"class/object's namespace is cached. In most cases, attribute loading will"
" require zero namespace lookups."
msgstr ""

#: ../../whatsnew/3.11.rst:865
msgid "[2]_"
msgstr ""

#: ../../whatsnew/3.11.rst:870
msgid "Load methods for call"
msgstr ""

#: ../../whatsnew/3.11.rst:870
msgid "``o.meth()``"
msgstr ""

#: ../../whatsnew/3.11.rst:870
msgid ""
"The actual address of the method is cached. Method loading now has no "
"namespace lookups -- even for classes with long inheritance chains."
msgstr ""

#: ../../whatsnew/3.11.rst:870
msgid "10-20%"
msgstr ""

#: ../../whatsnew/3.11.rst:870
msgid "Ken Jin, Mark Shannon"
msgstr ""

#: ../../whatsnew/3.11.rst:874
msgid "Store attribute"
msgstr ""

#: ../../whatsnew/3.11.rst:874
msgid "``o.attr = z``"
msgstr ""

#: ../../whatsnew/3.11.rst:874
msgid "Similar to load attribute optimization."
msgstr ""

#: ../../whatsnew/3.11.rst:874
#, python-format
msgid "2% in pyperformance"
msgstr ""

#: ../../whatsnew/3.11.rst:877
msgid "Unpack Sequence"
msgstr ""

#: ../../whatsnew/3.11.rst:877
msgid "``*seq``"
msgstr ""

#: ../../whatsnew/3.11.rst:877
msgid ""
"Specialized for common containers such as ``list`` and ``tuple``. Avoids "
"internal calling convention."
msgstr ""

#: ../../whatsnew/3.11.rst:877
msgid "8%"
msgstr ""

#: ../../whatsnew/3.11.rst:877
msgid "Brandt Bucher"
msgstr ""

#: ../../whatsnew/3.11.rst:881
msgid ""
"A similar optimization already existed since Python 3.8.  3.11 "
"specializes for more forms and reduces some overhead."
msgstr ""

#: ../../whatsnew/3.11.rst:884
msgid ""
"A similar optimization already existed since Python 3.10. 3.11 "
"specializes for more forms. Furthermore, all attribute loads should be "
"sped up by :issue:`45947`."
msgstr ""

#: ../../whatsnew/3.11.rst:890
msgid "Misc"
msgstr ""

#: ../../whatsnew/3.11.rst:892
msgid ""
"Objects now require less memory due to lazily created object namespaces. "
"Their namespace dictionaries now also share keys more freely. "
"(Contributed Mark Shannon in :issue:`45340` and :issue:`40116`.)"
msgstr ""

#: ../../whatsnew/3.11.rst:896
msgid ""
"A more concise representation of exceptions in the interpreter reduced "
"the time required for catching an exception by about 10%. (Contributed by"
" Irit Katriel in :issue:`45711`.)"
msgstr ""

#: ../../whatsnew/3.11.rst:901
msgid "FAQ"
msgstr ""

#: ../../whatsnew/3.11.rst:903
msgid "Q: How should I write my code to utilize these speedups?"
msgstr ""

#: ../../whatsnew/3.11.rst:907
msgid ""
"A: You don't have to change your code. Write Pythonic code that follows "
"common best practices. The Faster CPython project optimizes for common "
"code patterns we observe."
msgstr ""

#: ../../whatsnew/3.11.rst:910
msgid "Q: Will CPython 3.11 use more memory?"
msgstr ""

#: ../../whatsnew/3.11.rst:914
msgid ""
"A: Maybe not. We don't expect memory use to exceed 20% more than 3.10. "
"This is offset by memory optimizations for frame objects and object "
"dictionaries as mentioned above."
msgstr ""

#: ../../whatsnew/3.11.rst:917
msgid "Q: I don't see any speedups in my workload. Why?"
msgstr ""

#: ../../whatsnew/3.11.rst:922
msgid ""
"A: Certain code won't have noticeable benefits. If your code spends most "
"of its time on I/O operations, or already does most of its computation in"
" a C extension library like numpy, there won't be significant speedup. "
"This project currently benefits pure-Python workloads the most."
msgstr ""

#: ../../whatsnew/3.11.rst:926
msgid ""
"Furthermore, the pyperformance figures are a geometric mean. Even within "
"the pyperformance benchmarks, certain benchmarks have slowed down "
"slightly, while others have sped up by nearly 2x!"
msgstr ""

#: ../../whatsnew/3.11.rst:929
msgid "Q: Is there a JIT compiler?"
msgstr ""

#: ../../whatsnew/3.11.rst:931
msgid "A: No. We're still exploring other optimizations."
msgstr ""

#: ../../whatsnew/3.11.rst:935
msgid "About"
msgstr ""

#: ../../whatsnew/3.11.rst:937
msgid ""
"Faster CPython explores optimizations for :term:`CPython`. The main team "
"is funded by Microsoft to work on this full-time. Pablo Galindo Salgado "
"is also funded by Bloomberg LP to work on the project part-time. Finally,"
" many contributors are volunteers from the community."
msgstr ""

#: ../../whatsnew/3.11.rst:944
msgid "CPython bytecode changes"
msgstr ""

#: ../../whatsnew/3.11.rst:946
msgid ""
"Replaced all numeric ``BINARY_*`` and ``INPLACE_*`` instructions with a "
"single :opcode:`BINARY_OP` implementation."
msgstr ""

#: ../../whatsnew/3.11.rst:949
msgid ""
"Replaced the three call instructions: :opcode:`CALL_FUNCTION`, "
":opcode:`CALL_FUNCTION_KW` and :opcode:`CALL_METHOD` with "
":opcode:`PUSH_NULL`, :opcode:`PRECALL`, :opcode:`CALL`, and "
":opcode:`KW_NAMES`. This decouples the argument shifting for methods from"
" the handling of keyword arguments and allows better specialization of "
"calls."
msgstr ""

#: ../../whatsnew/3.11.rst:956
msgid "Removed ``COPY_DICT_WITHOUT_KEYS`` and ``GEN_START``."
msgstr ""

#: ../../whatsnew/3.11.rst:958
msgid ""
":opcode:`MATCH_CLASS` and :opcode:`MATCH_KEYS` no longer push an "
"additional boolean value indicating whether the match succeeded or "
"failed. Instead, they indicate failure with :const:`None` (where a tuple "
"of extracted values would otherwise be)."
msgstr ""

#: ../../whatsnew/3.11.rst:963
msgid ""
"Replace several stack manipulation instructions (``DUP_TOP``, "
"``DUP_TOP_TWO``, ``ROT_TWO``, ``ROT_THREE``, ``ROT_FOUR``, and ``ROT_N``)"
" with new :opcode:`COPY` and :opcode:`SWAP` instructions."
msgstr ""

#: ../../whatsnew/3.11.rst:967
msgid ""
"Replaced :opcode:`JUMP_IF_NOT_EXC_MATCH` by :opcode:`CHECK_EXC_MATCH` "
"which performs the check but does not jump."
msgstr ""

#: ../../whatsnew/3.11.rst:970
msgid ""
"Replaced :opcode:`JUMP_IF_NOT_EG_MATCH` by :opcode:`CHECK_EG_MATCH` which"
" performs the check but does not jump."
msgstr ""

#: ../../whatsnew/3.11.rst:973
msgid "Replaced :opcode:`JUMP_ABSOLUTE` by the relative :opcode:`JUMP_BACKWARD`."
msgstr ""

#: ../../whatsnew/3.11.rst:975
msgid ""
"Added :opcode:`JUMP_BACKWARD_NO_INTERRUPT`, which is used in certain "
"loops where it is undesirable to handle interrupts."
msgstr ""

#: ../../whatsnew/3.11.rst:978
msgid ""
"Replaced :opcode:`POP_JUMP_IF_TRUE` and :opcode:`POP_JUMP_IF_FALSE` by "
"the relative :opcode:`POP_JUMP_FORWARD_IF_TRUE`, "
":opcode:`POP_JUMP_BACKWARD_IF_TRUE`, :opcode:`POP_JUMP_FORWARD_IF_FALSE` "
"and :opcode:`POP_JUMP_BACKWARD_IF_FALSE`."
msgstr ""

#: ../../whatsnew/3.11.rst:982
msgid ""
"Added :opcode:`POP_JUMP_FORWARD_IF_NOT_NONE`, "
":opcode:`POP_JUMP_BACKWARD_IF_NOT_NONE`, "
":opcode:`POP_JUMP_FORWARD_IF_NONE` and "
":opcode:`POP_JUMP_BACKWARD_IF_NONE` opcodes to speed up conditional "
"jumps."
msgstr ""

#: ../../whatsnew/3.11.rst:986
msgid ""
":opcode:`JUMP_IF_TRUE_OR_POP` and :opcode:`JUMP_IF_FALSE_OR_POP` are now "
"relative rather than absolute."
msgstr ""

#: ../../whatsnew/3.11.rst:991 ../../whatsnew/3.11.rst:1621
msgid "Deprecated"
msgstr ""

#: ../../whatsnew/3.11.rst:993
msgid ""
"The :mod:`lib2to3` package and ``2to3`` tool are now deprecated and may "
"not be able to parse Python 3.10 or newer. See the :pep:`617` (New PEG "
"parser for CPython).  (Contributed by Victor Stinner in :issue:`40360`.)"
msgstr ""

#: ../../whatsnew/3.11.rst:997
msgid ""
"Undocumented modules ``sre_compile``, ``sre_constants`` and ``sre_parse``"
" are now deprecated. (Contributed by Serhiy Storchaka in :issue:`47152`.)"
msgstr ""

#: ../../whatsnew/3.11.rst:1001
msgid ""
":class:`webbrowser.MacOSX` is deprecated and will be removed in Python "
"3.13. It is untested and undocumented and also not used by webbrowser "
"itself. (Contributed by Dong-hee Na in :issue:`42255`.)"
msgstr ""

#: ../../whatsnew/3.11.rst:1005
msgid ""
"The behavior of returning a value from a :class:`~unittest.TestCase` and "
":class:`~unittest.IsolatedAsyncioTestCase` test methods (other than the "
"default ``None`` value), is now deprecated."
msgstr ""

#: ../../whatsnew/3.11.rst:1009
msgid ""
"Deprecated the following :mod:`unittest` functions, scheduled for removal"
" in Python 3.13:"
msgstr ""

#: ../../whatsnew/3.11.rst:1012
msgid ":func:`unittest.findTestCases`"
msgstr ""

#: ../../whatsnew/3.11.rst:1013
msgid ":func:`unittest.makeSuite`"
msgstr ""

#: ../../whatsnew/3.11.rst:1014
msgid ":func:`unittest.getTestCaseNames`"
msgstr ""

#: ../../whatsnew/3.11.rst:1016
msgid "Use :class:`~unittest.TestLoader` method instead:"
msgstr ""

#: ../../whatsnew/3.11.rst:1018
msgid ":meth:`unittest.TestLoader.loadTestsFromModule`"
msgstr ""

#: ../../whatsnew/3.11.rst:1019
msgid ":meth:`unittest.TestLoader.loadTestsFromTestCase`"
msgstr ""

#: ../../whatsnew/3.11.rst:1020
msgid ":meth:`unittest.TestLoader.getTestCaseNames`"
msgstr ""

#: ../../whatsnew/3.11.rst:1022
msgid "(Contributed by Erlend E. Aasland in :issue:`5846`.)"
msgstr ""

#: ../../whatsnew/3.11.rst:1024
msgid ""
"The :meth:`turtle.RawTurtle.settiltangle` is deprecated since Python 3.1,"
" it now emits a deprecation warning and will be removed in Python 3.13. "
"Use :meth:`turtle.RawTurtle.tiltangle` instead (it was earlier "
"incorrectly marked as deprecated, its docstring is now corrected). "
"(Contributed by Hugo van Kemenade in :issue:`45837`.)"
msgstr ""

#: ../../whatsnew/3.11.rst:1030
msgid ""
"The delegation of :func:`int` to :meth:`__trunc__` is now deprecated. "
"Calling ``int(a)`` when ``type(a)`` implements :meth:`__trunc__` but not "
":meth:`__int__` or :meth:`__index__` now raises a "
":exc:`DeprecationWarning`. (Contributed by Zackery Spytz in "
":issue:`44977`.)"
msgstr ""

#: ../../whatsnew/3.11.rst:1035
msgid ""
"The following have been deprecated in :mod:`configparser` since Python "
"3.2. Their deprecation warnings have now been updated to note they will "
"removed in Python 3.12:"
msgstr ""

#: ../../whatsnew/3.11.rst:1039
msgid "the :class:`configparser.SafeConfigParser` class"
msgstr ""

#: ../../whatsnew/3.11.rst:1040
msgid "the :attr:`configparser.ParsingError.filename` property"
msgstr ""

#: ../../whatsnew/3.11.rst:1041
msgid "the :meth:`configparser.ParsingError.readfp` method"
msgstr ""

#: ../../whatsnew/3.11.rst:1043
msgid "(Contributed by Hugo van Kemenade in :issue:`45173`.)"
msgstr ""

#: ../../whatsnew/3.11.rst:1045
msgid ""
":class:`configparser.LegacyInterpolation` has been deprecated in the "
"docstring since Python 3.2. It now emits a :exc:`DeprecationWarning` and "
"will be removed in Python 3.13. Use "
":class:`configparser.BasicInterpolation` or "
":class:`configparser.ExtendedInterpolation` instead. (Contributed by Hugo"
" van Kemenade in :issue:`46607`.)"
msgstr ""

#: ../../whatsnew/3.11.rst:1051
msgid ""
"The :func:`locale.getdefaultlocale` function is deprecated and will be "
"removed in Python 3.13. Use :func:`locale.setlocale`, "
":func:`locale.getpreferredencoding(False) <locale.getpreferredencoding>` "
"and :func:`locale.getlocale` functions instead. (Contributed by Victor "
"Stinner in :issue:`46659`.)"
msgstr ""

#: ../../whatsnew/3.11.rst:1057
msgid ""
"The :mod:`asynchat`, :mod:`asyncore` and  :mod:`smtpd` modules have been "
"deprecated since at least Python 3.6. Their documentation and deprecation"
" warnings have now been updated to note they will removed in Python 3.12 "
"(:pep:`594`). (Contributed by Hugo van Kemenade in :issue:`47022`.)"
msgstr ""

#: ../../whatsnew/3.11.rst:1063
msgid ""
":pep:`594` led to the deprecations of the following modules which are "
"slated for removal in Python 3.13:"
msgstr ""

#: ../../whatsnew/3.11.rst:1066
msgid ":mod:`aifc`"
msgstr ""

#: ../../whatsnew/3.11.rst:1067
msgid ":mod:`audioop`"
msgstr ""

#: ../../whatsnew/3.11.rst:1068
msgid ":mod:`cgi`"
msgstr ""

#: ../../whatsnew/3.11.rst:1069
msgid ":mod:`cgitb`"
msgstr ""

#: ../../whatsnew/3.11.rst:1070
msgid ":mod:`chunk`"
msgstr ""

#: ../../whatsnew/3.11.rst:1071
msgid ":mod:`crypt`"
msgstr ""

#: ../../whatsnew/3.11.rst:1072
msgid ":mod:`imghdr`"
msgstr ""

#: ../../whatsnew/3.11.rst:1073
msgid ":mod:`mailcap`"
msgstr ""

#: ../../whatsnew/3.11.rst:1074
msgid ":mod:`msilib`"
msgstr ""

#: ../../whatsnew/3.11.rst:1075
msgid ":mod:`nis`"
msgstr ""

#: ../../whatsnew/3.11.rst:1076
msgid ":mod:`nntplib`"
msgstr ""

#: ../../whatsnew/3.11.rst:1077
msgid ":mod:`ossaudiodev`"
msgstr ""

#: ../../whatsnew/3.11.rst:1078
msgid ":mod:`pipes`"
msgstr ""

#: ../../whatsnew/3.11.rst:1079
msgid ":mod:`sndhdr`"
msgstr ""

#: ../../whatsnew/3.11.rst:1080
msgid ":mod:`spwd`"
msgstr ""

#: ../../whatsnew/3.11.rst:1081
msgid ":mod:`sunau`"
msgstr ""

#: ../../whatsnew/3.11.rst:1082
msgid ":mod:`telnetlib`"
msgstr ""

#: ../../whatsnew/3.11.rst:1083
msgid ":mod:`uu`"
msgstr ""

#: ../../whatsnew/3.11.rst:1085
msgid ""
"(Contributed by Brett Cannon in :issue:`47061` and Victor Stinner in "
":gh:`68966`.)"
msgstr ""

#: ../../whatsnew/3.11.rst:1090 ../../whatsnew/3.11.rst:1643
msgid "Removed"
msgstr ""

#: ../../whatsnew/3.11.rst:1092
msgid ""
":class:`smtpd.MailmanProxy` is now removed as it is unusable without an "
"external module, ``mailman``. (Contributed by Dong-hee Na in "
":issue:`35800`.)"
msgstr ""

#: ../../whatsnew/3.11.rst:1095
msgid ""
"The ``binhex`` module, deprecated in Python 3.9, is now removed. The "
"following :mod:`binascii` functions, deprecated in Python 3.9, are now "
"also removed:"
msgstr ""

#: ../../whatsnew/3.11.rst:1099
msgid "``a2b_hqx()``, ``b2a_hqx()``;"
msgstr ""

#: ../../whatsnew/3.11.rst:1100
msgid "``rlecode_hqx()``, ``rledecode_hqx()``."
msgstr ""

#: ../../whatsnew/3.11.rst:1102
msgid "The :func:`binascii.crc_hqx` function remains available."
msgstr ""

#: ../../whatsnew/3.11.rst:1104
msgid "(Contributed by Victor Stinner in :issue:`45085`.)"
msgstr ""

#: ../../whatsnew/3.11.rst:1106
msgid ""
"The distutils ``bdist_msi`` command, deprecated in Python 3.9, is now "
"removed. Use ``bdist_wheel`` (wheel packages) instead. (Contributed by "
"Hugo van Kemenade in :issue:`45124`.)"
msgstr ""

#: ../../whatsnew/3.11.rst:1110
msgid ""
"Due to significant security concerns, the *reuse_address* parameter of "
":meth:`asyncio.loop.create_datagram_endpoint`, disabled in Python 3.9, is"
" now entirely removed. This is because of the behavior of the socket "
"option ``SO_REUSEADDR`` in UDP. (Contributed by Hugo van Kemenade in "
":issue:`45129`.)"
msgstr ""

#: ../../whatsnew/3.11.rst:1116
msgid ""
"Removed :meth:`__getitem__` methods of "
":class:`xml.dom.pulldom.DOMEventStream`, "
":class:`wsgiref.util.FileWrapper` and :class:`fileinput.FileInput`, "
"deprecated since Python 3.9. (Contributed by Hugo van Kemenade in "
":issue:`45132`.)"
msgstr ""

#: ../../whatsnew/3.11.rst:1121
msgid ""
"The following deprecated functions and methods are removed in the "
":mod:`gettext` module: :func:`~gettext.lgettext`, "
":func:`~gettext.ldgettext`, :func:`~gettext.lngettext` and "
":func:`~gettext.ldngettext`."
msgstr ""

#: ../../whatsnew/3.11.rst:1125
msgid ""
"Function :func:`~gettext.bind_textdomain_codeset`, methods "
":meth:`~gettext.NullTranslations.output_charset` and "
":meth:`~gettext.NullTranslations.set_output_charset`, and the *codeset* "
"parameter of functions :func:`~gettext.translation` and "
":func:`~gettext.install` are also removed, since they are only used for "
"the ``l*gettext()`` functions. (Contributed by Dong-hee Na and Serhiy "
"Storchaka in :issue:`44235`.)"
msgstr ""

#: ../../whatsnew/3.11.rst:1133
msgid ""
"The :func:`@asyncio.coroutine <asyncio.coroutine>` :term:`decorator` "
"enabling legacy generator-based coroutines to be compatible with "
"async/await code. The function has been deprecated since Python 3.8 and "
"the removal was initially scheduled for Python 3.10. Use :keyword:`async "
"def` instead. (Contributed by Illia Volochii in :issue:`43216`.)"
msgstr ""

#: ../../whatsnew/3.11.rst:1139
msgid ""
":class:`asyncio.coroutines.CoroWrapper` used for wrapping legacy "
"generator-based coroutine objects in the debug mode. (Contributed by "
"Illia Volochii in :issue:`43216`.)"
msgstr ""

#: ../../whatsnew/3.11.rst:1143
msgid ""
"Removed the deprecated ``split()`` method of :class:`_tkinter.TkappType`."
" (Contributed by Erlend E. Aasland in :issue:`38371`.)"
msgstr ""

#: ../../whatsnew/3.11.rst:1146
msgid "Removed from the :mod:`inspect` module:"
msgstr ""

#: ../../whatsnew/3.11.rst:1148
msgid ""
"the ``getargspec`` function, deprecated since Python 3.0; use "
":func:`inspect.signature` or :func:`inspect.getfullargspec` instead."
msgstr ""

#: ../../whatsnew/3.11.rst:1151
msgid ""
"the ``formatargspec`` function, deprecated since Python 3.5; use the "
":func:`inspect.signature` function and :class:`Signature` object "
"directly."
msgstr ""

#: ../../whatsnew/3.11.rst:1155
msgid ""
"the undocumented ``Signature.from_builtin`` and "
"``Signature.from_function`` functions, deprecated since Python 3.5; use "
"the :meth:`Signature.from_callable() <inspect.Signature.from_callable>` "
"method instead."
msgstr ""

#: ../../whatsnew/3.11.rst:1160
msgid "(Contributed by Hugo van Kemenade in :issue:`45320`.)"
msgstr ""

#: ../../whatsnew/3.11.rst:1162
msgid ""
"Remove namespace package support from unittest discovery. It was "
"introduced in Python 3.4 but has been broken since Python 3.7. "
"(Contributed by Inada Naoki in :issue:`23882`.)"
msgstr ""

#: ../../whatsnew/3.11.rst:1166
msgid ""
"Remove ``__class_getitem__`` method from :class:`pathlib.PurePath`, "
"because it was not used and added by mistake in previous versions. "
"(Contributed by Nikita Sobolev in :issue:`46483`.)"
msgstr ""

#: ../../whatsnew/3.11.rst:1170
msgid ""
"Remove the undocumented private ``float.__set_format__()`` method, "
"previously known as ``float.__setformat__()`` in Python 3.7. Its "
"docstring said: \"You probably don't want to use this function. It exists"
" mainly to be used in Python's test suite.\" (Contributed by Victor "
"Stinner in :issue:`46852`.)"
msgstr ""

#: ../../whatsnew/3.11.rst:1177 ../../whatsnew/3.11.rst:1393
msgid "Porting to Python 3.11"
msgstr ""

#: ../../whatsnew/3.11.rst:1179
msgid ""
"This section lists previously described changes and other bugfixes that "
"may require changes to your code."
msgstr ""

#: ../../whatsnew/3.11.rst:1184
msgid "Changes in the Python API"
msgstr ""

#: ../../whatsnew/3.11.rst:1186
msgid ""
"Prohibited passing non-:class:`concurrent.futures.ThreadPoolExecutor` "
"executors to :meth:`loop.set_default_executor` following a deprecation in"
" Python 3.8. (Contributed by Illia Volochii in :issue:`43234`.)"
msgstr ""

#: ../../whatsnew/3.11.rst:1191
msgid ""
":func:`open`, :func:`io.open`, :func:`codecs.open` and "
":class:`fileinput.FileInput` no longer accept ``'U'`` (\"universal "
"newline\") in the file mode. This flag was deprecated since Python 3.3. "
"In Python 3, the \"universal newline\" is used by default when a file is "
"open in text mode.  The :ref:`newline parameter <open-newline-parameter>`"
" of :func:`open` controls how universal newlines works. (Contributed by "
"Victor Stinner in :issue:`37330`.)"
msgstr ""

#: ../../whatsnew/3.11.rst:1199
msgid ""
"The :mod:`pdb` module now reads the :file:`.pdbrc` configuration file "
"with the ``'utf-8'`` encoding. (Contributed by Srinivas Reddy Thatiparthy"
" (శ్రీనివాస్  రెడ్డి తాటిపర్తి) in :issue:`41137`.)"
msgstr ""

#: ../../whatsnew/3.11.rst:1203
msgid ""
"When sorting using tuples as keys, the order of the result may differ "
"from earlier releases if the tuple elements don't define a total ordering"
" (see :ref:`expressions-value-comparisons` for information on total "
"ordering).  It's generally true that the result of sorting simply isn't "
"well-defined in the absence of a total ordering on list elements."
msgstr ""

#: ../../whatsnew/3.11.rst:1210
msgid ""
":mod:`calendar`: The :class:`calendar.LocaleTextCalendar` and "
":class:`calendar.LocaleHTMLCalendar` classes now use "
":func:`locale.getlocale`, instead of using "
":func:`locale.getdefaultlocale`, if no locale is specified. (Contributed "
"by Victor Stinner in :issue:`46659`.)"
msgstr ""

#: ../../whatsnew/3.11.rst:1216
msgid ""
"Global inline flags (e.g. ``(?i)``) can now only be used at the start of "
"the regular expressions.  Using them not at the start of expression was "
"deprecated since Python 3.6. (Contributed by Serhiy Storchaka in "
":issue:`47066`.)"
msgstr ""

#: ../../whatsnew/3.11.rst:1221
msgid ""
":mod:`re` module: Fix a few long-standing bugs where, in rare cases, "
"capturing group could get wrong result. So the result may be different "
"than before. (Contributed by Ma Lin in :issue:`35859`.)"
msgstr ""

#: ../../whatsnew/3.11.rst:1226
msgid ""
"The *population* parameter of :func:`random.sample` must be a sequence. "
"Automatic conversion of sets to lists is no longer supported. If the "
"sample size is larger than the population size, a :exc:`ValueError` is "
"raised. (Contributed by Raymond Hettinger in :issue:`40465`.)"
msgstr ""

#: ../../whatsnew/3.11.rst:1233
msgid "Build Changes"
msgstr ""

#: ../../whatsnew/3.11.rst:1235
msgid ""
"Building Python now requires a C11 compiler without optional C11 "
"features. (Contributed by Victor Stinner in :issue:`46656`.)"
msgstr ""

#: ../../whatsnew/3.11.rst:1238
msgid ""
"Building Python now requires support of IEEE 754 floating point numbers. "
"(Contributed by Victor Stinner in :issue:`46917`.)"
msgstr ""

#: ../../whatsnew/3.11.rst:1241
msgid ""
"CPython can now be built with the ThinLTO option via ``--with-lto=thin``."
" (Contributed by Dong-hee Na and Brett Holman in :issue:`44340`.)"
msgstr ""

#: ../../whatsnew/3.11.rst:1244
msgid ""
"libpython is no longer linked against libcrypt. (Contributed by Mike "
"Gilbert in :issue:`45433`.)"
msgstr ""

#: ../../whatsnew/3.11.rst:1247
msgid ""
"Building Python now requires a C99 ``<math.h>`` header file providing the"
" following functions: ``copysign()``, ``hypot()``, ``isfinite()``, "
"``isinf()``, ``isnan()``, ``round()``. (Contributed by Victor Stinner in "
":issue:`45440`.)"
msgstr ""

#: ../../whatsnew/3.11.rst:1252
msgid ""
"Building Python now requires a C99 ``<math.h>`` header file providing a "
"``NAN`` constant, or the ``__builtin_nan()`` built-in function. "
"(Contributed by Victor Stinner in :issue:`46640`.)"
msgstr ""

#: ../../whatsnew/3.11.rst:1256
msgid ""
"Building Python now requires support for floating point Not-a-Number "
"(NaN): remove the ``Py_NO_NAN`` macro. (Contributed by Victor Stinner in "
":issue:`46656`.)"
msgstr ""

#: ../../whatsnew/3.11.rst:1260
msgid ""
"Freelists for object structs can now be disabled. A new "
":program:`configure` option :option:`!--without-freelists` can be used to"
" disable all freelists except empty tuple singleton. (Contributed by "
"Christian Heimes in :issue:`45522`)"
msgstr ""

#: ../../whatsnew/3.11.rst:1265
msgid ""
"``Modules/Setup`` and ``Modules/makesetup`` have been improved and tied "
"up. Extension modules can now be built through ``makesetup``. All except "
"some test modules can be linked statically into main binary or library. "
"(Contributed by Brett Cannon and Christian Heimes in :issue:`45548`, "
":issue:`45570`, :issue:`45571`, and :issue:`43974`.)"
msgstr ""

#: ../../whatsnew/3.11.rst:1271
msgid ""
"Build dependencies, compiler flags, and linker flags for most stdlib "
"extension modules are now detected by :program:`configure`. libffi, "
"libnsl, libsqlite3, zlib, bzip2, liblzma, libcrypt, Tcl/Tk libs, and uuid"
" flags are detected by ``pkg-config`` (when available). (Contributed by "
"Christian Heimes and Erlend Egeberg Aasland in :issue:`45847`, "
":issue:`45747`, and :issue:`45763`.)"
msgstr ""

#: ../../whatsnew/3.11.rst:1279
msgid ""
"Use the environment variables ``TCLTK_CFLAGS`` and ``TCLTK_LIBS`` to "
"manually specify the location of Tcl/Tk headers and libraries. The "
":program:`configure` options ``--with-tcltk-includes`` and ``--with-"
"tcltk-libs`` have been removed."
msgstr ""

#: ../../whatsnew/3.11.rst:1284
msgid ""
"CPython now has experimental support for cross compiling to WebAssembly "
"platform ``wasm32-emscripten``. The effort is inspired by previous work "
"like Pyodide. (Contributed by Christian Heimes and Ethan Smith in "
":issue:`40280`.)"
msgstr ""

#: ../../whatsnew/3.11.rst:1289
msgid ""
"CPython will now use 30-bit digits by default for the Python :class:`int`"
" implementation. Previously, the default was to use 30-bit digits on "
"platforms with ``SIZEOF_VOID_P >= 8``, and 15-bit digits otherwise. It's "
"still possible to explicitly request use of 15-bit digits via either the "
"``--enable-big-digits`` option to the configure script or (for Windows) "
"the ``PYLONG_BITS_IN_DIGIT`` variable in ``PC/pyconfig.h``, but this "
"option may be removed at some point in the future. (Contributed by Mark "
"Dickinson in :issue:`45569`.)"
msgstr ""

#: ../../whatsnew/3.11.rst:1298
msgid ""
"The :mod:`tkinter` package now requires Tcl/Tk version 8.5.12 or newer. "
"(Contributed by Serhiy Storchaka in :issue:`46996`.)"
msgstr ""

#: ../../whatsnew/3.11.rst:1303
msgid "C API Changes"
msgstr ""

#: ../../whatsnew/3.11.rst:1305
msgid ""
":c:func:`PyErr_SetExcInfo()` no longer uses the ``type`` and "
"``traceback`` arguments, the interpreter now derives those values from "
"the exception instance (the ``value`` argument). The function still "
"steals references of all three arguments. (Contributed by Irit Katriel in"
" :issue:`45711`.)"
msgstr ""

#: ../../whatsnew/3.11.rst:1311
msgid ""
":c:func:`PyErr_GetExcInfo()` now derives the ``type`` and ``traceback`` "
"fields of the result from the exception instance (the ``value`` field). "
"(Contributed by Irit Katriel in :issue:`45711`.)"
msgstr ""

#: ../../whatsnew/3.11.rst:1315
msgid ""
":c:struct:`_frozen` has a new ``is_package`` field to indicate whether or"
" not the frozen module is a package.  Previously, a negative value in the"
" ``size`` field was the indicator.  Now only non-negative values be used "
"for ``size``. (Contributed by Kumar Aditya in :issue:`46608`.)"
msgstr ""

#: ../../whatsnew/3.11.rst:1321
msgid ""
":c:func:`_PyFrameEvalFunction` now takes ``_PyInterpreterFrame*`` as its "
"second parameter, instead of ``PyFrameObject*``. See :pep:`523` for more "
"details of how to use this function pointer type."
msgstr ""

#: ../../whatsnew/3.11.rst:1325
msgid ""
":c:func:`PyCode_New` and :c:func:`PyCode_NewWithPosOnlyArgs` now take an "
"additional ``exception_table`` argument. Using these functions should be "
"avoided, if at all possible. To get a custom code object: create a code "
"object using the compiler, then get a modified version with the "
"``replace`` method."
msgstr ""

#: ../../whatsnew/3.11.rst:1334
msgid ""
"Add a new :c:func:`PyType_GetName` function to get type's short name. "
"(Contributed by Hai Shi in :issue:`42035`.)"
msgstr ""

#: ../../whatsnew/3.11.rst:1337
msgid ""
"Add a new :c:func:`PyType_GetQualName` function to get type's qualified "
"name. (Contributed by Hai Shi in :issue:`42035`.)"
msgstr ""

#: ../../whatsnew/3.11.rst:1340
msgid ""
"Add new :c:func:`PyThreadState_EnterTracing` and "
":c:func:`PyThreadState_LeaveTracing` functions to the limited C API to "
"suspend and resume tracing and profiling. (Contributed by Victor Stinner "
"in :issue:`43760`.)"
msgstr ""

#: ../../whatsnew/3.11.rst:1345
msgid ""
"Added the :c:data:`Py_Version` constant which bears the same value as "
":c:macro:`PY_VERSION_HEX`. (Contributed by  Gabriele N. Tornetta in "
":issue:`43931`.)"
msgstr ""

#: ../../whatsnew/3.11.rst:1349
msgid ""
":c:type:`Py_buffer` and APIs are now part of the limited API and the "
"stable ABI:"
msgstr ""

#: ../../whatsnew/3.11.rst:1352
msgid ":c:func:`PyObject_CheckBuffer`"
msgstr ""

#: ../../whatsnew/3.11.rst:1353
msgid ":c:func:`PyObject_GetBuffer`"
msgstr ""

#: ../../whatsnew/3.11.rst:1354
msgid ":c:func:`PyBuffer_GetPointer`"
msgstr ""

#: ../../whatsnew/3.11.rst:1355
msgid ":c:func:`PyBuffer_SizeFromFormat`"
msgstr ""

#: ../../whatsnew/3.11.rst:1356
msgid ":c:func:`PyBuffer_ToContiguous`"
msgstr ""

#: ../../whatsnew/3.11.rst:1357
msgid ":c:func:`PyBuffer_FromContiguous`"
msgstr ""

#: ../../whatsnew/3.11.rst:1358
msgid ":c:func:`PyBuffer_CopyData`"
msgstr ""

#: ../../whatsnew/3.11.rst:1359
msgid ":c:func:`PyBuffer_IsContiguous`"
msgstr ""

#: ../../whatsnew/3.11.rst:1360
msgid ":c:func:`PyBuffer_FillContiguousStrides`"
msgstr ""

#: ../../whatsnew/3.11.rst:1361
msgid ":c:func:`PyBuffer_FillInfo`"
msgstr ""

#: ../../whatsnew/3.11.rst:1362
msgid ":c:func:`PyBuffer_Release`"
msgstr ""

#: ../../whatsnew/3.11.rst:1363
msgid ":c:func:`PyMemoryView_FromBuffer`"
msgstr ""

#: ../../whatsnew/3.11.rst:1364
msgid ""
":c:member:`~PyBufferProcs.bf_getbuffer` and "
":c:member:`~PyBufferProcs.bf_releasebuffer` type slots"
msgstr ""

#: ../../whatsnew/3.11.rst:1367
msgid "(Contributed by Christian Heimes in :issue:`45459`.)"
msgstr ""

#: ../../whatsnew/3.11.rst:1369
msgid ""
"Added the :c:data:`PyType_GetModuleByDef` function, used to get the "
"module in which a method was defined, in cases where this information is "
"not available directly (via :c:type:`PyCMethod`). (Contributed by Petr "
"Viktorin in :issue:`46613`.)"
msgstr ""

#: ../../whatsnew/3.11.rst:1374
msgid ""
"Add new functions to pack and unpack C double (serialize and "
"deserialize): :c:func:`PyFloat_Pack2`, :c:func:`PyFloat_Pack4`, "
":c:func:`PyFloat_Pack8`, :c:func:`PyFloat_Unpack2`, "
":c:func:`PyFloat_Unpack4` and :c:func:`PyFloat_Unpack8`. (Contributed by "
"Victor Stinner in :issue:`46906`.)"
msgstr ""

#: ../../whatsnew/3.11.rst:1380
msgid ""
"Add new functions to get frame object attributes: "
":c:func:`PyFrame_GetBuiltins`, :c:func:`PyFrame_GetGenerator`, "
":c:func:`PyFrame_GetGlobals`, :c:func:`PyFrame_GetLasti`."
msgstr ""

#: ../../whatsnew/3.11.rst:1384
msgid ""
"Added two new functions to get and set the active exception instance: "
":c:func:`PyErr_GetHandledException` and "
":c:func:`PyErr_SetHandledException`. These are alternatives to "
":c:func:`PyErr_SetExcInfo()` and :c:func:`PyErr_GetExcInfo()` which work "
"with the legacy 3-tuple representation of exceptions. (Contributed by "
"Irit Katriel in :issue:`46343`.)"
msgstr ""

#: ../../whatsnew/3.11.rst:1395
msgid ""
"The old trashcan macros "
"(``Py_TRASHCAN_SAFE_BEGIN``/``Py_TRASHCAN_SAFE_END``) are now deprecated."
" They should be replaced by the new macros ``Py_TRASHCAN_BEGIN`` and "
"``Py_TRASHCAN_END``."
msgstr ""

#: ../../whatsnew/3.11.rst:1399
msgid "A tp_dealloc function that has the old macros, such as::"
msgstr ""

#: ../../whatsnew/3.11.rst:1410
msgid "should migrate to the new macros as follows::"
msgstr ""

#: ../../whatsnew/3.11.rst:1421
msgid ""
"Note that ``Py_TRASHCAN_BEGIN`` has a second argument which should be the"
" deallocation function it is in."
msgstr ""

#: ../../whatsnew/3.11.rst:1424
msgid ""
"To support older Python versions in the same codebase, you can define the"
" following macros and use them throughout the code (credit: these were "
"copied from the ``mypy`` codebase)::"
msgstr ""

#: ../../whatsnew/3.11.rst:1436
msgid ""
"The :c:func:`PyType_Ready` function now raises an error if a type is "
"defined with the :const:`Py_TPFLAGS_HAVE_GC` flag set but has no traverse"
" function (:c:member:`PyTypeObject.tp_traverse`). (Contributed by Victor "
"Stinner in :issue:`44263`.)"
msgstr ""

#: ../../whatsnew/3.11.rst:1441
msgid ""
"Heap types with the :const:`Py_TPFLAGS_IMMUTABLETYPE` flag can now "
"inherit the :pep:`590` vectorcall protocol.  Previously, this was only "
"possible for :ref:`static types <static-types>`. (Contributed by Erlend "
"E. Aasland in :issue:`43908`)"
msgstr ""

#: ../../whatsnew/3.11.rst:1446
msgid ""
"Since :c:func:`Py_TYPE()` is changed to a inline static function, "
"``Py_TYPE(obj) = new_type`` must be replaced with ``Py_SET_TYPE(obj, "
"new_type)``: see the :c:func:`Py_SET_TYPE()` function (available since "
"Python 3.9). For backward compatibility, this macro can be used::"
msgstr ""

#: ../../whatsnew/3.11.rst:1458 ../../whatsnew/3.11.rst:1472
msgid "(Contributed by Victor Stinner in :issue:`39573`.)"
msgstr ""

#: ../../whatsnew/3.11.rst:1460
msgid ""
"Since :c:func:`Py_SIZE()` is changed to a inline static function, "
"``Py_SIZE(obj) = new_size`` must be replaced with ``Py_SET_SIZE(obj, "
"new_size)``: see the :c:func:`Py_SET_SIZE()` function (available since "
"Python 3.9). For backward compatibility, this macro can be used::"
msgstr ""

#: ../../whatsnew/3.11.rst:1474
msgid ""
"``<Python.h>`` no longer includes the header files ``<stdlib.h>``, "
"``<stdio.h>``, ``<errno.h>`` and ``<string.h>`` when the "
"``Py_LIMITED_API`` macro is set to ``0x030b0000`` (Python 3.11) or "
"higher. C extensions should explicitly include the header files after "
"``#include <Python.h>``. (Contributed by Victor Stinner in "
":issue:`45434`.)"
msgstr ""

#: ../../whatsnew/3.11.rst:1480
msgid ""
"The non-limited API files ``cellobject.h``, ``classobject.h``, "
"``code.h``, ``context.h``, ``funcobject.h``, ``genobject.h`` and "
"``longintrepr.h`` have been moved to the ``Include/cpython`` directory. "
"Moreover, the ``eval.h`` header file was removed. These files must not be"
" included directly, as they are already included in ``Python.h``: "
":ref:`Include Files <api-includes>`. If they have been included directly,"
" consider including ``Python.h`` instead. (Contributed by Victor Stinner "
"in :issue:`35134`.)"
msgstr ""

#: ../../whatsnew/3.11.rst:1488
msgid ""
"The :c:func:`PyUnicode_CHECK_INTERNED` macro has been excluded from the "
"limited C API. It was never usable there, because it used internal "
"structures which are not available in the limited C API. (Contributed by "
"Victor Stinner in :issue:`46007`.)"
msgstr ""

#: ../../whatsnew/3.11.rst:1495
msgid ""
"The :c:type:`PyFrameObject` structure members have been removed from the "
"public C API."
msgstr ""

#: ../../whatsnew/3.11.rst:1498
msgid ""
"While the documentation notes that the :c:type:`PyFrameObject` fields are"
" subject to change at any time, they have been stable for a long time and"
" were used in several popular extensions."
msgstr ""

#: ../../whatsnew/3.11.rst:1502
msgid ""
"In Python 3.11, the frame struct was reorganized to allow performance "
"optimizations. Some fields were removed entirely, as they were details of"
" the old implementation."
msgstr ""

#: ../../whatsnew/3.11.rst:1506
msgid ":c:type:`PyFrameObject` fields:"
msgstr ""

#: ../../whatsnew/3.11.rst:1508
msgid "``f_back``: use :c:func:`PyFrame_GetBack`."
msgstr ""

#: ../../whatsnew/3.11.rst:1509
msgid "``f_blockstack``: removed."
msgstr ""

#: ../../whatsnew/3.11.rst:1510
msgid "``f_builtins``: use :c:func:`PyFrame_GetBuiltins`."
msgstr ""

#: ../../whatsnew/3.11.rst:1511
msgid "``f_code``: use :c:func:`PyFrame_GetCode`."
msgstr ""

#: ../../whatsnew/3.11.rst:1512
msgid "``f_gen``: use :c:func:`PyFrame_GetGenerator`."
msgstr ""

#: ../../whatsnew/3.11.rst:1513
msgid "``f_globals``: use :c:func:`PyFrame_GetGlobals`."
msgstr ""

#: ../../whatsnew/3.11.rst:1514
msgid "``f_iblock``: removed."
msgstr ""

#: ../../whatsnew/3.11.rst:1515
msgid ""
"``f_lasti``: use :c:func:`PyFrame_GetLasti`. Code using ``f_lasti`` with "
"``PyCode_Addr2Line()`` should use :c:func:`PyFrame_GetLineNumber` "
"instead; it may be faster."
msgstr ""

#: ../../whatsnew/3.11.rst:1518
msgid "``f_lineno``: use :c:func:`PyFrame_GetLineNumber`"
msgstr ""

#: ../../whatsnew/3.11.rst:1519
msgid "``f_locals``: use :c:func:`PyFrame_GetLocals`."
msgstr ""

#: ../../whatsnew/3.11.rst:1520
msgid "``f_stackdepth``: removed."
msgstr ""

#: ../../whatsnew/3.11.rst:1521
msgid "``f_state``: no public API (renamed to ``f_frame.f_state``)."
msgstr ""

#: ../../whatsnew/3.11.rst:1522
msgid "``f_trace``: no public API."
msgstr ""

#: ../../whatsnew/3.11.rst:1523
msgid ""
"``f_trace_lines``: use ``PyObject_GetAttrString((PyObject*)frame, "
"\"f_trace_lines\")``."
msgstr ""

#: ../../whatsnew/3.11.rst:1524
msgid ""
"``f_trace_opcodes``: use ``PyObject_GetAttrString((PyObject*)frame, "
"\"f_trace_opcodes\")``."
msgstr ""

#: ../../whatsnew/3.11.rst:1525
msgid "``f_localsplus``: no public API (renamed to ``f_frame.localsplus``)."
msgstr ""

#: ../../whatsnew/3.11.rst:1526
msgid "``f_valuestack``: removed."
msgstr ""

#: ../../whatsnew/3.11.rst:1528
msgid ""
"The Python frame object is now created lazily. A side effect is that the "
"``f_back`` member must not be accessed directly, since its value is now "
"also computed lazily. The :c:func:`PyFrame_GetBack` function must be "
"called instead."
msgstr ""

#: ../../whatsnew/3.11.rst:1533
msgid ""
"Debuggers that accessed the ``f_locals`` directly *must* call "
":c:func:`PyFrame_GetLocals` instead. They no longer need to call "
":c:func:`PyFrame_FastToLocalsWithError` or "
":c:func:`PyFrame_LocalsToFast`, in fact they should not call those "
"functions. The necessary updating of the frame is now managed by the "
"virtual machine."
msgstr ""

#: ../../whatsnew/3.11.rst:1539
msgid "Code defining ``PyFrame_GetCode()`` on Python 3.8 and older::"
msgstr ""

#: ../../whatsnew/3.11.rst:1549
msgid "Code defining ``PyFrame_GetBack()`` on Python 3.8 and older::"
msgstr ""

#: ../../whatsnew/3.11.rst:1559
msgid ""
"Or use the `pythoncapi_compat project "
"<https://github.com/python/pythoncapi_compat>`__ to get these two "
"functions on older Python versions."
msgstr ""

#: ../../whatsnew/3.11.rst:1563
msgid "Changes of the :c:type:`PyThreadState` structure members:"
msgstr ""

#: ../../whatsnew/3.11.rst:1565
msgid ""
"``frame``: removed, use :c:func:`PyThreadState_GetFrame` (function added "
"to Python 3.9 by :issue:`40429`). Warning: the function returns a "
":term:`strong reference`, need to call :c:func:`Py_XDECREF`."
msgstr ""

#: ../../whatsnew/3.11.rst:1569
msgid ""
"``tracing``: changed, use :c:func:`PyThreadState_EnterTracing` and "
":c:func:`PyThreadState_LeaveTracing` (functions added to Python 3.11 by "
":issue:`43760`)."
msgstr ""

#: ../../whatsnew/3.11.rst:1572
msgid ""
"``recursion_depth``: removed, use ``(tstate->recursion_limit - "
"tstate->recursion_remaining)`` instead."
msgstr ""

#: ../../whatsnew/3.11.rst:1574
msgid "``stackcheck_counter``: removed."
msgstr ""

#: ../../whatsnew/3.11.rst:1576
msgid "Code defining ``PyThreadState_GetFrame()`` on Python 3.8 and older::"
msgstr ""

#: ../../whatsnew/3.11.rst:1586
msgid ""
"Code defining ``PyThreadState_EnterTracing()`` and "
"``PyThreadState_LeaveTracing()`` on Python 3.10 and older::"
msgstr ""

#: ../../whatsnew/3.11.rst:1612
msgid ""
"Or use `the pythoncapi_compat project "
"<https://github.com/python/pythoncapi_compat>`__ to get these functions "
"on old Python functions."
msgstr ""

#: ../../whatsnew/3.11.rst:1616
msgid ""
"Distributors are encouraged to build Python with the optimized Blake2 "
"library `libb2`_."
msgstr ""

#: ../../whatsnew/3.11.rst:1623
msgid "Deprecate the following functions to configure the Python initialization:"
msgstr ""

#: ../../whatsnew/3.11.rst:1625
msgid ":c:func:`PySys_AddWarnOptionUnicode`"
msgstr ""

#: ../../whatsnew/3.11.rst:1626
msgid ":c:func:`PySys_AddWarnOption`"
msgstr ""

#: ../../whatsnew/3.11.rst:1627
msgid ":c:func:`PySys_AddXOption`"
msgstr ""

#: ../../whatsnew/3.11.rst:1628
msgid ":c:func:`PySys_HasWarnOptions`"
msgstr ""

#: ../../whatsnew/3.11.rst:1629
msgid ":c:func:`Py_SetPath`"
msgstr ""

#: ../../whatsnew/3.11.rst:1630
msgid ":c:func:`Py_SetProgramName`"
msgstr ""

#: ../../whatsnew/3.11.rst:1631
msgid ":c:func:`Py_SetPythonHome`"
msgstr ""

#: ../../whatsnew/3.11.rst:1632
msgid ":c:func:`Py_SetStandardStreamEncoding`"
msgstr ""

#: ../../whatsnew/3.11.rst:1633
msgid ":c:func:`_Py_SetProgramFullPath`"
msgstr ""

#: ../../whatsnew/3.11.rst:1635
msgid ""
"Use the new :c:type:`PyConfig` API of the :ref:`Python Initialization "
"Configuration <init-config>` instead (:pep:`587`). (Contributed by Victor"
" Stinner in :issue:`44113`.)"
msgstr ""

#: ../../whatsnew/3.11.rst:1639
msgid ""
"Deprecate the ``ob_shash`` member of the :c:type:`PyBytesObject`. Use "
":c:func:`PyObject_Hash` instead. (Contributed by Inada Naoki in "
":issue:`46864`.)"
msgstr ""

#: ../../whatsnew/3.11.rst:1645
msgid ""
":c:func:`PyFrame_BlockSetup` and :c:func:`PyFrame_BlockPop` have been "
"removed. (Contributed by Mark Shannon in :issue:`40222`.)"
msgstr ""

#: ../../whatsnew/3.11.rst:1649
msgid "Remove the following math macros using the ``errno`` variable:"
msgstr ""

#: ../../whatsnew/3.11.rst:1651
msgid "``Py_ADJUST_ERANGE1()``"
msgstr ""

#: ../../whatsnew/3.11.rst:1652
msgid "``Py_ADJUST_ERANGE2()``"
msgstr ""

#: ../../whatsnew/3.11.rst:1653
msgid "``Py_OVERFLOWED()``"
msgstr ""

#: ../../whatsnew/3.11.rst:1654
msgid "``Py_SET_ERANGE_IF_OVERFLOW()``"
msgstr ""

#: ../../whatsnew/3.11.rst:1655
msgid "``Py_SET_ERRNO_ON_MATH_ERROR()``"
msgstr ""

#: ../../whatsnew/3.11.rst:1657
msgid "(Contributed by Victor Stinner in :issue:`45412`.)"
msgstr ""

#: ../../whatsnew/3.11.rst:1659
msgid ""
"Remove ``Py_UNICODE_COPY()`` and ``Py_UNICODE_FILL()`` macros, deprecated"
" since Python 3.3. Use ``PyUnicode_CopyCharacters()`` or ``memcpy()`` "
"(``wchar_t*`` string), and ``PyUnicode_Fill()`` functions instead. "
"(Contributed by Victor Stinner in :issue:`41123`.)"
msgstr ""

#: ../../whatsnew/3.11.rst:1664
msgid ""
"Remove the ``pystrhex.h`` header file. It only contains private "
"functions. C extensions should only include the main ``<Python.h>`` "
"header file. (Contributed by Victor Stinner in :issue:`45434`.)"
msgstr ""

#: ../../whatsnew/3.11.rst:1668
msgid ""
"Remove the ``Py_FORCE_DOUBLE()`` macro. It was used by the "
"``Py_IS_INFINITY()`` macro. (Contributed by Victor Stinner in "
":issue:`45440`.)"
msgstr ""

#: ../../whatsnew/3.11.rst:1672
msgid ""
"The following items are no longer available when "
":c:macro:`Py_LIMITED_API` is defined:"
msgstr ""

#: ../../whatsnew/3.11.rst:1675
msgid ":c:func:`PyMarshal_WriteLongToFile`"
msgstr ""

#: ../../whatsnew/3.11.rst:1676
msgid ":c:func:`PyMarshal_WriteObjectToFile`"
msgstr ""

#: ../../whatsnew/3.11.rst:1677
msgid ":c:func:`PyMarshal_ReadObjectFromString`"
msgstr ""

#: ../../whatsnew/3.11.rst:1678
msgid ":c:func:`PyMarshal_WriteObjectToString`"
msgstr ""

#: ../../whatsnew/3.11.rst:1679
msgid "the ``Py_MARSHAL_VERSION`` macro"
msgstr ""

#: ../../whatsnew/3.11.rst:1681
msgid "These are not part of the :ref:`limited API <stable-abi-list>`."
msgstr ""

#: ../../whatsnew/3.11.rst:1683
msgid "(Contributed by Victor Stinner in :issue:`45474`.)"
msgstr ""

#: ../../whatsnew/3.11.rst:1685
msgid ""
"Exclude :c:func:`PyWeakref_GET_OBJECT` from the limited C API. It never "
"worked since the :c:type:`PyWeakReference` structure is opaque in the "
"limited C API. (Contributed by Victor Stinner in :issue:`35134`.)"
msgstr ""

#: ../../whatsnew/3.11.rst:1690
msgid ""
"Remove the ``PyHeapType_GET_MEMBERS()`` macro. It was exposed in the "
"public C API by mistake, it must only be used by Python internally. Use "
"the ``PyTypeObject.tp_members`` member instead. (Contributed by Victor "
"Stinner in :issue:`40170`.)"
msgstr ""

#: ../../whatsnew/3.11.rst:1695
msgid ""
"Remove the ``HAVE_PY_SET_53BIT_PRECISION`` macro (moved to the internal C"
" API). (Contributed by Victor Stinner in :issue:`45412`.)"
msgstr ""

#~ msgid ""
#~ "Remove the ``asyncore`` and ``asynchat`` "
#~ "modules, deprecated in Python 3.6: use"
#~ " the :mod:`asyncio` module instead. "
#~ "(Contributed by Victor Stinner in "
#~ ":issue:`28533`.)"
#~ msgstr ""

#~ msgid ""
#~ "Remove the ``smtpd`` module, deprecated "
#~ "in Python 3.6: the `aiosmtpd "
#~ "<https://aiosmtpd.readthedocs.io/>`__ module can be"
#~ " used instead, it is based on "
#~ "asyncio. (Contributed by Victor Stinner "
#~ "in :issue:`28533`.)"
#~ msgstr ""

#~ msgid ""
#~ "The build dependencies for :mod:`zlib`, "
#~ ":mod:`bz2`, and :mod:`lzma` are now "
#~ "detected by :program:`configure`. (Contributed "
#~ "by Christian Heimes in :issue:`45763`.)"
#~ msgstr ""

#~ msgid ""
#~ "Build dependencies for :mod:`dbm` are "
#~ "now detected by :program:`configure`. "
#~ "``libdb`` 3.x and 4.x are no "
#~ "longer supported. (Contributed by Christian"
#~ " Heimes in :issue:`45747`.)"
#~ msgstr ""

#~ msgid ""
#~ "Added a new :opcode:`CALL_METHOD_KW` opcode."
#~ "  Calls a method in a similar "
#~ "fashion as :opcode:`CALL_METHOD`, but also "
#~ "supports keyword arguments.  Works in "
#~ "tandem with :opcode:`LOAD_METHOD`."
#~ msgstr ""

#~ msgid "Removed ``COPY_DICT_WITHOUT_KEYS``."
#~ msgstr ""

#~ msgid ""
#~ "the undocumented ``Signature.from_callable`` and "
#~ "``Signature.from_function`` functions, deprecated "
#~ "since Python 3.5; use the "
#~ ":meth:`Signature.from_callable() "
#~ "<inspect.Signature.from_callable>` method instead."
#~ msgstr ""

#~ msgid ""
#~ "PEP-654: Exception Groups and ``except*``. "
#~ "(Contributed by Irit Katriel in "
#~ ":issue:`45292`.)"
#~ msgstr ""

#~ msgid ""
#~ "Replaced the three call instructions: "
#~ ":opcode:`CALL_FUNCTION`, :opcode:`CALL_FUNCTION_KW` and"
#~ " :opcode:`CALL_METHOD` with :opcode:`CALL_NO_KW`, "
#~ ":opcode:`CALL_KW` and :opcode:`PRECALL_METHOD`. This"
#~ " decouples the argument shifting for "
#~ "methods from the handling of keyword "
#~ "arguments and allows better specialization "
#~ "of calls."
#~ msgstr ""

#~ msgid ""
#~ "Added :opcode:`COPY`, which pushes the "
#~ "*i*-th item to the top of the "
#~ "stack. The item is not removed "
#~ "from its original location."
#~ msgstr ""

#~ msgid "Removed many old deprecated :mod:`unittest` features:"
#~ msgstr ""

#~ msgid ""
#~ ":class:`~unittest.TestCase` method aliases "
#~ "``failUnlessEqual``, ``failIfEqual``, ``failUnless``, "
#~ "``failIf``, ``failUnlessRaises``, "
#~ "``failUnlessAlmostEqual``, ``failIfAlmostEqual`` "
#~ "(deprecated in Python 3.1), ``assertEquals``,"
#~ " ``assertNotEquals``, ``assert_``, "
#~ "``assertAlmostEquals``, ``assertNotAlmostEquals``, "
#~ "``assertRegexpMatches``, ``assertRaisesRegexp`` "
#~ "(deprecated in Python 3.2), and "
#~ "``assertNotRegexpMatches`` (deprecated in Python "
#~ "3.5)."
#~ msgstr ""

#~ msgid ""
#~ "Undocumented and broken :class:`~unittest.TestCase`"
#~ " method ``assertDictContainsSubset`` (deprecated "
#~ "in Python 3.2)."
#~ msgstr ""

#~ msgid ""
#~ "Undocumented :meth:`<unittest.TestLoader.loadTestsFromModule>"
#~ " TestLoader.loadTestsFromModule` parameter "
#~ "*use_load_tests* (deprecated and ignored since"
#~ " Python 3.2)."
#~ msgstr ""

#~ msgid ""
#~ "An alias of the "
#~ ":class:`~unittest.TextTestResult` class: "
#~ "``_TextTestResult`` (deprecated in Python "
#~ "3.2)."
#~ msgstr ""

#~ msgid "(Contributed by Serhiy Storchaka in :issue:`45162`.)"
#~ msgstr ""

#~ msgid ""
#~ "Removed from the :mod:`configparser` module:"
#~ " the :class:`SafeConfigParser` class, the "
#~ ":attr:`filename` property of the "
#~ ":class:`ParsingError` class, the :meth:`readfp` "
#~ "method of the :class:`ConfigParser` class, "
#~ "deprecated since Python 3.2. (Contributed "
#~ "by Hugo van Kemenade in :issue:`45173`.)"
#~ msgstr ""

#~ msgid "Changes of the :c:type:`PyFrameObject` structure members:"
#~ msgstr ""

#~ msgid "``f_back``: changed, use :c:func:`PyFrame_GetBack`."
#~ msgstr ""

#~ msgid ""
#~ "``f_builtins``: removed, use "
#~ "``PyObject_GetAttrString(frame, \"f_builtins\")``."
#~ msgstr ""

#~ msgid ""
#~ "``f_globals``: removed, use "
#~ "``PyObject_GetAttrString(frame, \"f_globals\")``."
#~ msgstr ""

#~ msgid ""
#~ "``f_locals``: removed, use "
#~ "``PyObject_GetAttrString(frame, \"f_locals\")``."
#~ msgstr ""

#~ msgid ""
#~ "``f_lasti``: removed, use "
#~ "``PyObject_GetAttrString(frame, \"f_lasti\")``."
#~ msgstr ""

#~ msgid "``f_valuesstack``: removed."
#~ msgstr ""

#~ msgid "``f_stackdepth``: removed."
#~ msgstr ""

#~ msgid "``f_gen``: removed."
#~ msgstr ""

#~ msgid "``f_iblock``: removed."
#~ msgstr ""

#~ msgid "``f_state``: removed."
#~ msgstr ""

#~ msgid "``f_blockstack``: removed."
#~ msgstr ""

#~ msgid "``f_localsplus``: removed."
#~ msgstr ""

#~ msgid ""
#~ "Building Python now requires a C99 "
#~ "``<math.h>`` header file providing a "
#~ "``NAN`` constant, or the ``__builtin_nan()``"
#~ " built-in function. If a platform "
#~ "does not support Not-a-Number (NaN), the"
#~ " ``Py_NO_NAN`` macro can be defined "
#~ "in the ``pyconfig.h`` file. (Contributed "
#~ "by Victor Stinner in :issue:`46640`.)"
#~ msgstr ""

#~ msgid "Changes of the private :c:type:`PyFrameObject` structure members."
#~ msgstr ""

#~ msgid ""
#~ "While the documentation notes that the"
#~ " fields of ``PyFrameObject`` are subject"
#~ " to change at any time, they "
#~ "have been stable for a long time"
#~ " and were used in several popular "
#~ "extensions. In Python 3.11, the frame"
#~ " struct was reorganized to allow "
#~ "performance optimizations. Rather than reading"
#~ " the fields directly, extensions should "
#~ "use functions:"
#~ msgstr ""

#~ msgid ""
#~ "``f_code``: removed, use :c:func:`PyFrame_GetCode`"
#~ " instead. Warning: the function returns "
#~ "a :term:`strong reference`, need to call"
#~ " :c:func:`Py_DECREF`."
#~ msgstr ""

#~ msgid "``f_back``: changed (see below), use :c:func:`PyFrame_GetBack`."
#~ msgstr ""

#~ msgid ""
#~ "``f_builtins``: removed, use "
#~ "``PyObject_GetAttrString((PyObject*)frame, \"f_builtins\")``."
#~ msgstr ""

#~ msgid ""
#~ "``f_globals``: removed, use "
#~ "``PyObject_GetAttrString((PyObject*)frame, \"f_globals\")``."
#~ msgstr ""

#~ msgid ""
#~ "``f_locals``: removed, use "
#~ "``PyObject_GetAttrString((PyObject*)frame, \"f_locals\")``."
#~ msgstr ""

#~ msgid ""
#~ "``f_lasti``: removed, use "
#~ "``PyObject_GetAttrString((PyObject*)frame, \"f_lasti\")``."
#~ msgstr ""

#~ msgid ""
#~ "The following fields were removed "
#~ "entirely, as they were details of "
#~ "the old implementation:"
#~ msgstr ""

#~ msgid "``f_valuesstack``"
#~ msgstr ""

#~ msgid "``f_stackdepth``"
#~ msgstr ""

#~ msgid "``f_gen``"
#~ msgstr ""

#~ msgid "``f_iblock``"
#~ msgstr ""

#~ msgid "``f_state``"
#~ msgstr ""

#~ msgid "``f_blockstack``"
#~ msgstr ""

#~ msgid "``f_localsplus``"
#~ msgstr ""

#~ msgid ""
#~ "Or use `the pythoncapi_compat project "
#~ "<https://github.com/pythoncapi/pythoncapi_compat>`__ to "
#~ "get these APIs on older Python "
#~ "versions."
#~ msgstr ""

#~ msgid ""
#~ "Or use `the pythoncapi_compat project "
#~ "<https://github.com/pythoncapi/pythoncapi_compat>`__ to "
#~ "get these functions on old Python "
#~ "functions."
#~ msgstr ""

#~ msgid ""
#~ "PEP-654: Exception Groups and ``except*``. "
#~ "(Contributed by Irit Katriel in "
#~ ":issue:`45292`.) PEP-673: ``Self`` Type. "
#~ "(Contributed by James Hilton-Balfe and"
#~ " Pradeep Kumar in :issue:`30924`.)"
#~ msgstr ""

#~ msgid "Exceptions can be enriched with a string ``__note__``"
#~ msgstr ""

#~ msgid ""
#~ "The ``__note__`` field was added to "
#~ ":exc:`BaseException`. It is ``None`` by "
#~ "default but can be set to a "
#~ "string which is added to the "
#~ "exception's traceback. (Contributed by Irit"
#~ " Katriel in :issue:`45607`.)"
#~ msgstr ""

#~ msgid ""
#~ "``siphash13`` is added as a new "
#~ "internal hashing algorithms. It's has "
#~ "similar security properties as ``siphash24``"
#~ " but it is slightly faster for "
#~ "long inputs. ``str``, ``bytes``, and "
#~ "some other types now use it as "
#~ "default algorithm for ``hash()``. :pep:`552`"
#~ " hash-based pyc files now use "
#~ "``siphash13``, too. (Contributed by Inada "
#~ "Naoki in :issue:`29410`.)"
#~ msgstr ""

#~ msgid ""
#~ "A new command line option for the"
#~ " Windows installer ``AppendPath`` has beend"
#~ " added. It behaves similiar to "
#~ "``PrependPath`` but appends the install "
#~ "and scripts directories instead of "
#~ "prepending it. (Contributed by Bastian "
#~ "Neuburger in :issue:`44934`.)"
#~ msgstr ""

#~ msgid "None yet."
#~ msgstr ""

#~ msgid ""
#~ "Method calls with keywords are now "
#~ "faster due to bytecode changes which "
#~ "avoid creating bound method instances. "
#~ "Previously, this optimization was applied "
#~ "only to method calls with purely "
#~ "positional arguments. (Contributed by Ken "
#~ "Jin and Mark Shannon in :issue:`26110`,"
#~ " based on ideas implemented in PyPy.)"
#~ msgstr ""

#~ msgid ""
#~ "Add :opcode:`POP_JUMP_IF_NOT_NONE` and "
#~ ":opcode:`POP_JUMP_IF_NONE` opcodes to speed up"
#~ " conditional jumps."
#~ msgstr ""

#~ msgid ":opcode:`JUMP_IF_NOT_EXC_MATCH` no longer pops the active exception."
#~ msgstr ""

#~ msgid ""
#~ "Build dependencies, compiler flags, and "
#~ "linker flags for most stdlib extension"
#~ " modules are now detected by "
#~ ":program:`configure`. libffi, libnsl, libsqlite3,"
#~ " zlib, bzip2, liblzma, libcrypt, and "
#~ "uuid flags are detected by ``pkg-"
#~ "config`` (when available). (Contributed by "
#~ "Christian Heimes and Erlend Egeberg "
#~ "Aasland in :issue:`bpo-45847`, :issue:`45747`, "
#~ "and :issue:`45763`.)"
#~ msgstr ""

#~ msgid ""
#~ "The non-limited API files "
#~ "``cellobject.h``, ``classobject.h``, ``context.h``, "
#~ "``funcobject.h``, ``genobject.h`` and "
#~ "``longintrepr.h`` have been moved to the"
#~ " ``Include/cpython`` directory. Moreover, the "
#~ "``eval.h`` header file was removed. "
#~ "These files must not be included "
#~ "directly, as they are already included"
#~ " in ``Python.h``: :ref:`Include Files "
#~ "<api-includes>`. If they have been "
#~ "included directly, consider including "
#~ "``Python.h`` instead. (Contributed by Victor"
#~ " Stinner in :issue:`35134`.)"
#~ msgstr ""

#~ msgid ""
#~ "The :c:type:`PyFrameObject` structure member "
#~ "has been moved to the internal C"
#~ " API headers."
#~ msgstr ""

#~ msgid ""
#~ "``f_builtins``: use "
#~ "``PyObject_GetAttrString((PyObject*)frame, \"f_builtins\")``."
#~ msgstr ""

#~ msgid ""
#~ "``f_globals``: use "
#~ "``PyObject_GetAttrString((PyObject*)frame, \"f_globals\")``."
#~ msgstr ""

#~ msgid ""
#~ "``f_lasti``: use "
#~ "``PyObject_GetAttrString((PyObject*)frame, \"f_lasti\")``. "
#~ "Code using ``f_lasti`` with "
#~ "``PyCode_Addr2Line()`` must use "
#~ ":c:func:`PyFrame_GetLineNumber` instead."
#~ msgstr ""

#~ msgid ""
#~ "``f_locals``: use "
#~ "``PyObject_GetAttrString((PyObject*)frame, \"f_locals\")``."
#~ msgstr ""

#~ msgid ""
#~ "``f_trace_lines``: use "
#~ "``PyObject_GetAttrString((PyObject*)frame, \"f_trace_lines\")``"
#~ " (it also be modified)."
#~ msgstr ""

#~ msgid ""
#~ "``f_trace_opcodes``: use "
#~ "``PyObject_GetAttrString((PyObject*)frame, "
#~ "\"f_trace_opcodes\")`` (it also be modified)."
#~ msgstr ""

