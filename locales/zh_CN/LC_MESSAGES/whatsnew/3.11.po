# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2022, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2022.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.12\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-10-12 09:44+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.10.3\n"

#: ../../whatsnew/3.11.rst:3
msgid "What's New In Python 3.11"
msgstr ""

#: ../../whatsnew/3.11.rst
msgid "Release"
msgstr ""

#: ../../whatsnew/3.11.rst:5
msgid "|release|"
msgstr ""

#: ../../whatsnew/3.11.rst
msgid "Date"
msgstr ""

#: ../../whatsnew/3.11.rst:6
msgid "|today|"
msgstr ""

#: ../../whatsnew/3.11.rst:48
msgid "This article explains the new features in Python 3.11, compared to 3.10."
msgstr ""

#: ../../whatsnew/3.11.rst:50
msgid "For full details, see the :ref:`changelog <changelog>`."
msgstr ""

#: ../../whatsnew/3.11.rst:56
msgid "Summary -- Release highlights"
msgstr ""

#: ../../whatsnew/3.11.rst:61
#, python-format
msgid ""
"Python 3.11 is between 10-60% faster than Python 3.10. On average, we "
"measured a 1.25x speedup on the standard benchmark suite. See `Faster "
"CPython`_ for details."
msgstr ""

#: ../../whatsnew/3.11.rst:66
msgid "New syntax features:"
msgstr ""

#: ../../whatsnew/3.11.rst:68
msgid ":pep:`654`: Exception Groups and ``except*``."
msgstr ""

#: ../../whatsnew/3.11.rst:70
msgid "New built-in features:"
msgstr ""

#: ../../whatsnew/3.11.rst:72
msgid ":pep:`678`: Enriching Exceptions with Notes."
msgstr ""

#: ../../whatsnew/3.11.rst:74
msgid "New standard library modules:"
msgstr ""

#: ../../whatsnew/3.11.rst:76
msgid ""
":pep:`680`: ``tomllib`` — Support for Parsing TOML in the Standard "
"Library."
msgstr ""

#: ../../whatsnew/3.11.rst:78
msgid "Interpreter improvements:"
msgstr ""

#: ../../whatsnew/3.11.rst:80
msgid ":pep:`657`: Include Fine Grained Error Locations in Tracebacks."
msgstr ""

#: ../../whatsnew/3.11.rst:81
msgid ""
"New :option:`-P` command line option and :envvar:`PYTHONSAFEPATH` "
"environment variable to disable automatically prepending a potentially "
"unsafe path (the working dir or script directory, depending on "
"invocation) to :data:`sys.path`."
msgstr ""

#: ../../whatsnew/3.11.rst:86
msgid "New typing features:"
msgstr ""

#: ../../whatsnew/3.11.rst:88
msgid ":pep:`646`: Variadic generics."
msgstr ""

#: ../../whatsnew/3.11.rst:89
msgid ""
":pep:`655`: Marking individual TypedDict items as required or potentially"
" missing."
msgstr ""

#: ../../whatsnew/3.11.rst:90
msgid ":pep:`673`: ``Self`` type."
msgstr ""

#: ../../whatsnew/3.11.rst:91
msgid ":pep:`675`: Arbitrary literal string type."
msgstr ""

#: ../../whatsnew/3.11.rst:92
msgid ":pep:`681`: Data Class Transforms."
msgstr ""

#: ../../whatsnew/3.11.rst:94
msgid "Important deprecations, removals or restrictions:"
msgstr ""

#: ../../whatsnew/3.11.rst:96
msgid ":pep:`594`: Removing dead batteries from the standard library."
msgstr ""

#: ../../whatsnew/3.11.rst:97
msgid ":pep:`624`: Remove ``Py_UNICODE`` encoder APIs."
msgstr ""

#: ../../whatsnew/3.11.rst:98
msgid ":pep:`670`: Convert macros to functions in the Python C API."
msgstr ""

#: ../../whatsnew/3.11.rst:104 ../../whatsnew/3.11.rst:1822
msgid "New Features"
msgstr ""

#: ../../whatsnew/3.11.rst:109
msgid "PEP 657: Enhanced error locations in tracebacks"
msgstr ""

#: ../../whatsnew/3.11.rst:111
msgid ""
"When printing tracebacks, the interpreter will now point to the exact "
"expression that caused the error, instead of just the line. For example:"
msgstr ""

#: ../../whatsnew/3.11.rst:125
msgid ""
"Previous versions of the interpreter would point to just the line, making"
" it ambiguous which object was ``None``. These enhanced errors can also "
"be helpful when dealing with deeply nested :class:`dict` objects and "
"multiple function calls:"
msgstr ""

#: ../../whatsnew/3.11.rst:145
msgid "As well as complex arithmetic expressions:"
msgstr ""

#: ../../whatsnew/3.11.rst:155
msgid ""
"Additionally, the information used by the enhanced traceback feature is "
"made available via a general API, that can be used to correlate "
":term:`bytecode` :ref:`instructions <bytecodes>` with source code "
"location. This information can be retrieved using:"
msgstr ""

#: ../../whatsnew/3.11.rst:160
msgid "The :meth:`codeobject.co_positions` method in Python."
msgstr ""

#: ../../whatsnew/3.11.rst:161
msgid "The :c:func:`PyCode_Addr2Location` function in the C API."
msgstr ""

#: ../../whatsnew/3.11.rst:163
msgid ""
"See :pep:`657` for more details. (Contributed by Pablo Galindo, Batuhan "
"Taskaya and Ammar Askar in :issue:`43950`.)"
msgstr ""

#: ../../whatsnew/3.11.rst:167
msgid ""
"This feature requires storing column positions in :ref:`codeobjects`, "
"which may result in a small increase in interpreter memory usage and disk"
" usage for compiled Python files. To avoid storing the extra information "
"and deactivate printing the extra traceback information, use the "
":option:`-X no_debug_ranges <-X>` command line option or the "
":envvar:`PYTHONNODEBUGRANGES` environment variable."
msgstr ""

#: ../../whatsnew/3.11.rst:179
msgid "PEP 654: Exception Groups and ``except*``"
msgstr ""

#: ../../whatsnew/3.11.rst:181
msgid ""
":pep:`654` introduces language features that enable a program to raise "
"and handle multiple unrelated exceptions simultaneously. The builtin "
"types :exc:`ExceptionGroup` and :exc:`BaseExceptionGroup` make it "
"possible to group exceptions and raise them together, and the new "
":keyword:`except* <except_star>` syntax generalizes :keyword:`except` to "
"match subgroups of exception groups."
msgstr ""

#: ../../whatsnew/3.11.rst:188
msgid "See :pep:`654` for more details."
msgstr ""

#: ../../whatsnew/3.11.rst:190
msgid ""
"(Contributed by Irit Katriel in :issue:`45292`. PEP written by Irit "
"Katriel, Yury Selivanov and Guido van Rossum.)"
msgstr ""

#: ../../whatsnew/3.11.rst:197
msgid "PEP 678: Exceptions can be enriched with notes"
msgstr ""

#: ../../whatsnew/3.11.rst:199
msgid ""
"The :meth:`~BaseException.add_note` method is added to "
":exc:`BaseException`. It can be used to enrich exceptions with context "
"information that is not available at the time when the exception is "
"raised. The added notes appear in the default traceback."
msgstr ""

#: ../../whatsnew/3.11.rst:204
msgid "See :pep:`678` for more details."
msgstr ""

#: ../../whatsnew/3.11.rst:206
msgid ""
"(Contributed by Irit Katriel in :issue:`45607`. PEP written by Zac "
"Hatfield-Dodds.)"
msgstr ""

#: ../../whatsnew/3.11.rst:213
msgid "Windows ``py.exe`` launcher improvements"
msgstr ""

#: ../../whatsnew/3.11.rst:215
msgid ""
"The copy of the :ref:`launcher` included with Python 3.11 has been "
"significantly updated. It now supports company/tag syntax as defined in "
":pep:`514` using the ``-V:<company>/<tag>`` argument instead of the "
"limited ``-<major>.<minor>``. This allows launching distributions other "
"than ``PythonCore``, the one hosted on `python.org "
"<https://python.org>`_."
msgstr ""

#: ../../whatsnew/3.11.rst:221
msgid ""
"When using ``-V:`` selectors, either company or tag can be omitted, but "
"all installs will be searched. For example, ``-V:OtherPython/`` will "
"select the \"best\" tag registered for ``OtherPython``, while ``-V:3.11``"
" or ``-V:/3.11`` will select the \"best\" distribution with tag ``3.11``."
msgstr ""

#: ../../whatsnew/3.11.rst:226
msgid ""
"When using the legacy ``-<major>``, ``-<major>.<minor>``, "
"``-<major>-<bitness>`` or ``-<major>.<minor>-<bitness>`` arguments, all "
"existing behaviour should be preserved from past versions, and only "
"releases from ``PythonCore`` will be selected. However, the ``-64`` "
"suffix now implies \"not 32-bit\" (not necessarily x86-64), as there are "
"multiple supported 64-bit platforms. 32-bit runtimes are detected by "
"checking the runtime's tag for a ``-32`` suffix. All releases of Python "
"since 3.5 have included this in their 32-bit builds."
msgstr ""

#: ../../whatsnew/3.11.rst:240
msgid "New Features Related to Type Hints"
msgstr ""

#: ../../whatsnew/3.11.rst:242
msgid ""
"This section covers major changes affecting :pep:`484` type hints and the"
" :mod:`typing` module."
msgstr ""

#: ../../whatsnew/3.11.rst:249
msgid "PEP 646: Variadic generics"
msgstr ""

#: ../../whatsnew/3.11.rst:251
msgid ""
":pep:`484` previously introduced :data:`~typing.TypeVar`, enabling "
"creation of generics parameterised with a single type. :pep:`646` adds "
":data:`~typing.TypeVarTuple`, enabling parameterisation with an "
"*arbitrary* number of types. In other words, a "
":data:`~typing.TypeVarTuple` is a *variadic* type variable, enabling "
"*variadic* generics."
msgstr ""

#: ../../whatsnew/3.11.rst:258
msgid ""
"This enables a wide variety of use cases. In particular, it allows the "
"type of array-like structures in numerical computing libraries such as "
"NumPy and TensorFlow to be parameterised with the array *shape*. Static "
"type checkers will now be able to catch shape-related bugs in code that "
"uses these libraries."
msgstr ""

#: ../../whatsnew/3.11.rst:264
msgid "See :pep:`646` for more details."
msgstr ""

#: ../../whatsnew/3.11.rst:266
msgid ""
"(Contributed by Matthew Rahtz in :issue:`43224`, with contributions by "
"Serhiy Storchaka and Jelle Zijlstra. PEP written by Mark Mendoza, Matthew"
" Rahtz, Pradeep Kumar Srinivasan, and Vincent Siles.)"
msgstr ""

#: ../../whatsnew/3.11.rst:274
msgid ""
"PEP 655: Marking individual ``TypedDict`` items as required or not-"
"required"
msgstr ""

#: ../../whatsnew/3.11.rst:276
msgid ""
":data:`~typing.Required` and :data:`~typing.NotRequired` provide a "
"straightforward way to mark whether individual items in a "
":class:`~typing.TypedDict` must be present. Previously, this was only "
"possible using inheritance."
msgstr ""

#: ../../whatsnew/3.11.rst:281
msgid ""
"All fields are still required by default, unless the *total* parameter is"
" set to ``False``, in which case all fields are still not-required by "
"default. For example, the following specifies a :class:`!TypedDict` with "
"one required and one not-required key::"
msgstr ""

#: ../../whatsnew/3.11.rst:295
msgid "The following definition is equivalent::"
msgstr ""

#: ../../whatsnew/3.11.rst:301
msgid "See :pep:`655` for more details."
msgstr ""

#: ../../whatsnew/3.11.rst:303
msgid ""
"(Contributed by David Foster and Jelle Zijlstra in :issue:`47087`. PEP "
"written by David Foster.)"
msgstr ""

#: ../../whatsnew/3.11.rst:310
msgid "PEP 673: ``Self`` type"
msgstr ""

#: ../../whatsnew/3.11.rst:312
msgid ""
"The new :data:`~typing.Self` annotation provides a simple and intuitive "
"way to annotate methods that return an instance of their class. This "
"behaves the same as the :class:`~typing.TypeVar`-based approach "
":pep:`specified in PEP 484 <484#annotating-instance-and-class-methods>`, "
"but is more concise and easier to follow."
msgstr ""

#: ../../whatsnew/3.11.rst:318
msgid ""
"Common use cases include alternative constructors provided as "
":func:`classmethod <classmethod>`\\s, and :meth:`~object.__enter__` "
"methods that return ``self``::"
msgstr ""

#: ../../whatsnew/3.11.rst:336
msgid ""
":data:`~typing.Self` can also be used to annotate method parameters or "
"attributes of the same type as their enclosing class."
msgstr ""

#: ../../whatsnew/3.11.rst:339
msgid "See :pep:`673` for more details."
msgstr ""

#: ../../whatsnew/3.11.rst:341
msgid ""
"(Contributed by James Hilton-Balfe in :issue:`46534`. PEP written by "
"Pradeep Kumar Srinivasan and James Hilton-Balfe.)"
msgstr ""

#: ../../whatsnew/3.11.rst:348
msgid "PEP 675: Arbitrary literal string type"
msgstr ""

#: ../../whatsnew/3.11.rst:350
msgid ""
"The new :data:`~typing.LiteralString` annotation may be used to indicate "
"that a function parameter can be of any literal string type. This allows "
"a function to accept arbitrary literal string types, as well as strings "
"created from other literal strings. Type checkers can then enforce that "
"sensitive functions, such as those that execute SQL statements or shell "
"commands, are called only with static arguments, providing protection "
"against injection attacks."
msgstr ""

#: ../../whatsnew/3.11.rst:358
msgid "For example, a SQL query function could be annotated as follows::"
msgstr ""

#: ../../whatsnew/3.11.rst:376
msgid "See :pep:`675` for more details."
msgstr ""

#: ../../whatsnew/3.11.rst:378
msgid ""
"(Contributed by Jelle Zijlstra in :issue:`47088`. PEP written by Pradeep "
"Kumar Srinivasan and Graham Bleaney.)"
msgstr ""

#: ../../whatsnew/3.11.rst:385
msgid "PEP 681: Data Class Transforms"
msgstr ""

#: ../../whatsnew/3.11.rst:387
msgid ""
":data:`~typing.dataclass_transform` may be used to decorate a class, "
"metaclass, or a function that is itself a decorator. The presence of "
"``@dataclass_transform()`` tells a static type checker that the decorated"
" object performs runtime \"magic\" that transforms a class, giving it "
":func:`dataclass <dataclasses.dataclass>`-like behaviors."
msgstr ""

#: ../../whatsnew/3.11.rst:393
msgid "For example::"
msgstr ""

#: ../../whatsnew/3.11.rst:411
msgid "See :pep:`681` for more details."
msgstr ""

#: ../../whatsnew/3.11.rst:413
msgid ""
"(Contributed by Jelle Zijlstra in :gh:`91860`. PEP written by Erik De "
"Bonte and Eric Traut.)"
msgstr ""

#: ../../whatsnew/3.11.rst:420
msgid "PEP 563 may not be the future"
msgstr ""

#: ../../whatsnew/3.11.rst:422
msgid ""
":pep:`563` Postponed Evaluation of Annotations (the ``from __future__ "
"import annotations`` :ref:`future statement <future>`) that was "
"originally planned for release in Python 3.10 has been put on hold "
"indefinitely. See `this message from the Steering Council "
"<https://mail.python.org/archives/list/python-"
"dev@python.org/message/VIZEBX5EYMSYIJNDBF6DMUMZOCWHARSO/>`__ for more "
"information."
msgstr ""

#: ../../whatsnew/3.11.rst:433
msgid "Other Language Changes"
msgstr ""

#: ../../whatsnew/3.11.rst:435
msgid ""
"Starred unpacking expressions can now be used in :keyword:`for` "
"statements. (See :issue:`46725` for more details.)"
msgstr ""

#: ../../whatsnew/3.11.rst:438
msgid ""
"Asynchronous :ref:`comprehensions <comprehensions>` are now allowed "
"inside comprehensions in :ref:`asynchronous functions <async def>`. Outer"
" comprehensions implicitly become asynchronous in this case. (Contributed"
" by Serhiy Storchaka in :issue:`33346`.)"
msgstr ""

#: ../../whatsnew/3.11.rst:443
msgid ""
"A :exc:`TypeError` is now raised instead of an :exc:`AttributeError` in "
":keyword:`with` statements and :meth:`contextlib.ExitStack.enter_context`"
" for objects that do not support the :term:`context manager` protocol, "
"and in :keyword:`async with` statements and "
":meth:`contextlib.AsyncExitStack.enter_async_context` for objects not "
"supporting the :term:`asynchronous context manager` protocol. "
"(Contributed by Serhiy Storchaka in :issue:`12022` and :issue:`44471`.)"
msgstr ""

#: ../../whatsnew/3.11.rst:451
msgid ""
"Added :meth:`object.__getstate__`, which provides the default "
"implementation of the :meth:`!__getstate__` method. :mod:`copy`\\ing and "
":mod:`pickle`\\ing instances of subclasses of builtin types "
":class:`bytearray`, :class:`set`, :class:`frozenset`, "
":class:`collections.OrderedDict`, :class:`collections.deque`, "
":class:`weakref.WeakSet`, and :class:`datetime.tzinfo` now copies and "
"pickles instance attributes implemented as :term:`slots <__slots__>`. "
"(Contributed by Serhiy Storchaka in :issue:`26579`.)"
msgstr ""

#: ../../whatsnew/3.11.rst:460
msgid ""
"Added a :option:`-P` command line option and a :envvar:`PYTHONSAFEPATH` "
"environment variable, which disable the automatic prepending to "
":data:`sys.path` of the script's directory when running a script, or the "
"current directory when using :option:`-c` and :option:`-m`. This ensures "
"only stdlib and installed modules are picked up by :keyword:`import`, and"
" avoids unintentionally or maliciously shadowing modules with those in a "
"local (and typically user-writable) directory. (Contributed by Victor "
"Stinner in :gh:`57684`.)"
msgstr ""

#: ../../whatsnew/3.11.rst:471
msgid ""
"A ``\"z\"`` option was added to the :ref:`formatspec` that coerces "
"negative to positive zero after rounding to the format precision. See "
":pep:`682` for more details. (Contributed by John Belmonte in "
":gh:`90153`.)"
msgstr ""

#: ../../whatsnew/3.11.rst:476
msgid ""
"Bytes are no longer accepted on :data:`sys.path`.  Support broke sometime"
" between Python 3.2 and 3.6, with no one noticing until after Python "
"3.10.0 was released. In addition, bringing back support would be "
"problematic due to interactions between :option:`-b` and "
":data:`sys.path_importer_cache` when there is a mixture of :class:`str` "
"and :class:`bytes` keys. (Contributed by Thomas Grainger in :gh:`91181`.)"
msgstr ""

#: ../../whatsnew/3.11.rst:487
msgid "Other CPython Implementation Changes"
msgstr ""

#: ../../whatsnew/3.11.rst:489
msgid ""
"The special methods :meth:`~object.__complex__` for :class:`complex` and "
":meth:`~object.__bytes__` for :class:`bytes` are implemented to support "
"the :class:`typing.SupportsComplex` and :class:`typing.SupportsBytes` "
"protocols. (Contributed by Mark Dickinson and Dong-hee Na in "
":issue:`24234`.)"
msgstr ""

#: ../../whatsnew/3.11.rst:494
msgid ""
"``siphash13`` is added as a new internal hashing algorithm. It has "
"similar security properties as ``siphash24``, but it is slightly faster "
"for long inputs. :class:`str`, :class:`bytes`, and some other types now "
"use it as the default algorithm for :func:`hash`. :pep:`552` :ref:`hash-"
"based .pyc files <pyc-invalidation>` now use ``siphash13`` too. "
"(Contributed by Inada Naoki in :issue:`29410`.)"
msgstr ""

#: ../../whatsnew/3.11.rst:503
msgid ""
"When an active exception is re-raised by a :keyword:`raise` statement "
"with no parameters, the traceback attached to this exception is now "
"always ``sys.exc_info()[1].__traceback__``. This means that changes made "
"to the traceback in the current :keyword:`except` clause are reflected in"
" the re-raised exception. (Contributed by Irit Katriel in "
":issue:`45711`.)"
msgstr ""

#: ../../whatsnew/3.11.rst:509
msgid ""
"The interpreter state's representation of handled exceptions (aka "
"``exc_info`` or ``_PyErr_StackItem``) now only has the ``exc_value`` "
"field; ``exc_type`` and ``exc_traceback`` have been removed, as they can "
"be derived from ``exc_value``. (Contributed by Irit Katriel in "
":issue:`45711`.)"
msgstr ""

#: ../../whatsnew/3.11.rst:515
msgid ""
"A new :ref:`command line option <install-quiet-option>`, ``AppendPath``, "
"has been added for the Windows installer. It behaves similarly to "
"``PrependPath``, but appends the install and scripts directories instead "
"of prepending them. (Contributed by Bastian Neuburger in :issue:`44934`.)"
msgstr ""

#: ../../whatsnew/3.11.rst:521
msgid ""
"The :c:member:`PyConfig.module_search_paths_set` field must now be set to"
" ``1`` for initialization to use :c:member:`PyConfig.module_search_paths`"
" to initialize :data:`sys.path`. Otherwise, initialization will "
"recalculate the path and replace any values added to "
"``module_search_paths``."
msgstr ""

#: ../../whatsnew/3.11.rst:526
msgid ""
"The output of the :option:`--help` option now fits in 50 lines/80 "
"columns. Information about :ref:`Python environment variables <using-on-"
"envvars>` and :option:`-X` options is now available using the respective "
":option:`--help-env` and :option:`--help-xoptions` flags, and with the "
"new :option:`--help-all`. (Contributed by Éric Araujo in :issue:`46142`.)"
msgstr ""

#: ../../whatsnew/3.11.rst:537
msgid "New Modules"
msgstr ""

#: ../../whatsnew/3.11.rst:539
msgid ""
":mod:`tomllib`: For parsing `TOML <https://toml.io/>`_. See :pep:`680` "
"for more details. (Contributed by Taneli Hukkinen in :issue:`40059`.)"
msgstr ""

#: ../../whatsnew/3.11.rst:543
msgid ""
":mod:`wsgiref.types`: :pep:`WSGI <3333>`-specific types for static type "
"checking. (Contributed by Sebastian Rittau in :issue:`42012`.)"
msgstr ""

#: ../../whatsnew/3.11.rst:549
msgid "Improved Modules"
msgstr ""

#: ../../whatsnew/3.11.rst:554
msgid "asyncio"
msgstr ""

#: ../../whatsnew/3.11.rst:556
msgid ""
"Added the :class:`~asyncio.TaskGroup` class, an :ref:`asynchronous "
"context manager <async-context-managers>` holding a group of tasks that "
"will wait for all of them upon exit. For new code this is recommended "
"over using :func:`~asyncio.create_task` and :func:`~asyncio.gather` "
"directly. (Contributed by Yury Selivanov and others in :gh:`90908`.)"
msgstr ""

#: ../../whatsnew/3.11.rst:563
msgid ""
"Added :func:`~asyncio.timeout`, an asynchronous context manager for "
"setting a timeout on asynchronous operations. For new code this is "
"recommended over using :func:`~asyncio.wait_for` directly. (Contributed "
"by Andrew Svetlov in :gh:`90927`.)"
msgstr ""

#: ../../whatsnew/3.11.rst:568
msgid ""
"Added the :class:`~asyncio.Runner` class, which exposes the machinery "
"used by :func:`~asyncio.run`. (Contributed by Andrew Svetlov in "
":gh:`91218`.)"
msgstr ""

#: ../../whatsnew/3.11.rst:572
msgid ""
"Added the :class:`~asyncio.Barrier` class to the synchronization "
"primitives in the asyncio library, and the related "
":exc:`~asyncio.BrokenBarrierError` exception. (Contributed by Yves Duprat"
" and Andrew Svetlov in :gh:`87518`.)"
msgstr ""

#: ../../whatsnew/3.11.rst:577
msgid ""
"Added keyword argument *all_errors* to "
":meth:`asyncio.loop.create_connection` so that multiple connection errors"
" can be raised as an :exc:`ExceptionGroup`."
msgstr ""

#: ../../whatsnew/3.11.rst:580
msgid ""
"Added the :meth:`asyncio.StreamWriter.start_tls` method for upgrading "
"existing stream-based connections to TLS. (Contributed by Ian Good in "
":issue:`34975`.)"
msgstr ""

#: ../../whatsnew/3.11.rst:584
msgid ""
"Added raw datagram socket functions to the event loop: "
":meth:`~asyncio.loop.sock_sendto`, :meth:`~asyncio.loop.sock_recvfrom` "
"and :meth:`~asyncio.loop.sock_recvfrom_into`. These have implementations "
"in :class:`~asyncio.SelectorEventLoop` and "
":class:`~asyncio.ProactorEventLoop`. (Contributed by Alex Grönholm in "
":issue:`46805`.)"
msgstr ""

#: ../../whatsnew/3.11.rst:592
msgid ""
"Added :meth:`~asyncio.Task.cancelling` and :meth:`~asyncio.Task.uncancel`"
" methods to :class:`~asyncio.Task`. These are primarily intended for "
"internal use, notably by :class:`~asyncio.TaskGroup`."
msgstr ""

#: ../../whatsnew/3.11.rst:598
msgid "contextlib"
msgstr ""

#: ../../whatsnew/3.11.rst:600
msgid ""
"Added non parallel-safe :func:`~contextlib.chdir` context manager to "
"change the current working directory and then restore it on exit. Simple "
"wrapper around :func:`~os.chdir`. (Contributed by Filipe Laíns in "
":issue:`25625`)"
msgstr ""

#: ../../whatsnew/3.11.rst:605
msgid "dataclasses"
msgstr ""

#: ../../whatsnew/3.11.rst:607
msgid ""
"Change field default mutability check, allowing only defaults which are "
":term:`hashable` instead of any object which is not an instance of "
":class:`dict`, :class:`list` or :class:`set`. (Contributed by Eric V. "
"Smith in :issue:`44674`.)"
msgstr ""

#: ../../whatsnew/3.11.rst:613
msgid "datetime"
msgstr ""

#: ../../whatsnew/3.11.rst:615
msgid ""
"Add :attr:`datetime.UTC`, a convenience alias for "
":attr:`datetime.timezone.utc`. (Contributed by Kabir Kwatra in "
":gh:`91973`.)"
msgstr ""

#: ../../whatsnew/3.11.rst:617
msgid ""
":meth:`datetime.date.fromisoformat`, :meth:`datetime.time.fromisoformat` "
"and :meth:`datetime.datetime.fromisoformat` can now be used to parse most"
" ISO 8601 formats (barring only those that support fractional hours and "
"minutes). (Contributed by Paul Ganssle in :gh:`80010`.)"
msgstr ""

#: ../../whatsnew/3.11.rst:623
msgid "enum"
msgstr ""

#: ../../whatsnew/3.11.rst:625
msgid "``EnumMeta`` renamed to ``EnumType`` (``EnumMeta`` kept as alias)."
msgstr ""

#: ../../whatsnew/3.11.rst:627
msgid "``StrEnum`` added -- enum members are and must be strings."
msgstr ""

#: ../../whatsnew/3.11.rst:629
msgid ""
"``ReprEnum`` added -- causes only the ``__repr__`` to be modified, not "
"the ``__str__`` nor the ``__format__``."
msgstr ""

#: ../../whatsnew/3.11.rst:632
msgid ""
"``FlagBoundary`` added -- controls behavior when invalid values are given"
" to a flag."
msgstr ""

#: ../../whatsnew/3.11.rst:635
msgid "``EnumCheck`` added -- used by ``verify`` to ensure various constraints."
msgstr ""

#: ../../whatsnew/3.11.rst:637
msgid "``verify`` added -- function to ensure given ``EnumCheck`` constraints."
msgstr ""

#: ../../whatsnew/3.11.rst:639
msgid ""
"``member`` added -- decorator to ensure given object is converted to an "
"enum member."
msgstr ""

#: ../../whatsnew/3.11.rst:642
msgid ""
"``nonmember`` added -- decorator to ensure given object is not converted "
"to an enum member."
msgstr ""

#: ../../whatsnew/3.11.rst:645
msgid "``property`` added -- use instead of ``types.DynamicClassAttribute``."
msgstr ""

#: ../../whatsnew/3.11.rst:647
msgid ""
"``global_enum`` added -- enum decorator to adjust ``__repr__`` and "
"``__str__`` to show members in the global context -- see ``re.RegexFlag``"
" for an example."
msgstr ""

#: ../../whatsnew/3.11.rst:650
msgid ""
"``Flag`` enhancements: members support length,  iteration, and "
"containment checks."
msgstr ""

#: ../../whatsnew/3.11.rst:653
msgid ""
"``Enum``/``Flag`` fixes: members are now defined before "
"``__init_subclass__`` is called; ``dir()`` now includes methods, etc., "
"from mixed-in data types."
msgstr ""

#: ../../whatsnew/3.11.rst:656
msgid ""
"``Flag`` fixes: only primary values (power of two) are considered "
"canonical while composite values (3, 6, 10, etc.) are considered aliases;"
"  inverted flags are coerced to their positive equivalent."
msgstr ""

#: ../../whatsnew/3.11.rst:660
msgid ""
"``IntEnum`` / ``IntFlag`` / ``StrEnum`` fixes: these now inherit from "
"``ReprEnum`` so the ``str()`` output now matches ``format()`` output, "
"which is the data types' (so both ``str(AnIntEnum.ONE)`` and "
"``format(AnIntEnum.ONE)`` is equal to ``'1'``)."
msgstr ""

#: ../../whatsnew/3.11.rst:666
msgid "fractions"
msgstr ""

#: ../../whatsnew/3.11.rst:668
msgid ""
"Support :PEP:`515`-style initialization of :class:`~fractions.Fraction` "
"from string.  (Contributed by Sergey B Kirpichev in :issue:`44258`.)"
msgstr ""

#: ../../whatsnew/3.11.rst:671
msgid ""
":class:`~fractions.Fraction` now implements an ``__int__`` method, so "
"that an ``isinstance(some_fraction, typing.SupportsInt)`` check passes. "
"(Contributed by Mark Dickinson in :issue:`44547`.)"
msgstr ""

#: ../../whatsnew/3.11.rst:676
msgid "functools"
msgstr ""

#: ../../whatsnew/3.11.rst:678
msgid ""
":func:`functools.singledispatch` now supports :data:`types.UnionType` and"
" :data:`typing.Union` as annotations to the dispatch argument.::"
msgstr ""

#: ../../whatsnew/3.11.rst:703
msgid "(Contributed by Yurii Karabas in :issue:`46014`.)"
msgstr ""

#: ../../whatsnew/3.11.rst:706
msgid "hashlib"
msgstr ""

#: ../../whatsnew/3.11.rst:708
msgid ""
":func:`hashlib.blake2b` and :func:`hashlib.blake2s` now prefer `libb2`_ "
"over Python's vendored copy. (Contributed by Christian Heimes in "
":issue:`47095`.)"
msgstr ""

#: ../../whatsnew/3.11.rst:712
msgid ""
"The internal ``_sha3`` module with SHA3 and SHAKE algorithms now uses "
"*tiny_sha3* instead of the *Keccak Code Package* to reduce code and "
"binary size. The :mod:`hashlib` module prefers optimized SHA3 and SHAKE "
"implementations from OpenSSL. The change affects only installations "
"without OpenSSL support. (Contributed by Christian Heimes in "
":issue:`47098`.)"
msgstr ""

#: ../../whatsnew/3.11.rst:719
msgid ""
"Add :func:`hashlib.file_digest`, a helper function for efficient hashing "
"of files or file-like objects. (Contributed by Christian Heimes in "
":gh:`89313`.)"
msgstr ""

#: ../../whatsnew/3.11.rst:724
msgid "IDLE and idlelib"
msgstr ""

#: ../../whatsnew/3.11.rst:726
msgid ""
"Apply syntax highlighting to ``.pyi`` files. (Contributed by Alex Waygood"
" and Terry Jan Reedy in :issue:`45447`.)"
msgstr ""

#: ../../whatsnew/3.11.rst:729
msgid ""
"Include prompts when saving Shell with inputs and outputs. (Contributed "
"by Terry Jan Reedy in :gh:`95191`.)"
msgstr ""

#: ../../whatsnew/3.11.rst:733
msgid "inspect"
msgstr ""

#: ../../whatsnew/3.11.rst:734
msgid ""
"Add :func:`inspect.getmembers_static`: return all members without "
"triggering dynamic lookup via the descriptor protocol. (Contributed by "
"Weipeng Hong in :issue:`30533`.)"
msgstr ""

#: ../../whatsnew/3.11.rst:738
msgid ""
"Add :func:`inspect.ismethodwrapper` for checking if the type of an object"
" is a :class:`~types.MethodWrapperType`. (Contributed by Hakan Çelik in "
":issue:`29418`.)"
msgstr ""

#: ../../whatsnew/3.11.rst:741
msgid ""
"Change the frame-related functions in the :mod:`inspect` module to return"
" a regular object (that is backwards compatible with the old tuple-like "
"interface) that include the extended :pep:`657` position information (end"
" line number, column and end column). The affected functions are: "
":func:`inspect.getframeinfo`, :func:`inspect.getouterframes`, "
":func:`inspect.getinnerframes`, :func:`inspect.stack` and "
":func:`inspect.trace`. (Contributed by Pablo Galindo in :gh:`88116`.)"
msgstr ""

#: ../../whatsnew/3.11.rst:750
msgid "locale"
msgstr ""

#: ../../whatsnew/3.11.rst:752
msgid ""
"Add :func:`locale.getencoding` to get the current locale encoding. It is "
"similar to ``locale.getpreferredencoding(False)`` but ignores the "
":ref:`Python UTF-8 Mode <utf8-mode>`."
msgstr ""

#: ../../whatsnew/3.11.rst:757
msgid "math"
msgstr ""

#: ../../whatsnew/3.11.rst:759
msgid ""
"Add :func:`math.exp2`: return 2 raised to the power of x. (Contributed by"
" Gideon Mitchell in :issue:`45917`.)"
msgstr ""

#: ../../whatsnew/3.11.rst:762
msgid ""
"Add :func:`math.cbrt`: return the cube root of x. (Contributed by Ajith "
"Ramachandran in :issue:`44357`.)"
msgstr ""

#: ../../whatsnew/3.11.rst:765
msgid ""
"The behaviour of two :func:`math.pow` corner cases was changed, for "
"consistency with the IEEE 754 specification. The operations "
"``math.pow(0.0, -math.inf)`` and ``math.pow(-0.0, -math.inf)`` now return"
" ``inf``. Previously they raised :exc:`ValueError`. (Contributed by Mark "
"Dickinson in :issue:`44339`.)"
msgstr ""

#: ../../whatsnew/3.11.rst:771
msgid ""
"The :data:`math.nan` value is now always available. (Contributed by "
"Victor Stinner in :issue:`46917`.)"
msgstr ""

#: ../../whatsnew/3.11.rst:776
msgid "operator"
msgstr ""

#: ../../whatsnew/3.11.rst:778
msgid ""
"A new function ``operator.call`` has been added, such that "
"``operator.call(obj, *args, **kwargs) == obj(*args, **kwargs)``. "
"(Contributed by Antony Lee in :issue:`44019`.)"
msgstr ""

#: ../../whatsnew/3.11.rst:784
msgid "os"
msgstr ""

#: ../../whatsnew/3.11.rst:786
msgid ""
"On Windows, :func:`os.urandom` now uses ``BCryptGenRandom()``, instead of"
" ``CryptGenRandom()`` which is deprecated. (Contributed by Dong-hee Na in"
" :issue:`44611`.)"
msgstr ""

#: ../../whatsnew/3.11.rst:792
msgid "pathlib"
msgstr ""

#: ../../whatsnew/3.11.rst:794
msgid ""
":meth:`~pathlib.Path.glob` and :meth:`~pathlib.Path.rglob` return only "
"directories if *pattern* ends with a pathname components separator: "
":data:`~os.sep` or :data:`~os.altsep`. (Contributed by Eisuke Kawasima in"
" :issue:`22276` and :issue:`33392`.)"
msgstr ""

#: ../../whatsnew/3.11.rst:800
msgid "re"
msgstr ""

#: ../../whatsnew/3.11.rst:802
msgid ""
"Atomic grouping (``(?>...)``) and possessive quantifiers (``*+``, ``++``,"
" ``?+``, ``{m,n}+``) are now supported in regular expressions. "
"(Contributed by Jeffrey C. Jacobs and Serhiy Storchaka in "
":issue:`433030`.)"
msgstr ""

#: ../../whatsnew/3.11.rst:807
msgid "shutil"
msgstr ""

#: ../../whatsnew/3.11.rst:809
msgid ""
"Add optional parameter *dir_fd* in :func:`shutil.rmtree`. (Contributed by"
" Serhiy Storchaka in :issue:`46245`.)"
msgstr ""

#: ../../whatsnew/3.11.rst:814
msgid "socket"
msgstr ""

#: ../../whatsnew/3.11.rst:816
msgid ""
"Add CAN Socket support for NetBSD. (Contributed by Thomas Klausner in "
":issue:`30512`.)"
msgstr ""

#: ../../whatsnew/3.11.rst:819
msgid ""
":meth:`~socket.create_connection` has an option to raise, in case of "
"failure to connect, an :exc:`ExceptionGroup` containing all errors "
"instead of only raising the last error. (Contributed by Irit Katriel in "
":issue:`29980`.)"
msgstr ""

#: ../../whatsnew/3.11.rst:825
msgid "sqlite3"
msgstr ""

#: ../../whatsnew/3.11.rst:827
msgid ""
"You can now disable the authorizer by passing :const:`None` to "
":meth:`~sqlite3.Connection.set_authorizer`. (Contributed by Erlend E. "
"Aasland in :issue:`44491`.)"
msgstr ""

#: ../../whatsnew/3.11.rst:831
msgid ""
"Collation name :meth:`~sqlite3.Connection.create_collation` can now "
"contain any Unicode character.  Collation names with invalid characters "
"now raise :exc:`UnicodeEncodeError` instead of "
":exc:`sqlite3.ProgrammingError`. (Contributed by Erlend E. Aasland in "
":issue:`44688`.)"
msgstr ""

#: ../../whatsnew/3.11.rst:836
msgid ""
":mod:`sqlite3` exceptions now include the SQLite extended error code as "
":attr:`~sqlite3.Error.sqlite_errorcode` and the SQLite error name as "
":attr:`~sqlite3.Error.sqlite_errorname`. (Contributed by Aviv Palivoda, "
"Daniel Shahaf, and Erlend E. Aasland in :issue:`16379` and "
":issue:`24139`.)"
msgstr ""

#: ../../whatsnew/3.11.rst:842
msgid ""
"Add :meth:`~sqlite3.Connection.setlimit` and "
":meth:`~sqlite3.Connection.getlimit` to :class:`sqlite3.Connection` for "
"setting and getting SQLite limits by connection basis. (Contributed by "
"Erlend E. Aasland in :issue:`45243`.)"
msgstr ""

#: ../../whatsnew/3.11.rst:847
msgid ""
":mod:`sqlite3` now sets :attr:`sqlite3.threadsafety` based on the default"
" threading mode the underlying SQLite library has been compiled with. "
"(Contributed by Erlend E. Aasland in :issue:`45613`.)"
msgstr ""

#: ../../whatsnew/3.11.rst:851
msgid ""
":mod:`sqlite3` C callbacks now use unraisable exceptions if callback "
"tracebacks are enabled. Users can now register an :func:`unraisable hook "
"handler <sys.unraisablehook>` to improve their debug experience. "
"(Contributed by Erlend E. Aasland in :issue:`45828`.)"
msgstr ""

#: ../../whatsnew/3.11.rst:857
msgid ""
"Fetch across rollback no longer raises :exc:`~sqlite3.InterfaceError`. "
"Instead we leave it to the SQLite library to handle these cases. "
"(Contributed by Erlend E. Aasland in :issue:`44092`.)"
msgstr ""

#: ../../whatsnew/3.11.rst:861
msgid ""
"Add :meth:`~sqlite3.Connection.serialize` and "
":meth:`~sqlite3.Connection.deserialize` to :class:`sqlite3.Connection` "
"for serializing and deserializing databases. (Contributed by Erlend E. "
"Aasland in :issue:`41930`.)"
msgstr ""

#: ../../whatsnew/3.11.rst:866
msgid ""
"Add :meth:`~sqlite3.Connection.create_window_function` to "
":class:`sqlite3.Connection` for creating aggregate window functions. "
"(Contributed by Erlend E. Aasland in :issue:`34916`.)"
msgstr ""

#: ../../whatsnew/3.11.rst:870
msgid ""
"Add :meth:`~sqlite3.Connection.blobopen` to :class:`sqlite3.Connection`. "
":class:`sqlite3.Blob` allows incremental I/O operations on blobs. "
"(Contributed by Aviv Palivoda and Erlend E. Aasland in :issue:`24905`.)"
msgstr ""

#: ../../whatsnew/3.11.rst:876
msgid "sys"
msgstr ""

#: ../../whatsnew/3.11.rst:878
msgid ""
":func:`sys.exc_info` now derives the ``type`` and ``traceback`` fields "
"from the ``value`` (the exception instance), so when an exception is "
"modified while it is being handled, the changes are reflected in the "
"results of subsequent calls to :func:`exc_info`. (Contributed by Irit "
"Katriel in :issue:`45711`.)"
msgstr ""

#: ../../whatsnew/3.11.rst:884
msgid ""
"Add :func:`sys.exception` which returns the active exception instance "
"(equivalent to ``sys.exc_info()[1]``). (Contributed by Irit Katriel in "
":issue:`46328`.)"
msgstr ""

#: ../../whatsnew/3.11.rst:888
msgid ""
"Add the :data:`sys.flags.safe_path <sys.flags>` flag. (Contributed by "
"Victor Stinner in :gh:`57684`.)"
msgstr ""

#: ../../whatsnew/3.11.rst:893
msgid "sysconfig"
msgstr ""

#: ../../whatsnew/3.11.rst:895
msgid ""
"Three new :ref:`installation schemes <installation_paths>` (*posix_venv*,"
" *nt_venv* and *venv*) were added and are used when Python creates new "
"virtual environments or when it is running from a virtual environment. "
"The first two schemes (*posix_venv* and *nt_venv*) are OS-specific for "
"non-Windows and Windows, the *venv* is essentially an alias to one of "
"them according to the OS Python runs on. This is useful for downstream "
"distributors who modify :func:`sysconfig.get_preferred_scheme`. Third "
"party code that creates new virtual environments should use the new "
"*venv* installation scheme to determine the paths, as does :mod:`venv`. "
"(Contributed by Miro Hrončok in :issue:`45413`.)"
msgstr ""

#: ../../whatsnew/3.11.rst:910
msgid "threading"
msgstr ""

#: ../../whatsnew/3.11.rst:912
msgid ""
"On Unix, if the ``sem_clockwait()`` function is available in the C "
"library (glibc 2.30 and newer), the :meth:`threading.Lock.acquire` method"
" now uses the monotonic clock (:data:`time.CLOCK_MONOTONIC`) for the "
"timeout, rather than using the system clock "
"(:data:`time.CLOCK_REALTIME`), to not be affected by system clock "
"changes. (Contributed by Victor Stinner in :issue:`41710`.)"
msgstr ""

#: ../../whatsnew/3.11.rst:921
msgid "time"
msgstr ""

#: ../../whatsnew/3.11.rst:923
msgid ""
"On Unix, :func:`time.sleep` now uses the ``clock_nanosleep()`` or "
"``nanosleep()`` function, if available, which has a resolution of 1 "
"nanosecond (10\\ :sup:`-9` seconds), rather than using ``select()`` which"
" has a resolution of 1 microsecond (10\\ :sup:`-6` seconds). (Contributed"
" by Benjamin Szőke and Victor Stinner in :issue:`21302`.)"
msgstr ""

#: ../../whatsnew/3.11.rst:929
msgid ""
"On Windows 8.1 and newer, :func:`time.sleep` now uses a waitable timer "
"based on `high-resolution timers <https://docs.microsoft.com/en-us"
"/windows-hardware/drivers/kernel/high-resolution-timers>`_ which has a "
"resolution of 100 nanoseconds (10\\ :sup:`-7` seconds). Previously, it "
"had a resolution of 1 millisecond (10\\ :sup:`-3` seconds). (Contributed "
"by Benjamin Szőke, Dong-hee Na, Eryk Sun and Victor Stinner in "
":issue:`21302` and :issue:`45429`.)"
msgstr ""

#: ../../whatsnew/3.11.rst:938
msgid "traceback"
msgstr ""

#: ../../whatsnew/3.11.rst:940
msgid ""
"Add :func:`traceback.StackSummary.format_frame_summary` to allow users to"
" override which frames appear in the traceback, and how they are "
"formatted. (Contributed by Ammar Askar in :issue:`44569`.)"
msgstr ""

#: ../../whatsnew/3.11.rst:945
msgid ""
"Add :func:`traceback.TracebackException.print`, which prints the "
"formatted :exc:`~traceback.TracebackException` instance to a file. "
"(Contributed by Irit Katriel in :issue:`33809`.)"
msgstr ""

#: ../../whatsnew/3.11.rst:951
msgid "typing"
msgstr ""

#: ../../whatsnew/3.11.rst:953
msgid "For major changes, see :ref:`new-feat-related-type-hints-311`."
msgstr ""

#: ../../whatsnew/3.11.rst:955
msgid ""
"Add :func:`typing.assert_never` and :class:`typing.Never`. "
":func:`typing.assert_never` is useful for asking a type checker to "
"confirm that a line of code is not reachable. At runtime, it raises an "
":exc:`AssertionError`. (Contributed by Jelle Zijlstra in :gh:`90633`.)"
msgstr ""

#: ../../whatsnew/3.11.rst:961
msgid ""
"Add :func:`typing.reveal_type`. This is useful for asking a type checker "
"what type it has inferred for a given expression. At runtime it prints "
"the type of the received value. (Contributed by Jelle Zijlstra in "
":gh:`90572`.)"
msgstr ""

#: ../../whatsnew/3.11.rst:966
msgid ""
"Add :func:`typing.assert_type`. This is useful for asking a type checker "
"to confirm that the type it has inferred for a given expression matches "
"the given type. At runtime it simply returns the received value. "
"(Contributed by Jelle Zijlstra in :gh:`90638`.)"
msgstr ""

#: ../../whatsnew/3.11.rst:971
msgid ""
":data:`typing.TypedDict` types can now be generic. (Contributed by "
"Samodya Abeysiriwardane in :gh:`89026`.)"
msgstr ""

#: ../../whatsnew/3.11.rst:974
msgid ""
":class:`~typing.NamedTuple` types can now be generic. (Contributed by "
"Serhiy Storchaka in :issue:`43923`.)"
msgstr ""

#: ../../whatsnew/3.11.rst:977
msgid ""
"Allow subclassing of :class:`typing.Any`. This is useful for avoiding "
"type checker errors related to highly dynamic class, such as mocks. "
"(Contributed by Shantanu Jain in :gh:`91154`.)"
msgstr ""

#: ../../whatsnew/3.11.rst:981
msgid ""
"The :func:`typing.final` decorator now sets the ``__final__`` attributed "
"on the decorated object. (Contributed by Jelle Zijlstra in :gh:`90500`.)"
msgstr ""

#: ../../whatsnew/3.11.rst:985
msgid ""
"The :func:`typing.get_overloads` function can be used for introspecting "
"the overloads of a function. :func:`typing.clear_overloads` can be used "
"to clear all registered overloads of a function. (Contributed by Jelle "
"Zijlstra in :gh:`89263`.)"
msgstr ""

#: ../../whatsnew/3.11.rst:990
msgid ""
"The :meth:`__init__` method of :class:`~typing.Protocol` subclasses is "
"now preserved. (Contributed by Adrian Garcia Badarasco in :gh:`88970`.)"
msgstr ""

#: ../../whatsnew/3.11.rst:993
msgid ""
"The representation of empty tuple types (``Tuple[()]``) is simplified. "
"This affects introspection, e.g. ``get_args(Tuple[()])`` now evaluates to"
" ``()`` instead of ``((),)``. (Contributed by Serhiy Storchaka in "
":gh:`91137`.)"
msgstr ""

#: ../../whatsnew/3.11.rst:998
msgid ""
"Loosen runtime requirements for type annotations by removing the callable"
" check in the private ``typing._type_check`` function. (Contributed by "
"Gregory Beauregard in :gh:`90802`.)"
msgstr ""

#: ../../whatsnew/3.11.rst:1002
msgid ""
":func:`typing.get_type_hints` now supports evaluating strings as forward "
"references in :ref:`PEP 585 generic aliases <types-genericalias>`. "
"(Contributed by Niklas Rosenstein in :gh:`85542`.)"
msgstr ""

#: ../../whatsnew/3.11.rst:1006
msgid ""
":func:`typing.get_type_hints` no longer adds :data:`~typing.Optional` to "
"parameters with ``None`` as a default. (Contributed by Nikita Sobolev in "
":gh:`90353`.)"
msgstr ""

#: ../../whatsnew/3.11.rst:1010
msgid ""
":func:`typing.get_type_hints` now supports evaluating bare stringified "
":data:`~typing.ClassVar` annotations. (Contributed by Gregory Beauregard "
"in :gh:`90711`.)"
msgstr ""

#: ../../whatsnew/3.11.rst:1014
msgid ""
":func:`typing.no_type_check` no longer modifies external classes and "
"functions. It also now correctly marks classmethods as not to be type "
"checked. (Contributed by Nikita Sobolev in :gh:`90729`.)"
msgstr ""

#: ../../whatsnew/3.11.rst:1020
msgid "tkinter"
msgstr ""

#: ../../whatsnew/3.11.rst:1022
msgid ""
"Added method ``info_patchlevel()`` which returns the exact version of the"
" Tcl library as a named tuple similar to :data:`sys.version_info`. "
"(Contributed by Serhiy Storchaka in :gh:`91827`.)"
msgstr ""

#: ../../whatsnew/3.11.rst:1028
msgid "unicodedata"
msgstr ""

#: ../../whatsnew/3.11.rst:1030
msgid ""
"The Unicode database has been updated to version 14.0.0. (Contributed by"
"  Benjamin Peterson in :issue:`45190`)."
msgstr ""

#: ../../whatsnew/3.11.rst:1034
msgid "unittest"
msgstr ""

#: ../../whatsnew/3.11.rst:1036
msgid ""
"Added methods :meth:`~unittest.TestCase.enterContext` and "
":meth:`~unittest.TestCase.enterClassContext` of class "
":class:`~unittest.TestCase`, method "
":meth:`~unittest.IsolatedAsyncioTestCase.enterAsyncContext` of class "
":class:`~unittest.IsolatedAsyncioTestCase` and function "
":func:`unittest.enterModuleContext`. (Contributed by Serhiy Storchaka in "
":issue:`45046`.)"
msgstr ""

#: ../../whatsnew/3.11.rst:1046
msgid "venv"
msgstr ""

#: ../../whatsnew/3.11.rst:1048
msgid ""
"When new Python virtual environments are created, the *venv* "
":ref:`sysconfig installation scheme <installation_paths>` is used to "
"determine the paths inside the environment. When Python runs in a virtual"
" environment, the same installation scheme is the default. That means "
"that downstream distributors can change the default sysconfig install "
"scheme without changing behavior of virtual environments. Third party "
"code that also creates new virtual environments should do the same. "
"(Contributed by Miro Hrončok in :issue:`45413`.)"
msgstr ""

#: ../../whatsnew/3.11.rst:1059
msgid "warnings"
msgstr ""

#: ../../whatsnew/3.11.rst:1061
msgid ""
":func:`warnings.catch_warnings` now accepts arguments for "
":func:`warnings.simplefilter`, providing a more concise way to locally "
"ignore warnings or convert them to errors. (Contributed by Zac Hatfield-"
"Dodds in :issue:`47074`.)"
msgstr ""

#: ../../whatsnew/3.11.rst:1066
msgid "zipfile"
msgstr ""

#: ../../whatsnew/3.11.rst:1068
msgid ""
"Added support for specifying member name encoding for reading metadata in"
" the zipfile's directory and file headers. (Contributed by Stephen J. "
"Turnbull and Serhiy Storchaka in :issue:`28080`.)"
msgstr ""

#: ../../whatsnew/3.11.rst:1073
msgid "fcntl"
msgstr ""

#: ../../whatsnew/3.11.rst:1075
msgid ""
"On FreeBSD, the :attr:`F_DUP2FD` and :attr:`F_DUP2FD_CLOEXEC` flags "
"respectively are supported, the former equals to ``dup2`` usage while the"
" latter set the ``FD_CLOEXEC`` flag in addition."
msgstr ""

#: ../../whatsnew/3.11.rst:1081
msgid "Optimizations"
msgstr ""

#: ../../whatsnew/3.11.rst:1083
#, python-format
msgid ""
"Compiler now optimizes simple C-style formatting with literal format "
"containing only format codes ``%s``, ``%r`` and ``%a`` and makes it as "
"fast as corresponding f-string expression. (Contributed by Serhiy "
"Storchaka in :issue:`28307`.)"
msgstr ""

#: ../../whatsnew/3.11.rst:1088
msgid ""
"\"Zero-cost\" exceptions are implemented. The cost of ``try`` statements "
"is almost eliminated when no exception is raised. (Contributed by Mark "
"Shannon in :issue:`40222`.)"
msgstr ""

#: ../../whatsnew/3.11.rst:1092
msgid ""
"Pure ASCII strings are now normalized in constant time by "
":func:`unicodedata.normalize`. (Contributed by Dong-hee Na in "
":issue:`44987`.)"
msgstr ""

#: ../../whatsnew/3.11.rst:1095
msgid ""
":mod:`math` functions :func:`~math.comb` and :func:`~math.perm` are now "
"up to 10 times or more faster for large arguments (the speed up is larger"
" for larger *k*). (Contributed by Serhiy Storchaka in :issue:`37295`.)"
msgstr ""

#: ../../whatsnew/3.11.rst:1100
msgid ""
"Dict don't store hash value when all inserted keys are Unicode objects. "
"This reduces dict size. For example, "
"``sys.getsizeof(dict.fromkeys(\"abcdefg\"))`` becomes 272 bytes from 352 "
"bytes on 64bit platform. (Contributed by Inada Naoki in :issue:`46845`.)"
msgstr ""

#: ../../whatsnew/3.11.rst:1105
#, python-format
msgid ""
":mod:`re`'s regular expression matching engine has been partially "
"refactored, and now uses computed gotos (or \"threaded code\") on "
"supported platforms. As a result, Python 3.11 executes the `pyperformance"
" regular expression benchmarks "
"<https://pyperformance.readthedocs.io/benchmarks.html#regex-dna>`_ up to "
"10% faster than Python 3.10."
msgstr ""

#: ../../whatsnew/3.11.rst:1113
msgid "Faster CPython"
msgstr ""

#: ../../whatsnew/3.11.rst:1115
#, python-format
msgid ""
"CPython 3.11 is on average `25% faster <https://github.com/faster-"
"cpython/ideas#published-results>`_ than CPython 3.10 when measured with "
"the `pyperformance <https://github.com/python/pyperformance>`_ benchmark "
"suite, and compiled with GCC on Ubuntu Linux. Depending on your workload,"
" the speedup could be up to 10-60% faster."
msgstr ""

#: ../../whatsnew/3.11.rst:1121
msgid ""
"This project focuses on two major areas in Python: faster startup and "
"faster runtime. Other optimizations not under this project are listed in "
"`Optimizations`_."
msgstr ""

#: ../../whatsnew/3.11.rst:1125
msgid "Faster Startup"
msgstr ""

#: ../../whatsnew/3.11.rst:1128
msgid "Frozen imports / Static code objects"
msgstr ""

#: ../../whatsnew/3.11.rst:1130
msgid ""
"Python caches bytecode in the :ref:`__pycache__<tut-pycache>` directory "
"to speed up module loading."
msgstr ""

#: ../../whatsnew/3.11.rst:1133
msgid "Previously in 3.10, Python module execution looked like this:"
msgstr ""

#: ../../whatsnew/3.11.rst:1139
msgid ""
"In Python 3.11, the core modules essential for Python startup are "
"\"frozen\". This means that their code objects (and bytecode) are "
"statically allocated by the interpreter. This reduces the steps in module"
" execution process to this:"
msgstr ""

#: ../../whatsnew/3.11.rst:1147
#, python-format
msgid ""
"Interpreter startup is now 10-15% faster in Python 3.11. This has a big "
"impact for short-running programs using Python."
msgstr ""

#: ../../whatsnew/3.11.rst:1150
msgid ""
"(Contributed by Eric Snow, Guido van Rossum and Kumar Aditya in numerous "
"issues.)"
msgstr ""

#: ../../whatsnew/3.11.rst:1154
msgid "Faster Runtime"
msgstr ""

#: ../../whatsnew/3.11.rst:1157
msgid "Cheaper, lazy Python frames"
msgstr ""

#: ../../whatsnew/3.11.rst:1158
msgid ""
"Python frames are created whenever Python calls a Python function. This "
"frame holds execution information. The following are new frame "
"optimizations:"
msgstr ""

#: ../../whatsnew/3.11.rst:1161
msgid "Streamlined the frame creation process."
msgstr ""

#: ../../whatsnew/3.11.rst:1162
msgid ""
"Avoided memory allocation by generously re-using frame space on the C "
"stack."
msgstr ""

#: ../../whatsnew/3.11.rst:1163
msgid ""
"Streamlined the internal frame struct to contain only essential "
"information. Frames previously held extra debugging and memory management"
" information."
msgstr ""

#: ../../whatsnew/3.11.rst:1166
#, python-format
msgid ""
"Old-style frame objects are now created only when requested by debuggers "
"or by Python introspection functions such as ``sys._getframe`` or "
"``inspect.currentframe``. For most user code, no frame objects are "
"created at all. As a result, nearly all Python functions calls have sped "
"up significantly. We measured a 3-7% speedup in pyperformance."
msgstr ""

#: ../../whatsnew/3.11.rst:1172
msgid "(Contributed by Mark Shannon in :issue:`44590`.)"
msgstr ""

#: ../../whatsnew/3.11.rst:1177
msgid "Inlined Python function calls"
msgstr ""

#: ../../whatsnew/3.11.rst:1178
msgid ""
"During a Python function call, Python will call an evaluating C function "
"to interpret that function's code. This effectively limits pure Python "
"recursion to what's safe for the C stack."
msgstr ""

#: ../../whatsnew/3.11.rst:1182
msgid ""
"In 3.11, when CPython detects Python code calling another Python "
"function, it sets up a new frame, and \"jumps\" to the new code inside "
"the new frame. This avoids calling the C interpreting function "
"altogether."
msgstr ""

#: ../../whatsnew/3.11.rst:1186
#, python-format
msgid ""
"Most Python function calls now consume no C stack space. This speeds up "
"most of such calls. In simple recursive functions like fibonacci or "
"factorial, a 1.7x speedup was observed. This also means recursive "
"functions can recurse significantly deeper (if the user increases the "
"recursion limit). We measured a 1-3% improvement in pyperformance."
msgstr ""

#: ../../whatsnew/3.11.rst:1192
msgid "(Contributed by Pablo Galindo and Mark Shannon in :issue:`45256`.)"
msgstr ""

#: ../../whatsnew/3.11.rst:1195
msgid "PEP 659: Specializing Adaptive Interpreter"
msgstr ""

#: ../../whatsnew/3.11.rst:1196
msgid ""
":pep:`659` is one of the key parts of the faster CPython project. The "
"general idea is that while Python is a dynamic language, most code has "
"regions where objects and types rarely change. This concept is known as "
"*type stability*."
msgstr ""

#: ../../whatsnew/3.11.rst:1200
msgid ""
"At runtime, Python will try to look for common patterns and type "
"stability in the executing code. Python will then replace the current "
"operation with a more specialized one. This specialized operation uses "
"fast paths available only to those use cases/types, which generally "
"outperform their generic counterparts. This also brings in another "
"concept called *inline caching*, where Python caches the results of "
"expensive operations directly in the bytecode."
msgstr ""

#: ../../whatsnew/3.11.rst:1207
msgid ""
"The specializer will also combine certain common instruction pairs into "
"one superinstruction. This reduces the overhead during execution."
msgstr ""

#: ../../whatsnew/3.11.rst:1210
msgid ""
"Python will only specialize when it sees code that is \"hot\" (executed "
"multiple times). This prevents Python from wasting time for run-once "
"code. Python can also de-specialize when code is too dynamic or when the "
"use changes. Specialization is attempted periodically, and specialization"
" attempts are not too expensive. This allows specialization to adapt to "
"new circumstances."
msgstr ""

#: ../../whatsnew/3.11.rst:1217
msgid ""
"(PEP written by Mark Shannon, with ideas inspired by Stefan Brunthaler. "
"See :pep:`659` for more information. Implementation by Mark Shannon and "
"Brandt Bucher, with additional help from Irit Katriel and Dennis "
"Sweeney.)"
msgstr ""

#: ../../whatsnew/3.11.rst:1225
msgid "Operation"
msgstr ""

#: ../../whatsnew/3.11.rst:1225
msgid "Form"
msgstr ""

#: ../../whatsnew/3.11.rst:1225
msgid "Specialization"
msgstr ""

#: ../../whatsnew/3.11.rst:1225
msgid "Operation speedup (up to)"
msgstr ""

#: ../../whatsnew/3.11.rst:1225
msgid "Contributor(s)"
msgstr ""

#: ../../whatsnew/3.11.rst:1228
msgid "Binary operations"
msgstr ""

#: ../../whatsnew/3.11.rst:1228
msgid "``x+x; x*x; x-x;``"
msgstr ""

#: ../../whatsnew/3.11.rst:1228
msgid ""
"Binary add, multiply and subtract for common types such as ``int``, "
"``float``, and ``str`` take custom fast paths for their underlying types."
msgstr ""

#: ../../whatsnew/3.11.rst:1228
msgid "10%"
msgstr ""

#: ../../whatsnew/3.11.rst:1228
msgid "Mark Shannon, Dong-hee Na, Brandt Bucher, Dennis Sweeney"
msgstr ""

#: ../../whatsnew/3.11.rst:1233
msgid "Subscript"
msgstr ""

#: ../../whatsnew/3.11.rst:1233
msgid "``a[i]``"
msgstr ""

#: ../../whatsnew/3.11.rst:1233
msgid ""
"Subscripting container types such as ``list``, ``tuple`` and ``dict`` "
"directly index the underlying data structures."
msgstr ""

#: ../../whatsnew/3.11.rst:1237
msgid ""
"Subscripting custom ``__getitem__`` is also inlined similar to :ref"
":`inline-calls`."
msgstr ""

#: ../../whatsnew/3.11.rst:1233 ../../whatsnew/3.11.rst:1240
msgid "10-25%"
msgstr ""

#: ../../whatsnew/3.11.rst:1233
msgid "Irit Katriel, Mark Shannon"
msgstr ""

#: ../../whatsnew/3.11.rst:1240
msgid "Store subscript"
msgstr ""

#: ../../whatsnew/3.11.rst:1240
msgid "``a[i] = z``"
msgstr ""

#: ../../whatsnew/3.11.rst:1240
msgid "Similar to subscripting specialization above."
msgstr ""

#: ../../whatsnew/3.11.rst:1240
msgid "Dennis Sweeney"
msgstr ""

#: ../../whatsnew/3.11.rst:1243
msgid "Calls"
msgstr ""

#: ../../whatsnew/3.11.rst:1243
msgid "``f(arg)`` ``C(arg)``"
msgstr ""

#: ../../whatsnew/3.11.rst:1243
msgid ""
"Calls to common builtin (C) functions and types such as ``len`` and "
"``str`` directly call their underlying C version. This avoids going "
"through the internal calling convention."
msgstr ""

#: ../../whatsnew/3.11.rst:1243
msgid "20%"
msgstr ""

#: ../../whatsnew/3.11.rst:1243
msgid "Mark Shannon, Ken Jin"
msgstr ""

#: ../../whatsnew/3.11.rst:1249
msgid "Load global variable"
msgstr ""

#: ../../whatsnew/3.11.rst:1249
msgid "``print`` ``len``"
msgstr ""

#: ../../whatsnew/3.11.rst:1249
msgid ""
"The object's index in the globals/builtins namespace is cached. Loading "
"globals and builtins require zero namespace lookups."
msgstr ""

#: ../../whatsnew/3.11.rst:1249
msgid "[1]_"
msgstr ""

#: ../../whatsnew/3.11.rst:1249 ../../whatsnew/3.11.rst:1253
#: ../../whatsnew/3.11.rst:1262
msgid "Mark Shannon"
msgstr ""

#: ../../whatsnew/3.11.rst:1253
msgid "Load attribute"
msgstr ""

#: ../../whatsnew/3.11.rst:1253
msgid "``o.attr``"
msgstr ""

#: ../../whatsnew/3.11.rst:1253
msgid ""
"Similar to loading global variables. The attribute's index inside the "
"class/object's namespace is cached. In most cases, attribute loading will"
" require zero namespace lookups."
msgstr ""

#: ../../whatsnew/3.11.rst:1253
msgid "[2]_"
msgstr ""

#: ../../whatsnew/3.11.rst:1258
msgid "Load methods for call"
msgstr ""

#: ../../whatsnew/3.11.rst:1258
msgid "``o.meth()``"
msgstr ""

#: ../../whatsnew/3.11.rst:1258
msgid ""
"The actual address of the method is cached. Method loading now has no "
"namespace lookups -- even for classes with long inheritance chains."
msgstr ""

#: ../../whatsnew/3.11.rst:1258
msgid "10-20%"
msgstr ""

#: ../../whatsnew/3.11.rst:1258
msgid "Ken Jin, Mark Shannon"
msgstr ""

#: ../../whatsnew/3.11.rst:1262
msgid "Store attribute"
msgstr ""

#: ../../whatsnew/3.11.rst:1262
msgid "``o.attr = z``"
msgstr ""

#: ../../whatsnew/3.11.rst:1262
msgid "Similar to load attribute optimization."
msgstr ""

#: ../../whatsnew/3.11.rst:1262
#, python-format
msgid "2% in pyperformance"
msgstr ""

#: ../../whatsnew/3.11.rst:1265
msgid "Unpack Sequence"
msgstr ""

#: ../../whatsnew/3.11.rst:1265
msgid "``*seq``"
msgstr ""

#: ../../whatsnew/3.11.rst:1265
msgid ""
"Specialized for common containers such as ``list`` and ``tuple``. Avoids "
"internal calling convention."
msgstr ""

#: ../../whatsnew/3.11.rst:1265
msgid "8%"
msgstr ""

#: ../../whatsnew/3.11.rst:1265
msgid "Brandt Bucher"
msgstr ""

#: ../../whatsnew/3.11.rst:1269
msgid ""
"A similar optimization already existed since Python 3.8.  3.11 "
"specializes for more forms and reduces some overhead."
msgstr ""

#: ../../whatsnew/3.11.rst:1272
msgid ""
"A similar optimization already existed since Python 3.10. 3.11 "
"specializes for more forms. Furthermore, all attribute loads should be "
"sped up by :issue:`45947`."
msgstr ""

#: ../../whatsnew/3.11.rst:1278
msgid "Misc"
msgstr ""

#: ../../whatsnew/3.11.rst:1280
msgid ""
"Objects now require less memory due to lazily created object namespaces. "
"Their namespace dictionaries now also share keys more freely. "
"(Contributed Mark Shannon in :issue:`45340` and :issue:`40116`.)"
msgstr ""

#: ../../whatsnew/3.11.rst:1284
msgid ""
"A more concise representation of exceptions in the interpreter reduced "
"the time required for catching an exception by about 10%. (Contributed by"
" Irit Katriel in :issue:`45711`.)"
msgstr ""

#: ../../whatsnew/3.11.rst:1289
msgid "FAQ"
msgstr ""

#: ../../whatsnew/3.11.rst:1291
msgid "Q: How should I write my code to utilize these speedups?"
msgstr ""

#: ../../whatsnew/3.11.rst:1295
msgid ""
"A: You don't have to change your code. Write Pythonic code that follows "
"common best practices. The Faster CPython project optimizes for common "
"code patterns we observe."
msgstr ""

#: ../../whatsnew/3.11.rst:1298
msgid "Q: Will CPython 3.11 use more memory?"
msgstr ""

#: ../../whatsnew/3.11.rst:1302
msgid ""
"A: Maybe not. We don't expect memory use to exceed 20% more than 3.10. "
"This is offset by memory optimizations for frame objects and object "
"dictionaries as mentioned above."
msgstr ""

#: ../../whatsnew/3.11.rst:1305
msgid "Q: I don't see any speedups in my workload. Why?"
msgstr ""

#: ../../whatsnew/3.11.rst:1310
msgid ""
"A: Certain code won't have noticeable benefits. If your code spends most "
"of its time on I/O operations, or already does most of its computation in"
" a C extension library like numpy, there won't be significant speedup. "
"This project currently benefits pure-Python workloads the most."
msgstr ""

#: ../../whatsnew/3.11.rst:1314
msgid ""
"Furthermore, the pyperformance figures are a geometric mean. Even within "
"the pyperformance benchmarks, certain benchmarks have slowed down "
"slightly, while others have sped up by nearly 2x!"
msgstr ""

#: ../../whatsnew/3.11.rst:1317
msgid "Q: Is there a JIT compiler?"
msgstr ""

#: ../../whatsnew/3.11.rst:1319
msgid "A: No. We're still exploring other optimizations."
msgstr ""

#: ../../whatsnew/3.11.rst:1323
msgid "About"
msgstr ""

#: ../../whatsnew/3.11.rst:1325
msgid ""
"Faster CPython explores optimizations for :term:`CPython`. The main team "
"is funded by Microsoft to work on this full-time. Pablo Galindo Salgado "
"is also funded by Bloomberg LP to work on the project part-time. Finally,"
" many contributors are volunteers from the community."
msgstr ""

#: ../../whatsnew/3.11.rst:1332
msgid "CPython bytecode changes"
msgstr ""

#: ../../whatsnew/3.11.rst:1334
msgid ""
"The bytecode now contains inline cache entries, which take the form of "
":opcode:`CACHE` instructions. Many opcodes expect to be followed by an "
"exact number of caches, and instruct the interpreter to skip over them at"
" runtime. Populated caches can look like arbitrary instructions, so great"
" care should be taken when reading or modifying raw, adaptive bytecode "
"containing quickened data."
msgstr ""

#: ../../whatsnew/3.11.rst:1341
msgid ""
"Replaced all numeric ``BINARY_*`` and ``INPLACE_*`` instructions with a "
"single :opcode:`BINARY_OP` implementation."
msgstr ""

#: ../../whatsnew/3.11.rst:1344
msgid ""
"Replaced the three call instructions: :opcode:`CALL_FUNCTION`, "
":opcode:`CALL_FUNCTION_KW` and :opcode:`CALL_METHOD` with "
":opcode:`PUSH_NULL`, :opcode:`PRECALL`, :opcode:`CALL`, and "
":opcode:`KW_NAMES`. This decouples the argument shifting for methods from"
" the handling of keyword arguments and allows better specialization of "
"calls."
msgstr ""

#: ../../whatsnew/3.11.rst:1351
msgid "Removed ``COPY_DICT_WITHOUT_KEYS`` and ``GEN_START``."
msgstr ""

#: ../../whatsnew/3.11.rst:1353
msgid ""
":opcode:`MATCH_CLASS` and :opcode:`MATCH_KEYS` no longer push an "
"additional boolean value indicating whether the match succeeded or "
"failed. Instead, they indicate failure with :const:`None` (where a tuple "
"of extracted values would otherwise be)."
msgstr ""

#: ../../whatsnew/3.11.rst:1358
msgid ""
"Replace several stack manipulation instructions (``DUP_TOP``, "
"``DUP_TOP_TWO``, ``ROT_TWO``, ``ROT_THREE``, ``ROT_FOUR``, and ``ROT_N``)"
" with new :opcode:`COPY` and :opcode:`SWAP` instructions."
msgstr ""

#: ../../whatsnew/3.11.rst:1362
msgid ""
"Replaced :opcode:`JUMP_IF_NOT_EXC_MATCH` by :opcode:`CHECK_EXC_MATCH` "
"which performs the check but does not jump."
msgstr ""

#: ../../whatsnew/3.11.rst:1365
msgid ""
"Replaced :opcode:`JUMP_IF_NOT_EG_MATCH` by :opcode:`CHECK_EG_MATCH` which"
" performs the check but does not jump."
msgstr ""

#: ../../whatsnew/3.11.rst:1368
msgid "Replaced :opcode:`JUMP_ABSOLUTE` by the relative :opcode:`JUMP_BACKWARD`."
msgstr ""

#: ../../whatsnew/3.11.rst:1370
msgid ""
"Added :opcode:`JUMP_BACKWARD_NO_INTERRUPT`, which is used in certain "
"loops where it is undesirable to handle interrupts."
msgstr ""

#: ../../whatsnew/3.11.rst:1373
msgid ""
"Replaced :opcode:`POP_JUMP_IF_TRUE` and :opcode:`POP_JUMP_IF_FALSE` by "
"the relative :opcode:`POP_JUMP_FORWARD_IF_TRUE`, "
":opcode:`POP_JUMP_BACKWARD_IF_TRUE`, :opcode:`POP_JUMP_FORWARD_IF_FALSE` "
"and :opcode:`POP_JUMP_BACKWARD_IF_FALSE`."
msgstr ""

#: ../../whatsnew/3.11.rst:1377
msgid ""
"Added :opcode:`POP_JUMP_FORWARD_IF_NOT_NONE`, "
":opcode:`POP_JUMP_BACKWARD_IF_NOT_NONE`, "
":opcode:`POP_JUMP_FORWARD_IF_NONE` and "
":opcode:`POP_JUMP_BACKWARD_IF_NONE` opcodes to speed up conditional "
"jumps."
msgstr ""

#: ../../whatsnew/3.11.rst:1381
msgid ""
":opcode:`JUMP_IF_TRUE_OR_POP` and :opcode:`JUMP_IF_FALSE_OR_POP` are now "
"relative rather than absolute."
msgstr ""

#: ../../whatsnew/3.11.rst:1384
msgid ""
":opcode:`RESUME` has been added. It is a no-op. Performs internal "
"tracing, debugging and optimization checks."
msgstr ""

#: ../../whatsnew/3.11.rst:1388 ../../whatsnew/3.11.rst:2171
msgid "Deprecated"
msgstr ""

#: ../../whatsnew/3.11.rst:1390
msgid ""
"Chaining :class:`classmethod` descriptors (introduced in :issue:`19072`) "
"is now deprecated.  It can no longer be used to wrap other descriptors "
"such as :class:`property`.  The core design of this feature was flawed "
"and caused a number of downstream problems.  To \"pass-through\" a "
":class:`classmethod`, consider using the ``__wrapped__`` attribute that "
"was added in Python 3.10. (Contributed by Raymond Hettinger in "
":gh:`89519`.)"
msgstr ""

#: ../../whatsnew/3.11.rst:1398
msgid ""
"Octal escapes in string and bytes literals with value larger than "
"``0o377`` now produce :exc:`DeprecationWarning`. In a future Python "
"version they will be a :exc:`SyntaxWarning` and eventually a "
":exc:`SyntaxError`. (Contributed by Serhiy Storchaka in :gh:`81548`.)"
msgstr ""

#: ../../whatsnew/3.11.rst:1404
msgid ""
"The :mod:`lib2to3` package and ``2to3`` tool are now deprecated and may "
"not be able to parse Python 3.10 or newer. See the :pep:`617` (New PEG "
"parser for CPython).  (Contributed by Victor Stinner in :issue:`40360`.)"
msgstr ""

#: ../../whatsnew/3.11.rst:1408
msgid ""
"Undocumented modules ``sre_compile``, ``sre_constants`` and ``sre_parse``"
" are now deprecated. (Contributed by Serhiy Storchaka in :issue:`47152`.)"
msgstr ""

#: ../../whatsnew/3.11.rst:1412
msgid ""
":class:`webbrowser.MacOSX` is deprecated and will be removed in Python "
"3.13. It is untested and undocumented and also not used by webbrowser "
"itself. (Contributed by Dong-hee Na in :issue:`42255`.)"
msgstr ""

#: ../../whatsnew/3.11.rst:1416
msgid ""
"The behavior of returning a value from a :class:`~unittest.TestCase` and "
":class:`~unittest.IsolatedAsyncioTestCase` test methods (other than the "
"default ``None`` value), is now deprecated."
msgstr ""

#: ../../whatsnew/3.11.rst:1420
msgid ""
"Deprecated the following :mod:`unittest` functions, scheduled for removal"
" in Python 3.13:"
msgstr ""

#: ../../whatsnew/3.11.rst:1423
msgid ":func:`unittest.findTestCases`"
msgstr ""

#: ../../whatsnew/3.11.rst:1424
msgid ":func:`unittest.makeSuite`"
msgstr ""

#: ../../whatsnew/3.11.rst:1425
msgid ":func:`unittest.getTestCaseNames`"
msgstr ""

#: ../../whatsnew/3.11.rst:1427
msgid "Use :class:`~unittest.TestLoader` method instead:"
msgstr ""

#: ../../whatsnew/3.11.rst:1429
msgid ":meth:`unittest.TestLoader.loadTestsFromModule`"
msgstr ""

#: ../../whatsnew/3.11.rst:1430
msgid ":meth:`unittest.TestLoader.loadTestsFromTestCase`"
msgstr ""

#: ../../whatsnew/3.11.rst:1431
msgid ":meth:`unittest.TestLoader.getTestCaseNames`"
msgstr ""

#: ../../whatsnew/3.11.rst:1433
msgid "(Contributed by Erlend E. Aasland in :issue:`5846`.)"
msgstr ""

#: ../../whatsnew/3.11.rst:1435
msgid ""
"The :meth:`turtle.RawTurtle.settiltangle` is deprecated since Python 3.1,"
" it now emits a deprecation warning and will be removed in Python 3.13. "
"Use :meth:`turtle.RawTurtle.tiltangle` instead (it was earlier "
"incorrectly marked as deprecated, its docstring is now corrected). "
"(Contributed by Hugo van Kemenade in :issue:`45837`.)"
msgstr ""

#: ../../whatsnew/3.11.rst:1441
msgid ""
"The delegation of :func:`int` to :meth:`__trunc__` is now deprecated. "
"Calling ``int(a)`` when ``type(a)`` implements :meth:`__trunc__` but not "
":meth:`__int__` or :meth:`__index__` now raises a "
":exc:`DeprecationWarning`. (Contributed by Zackery Spytz in "
":issue:`44977`.)"
msgstr ""

#: ../../whatsnew/3.11.rst:1446
msgid ""
"The following have been deprecated in :mod:`configparser` since Python "
"3.2. Their deprecation warnings have now been updated to note they will "
"removed in Python 3.12:"
msgstr ""

#: ../../whatsnew/3.11.rst:1450
msgid "the :class:`configparser.SafeConfigParser` class"
msgstr ""

#: ../../whatsnew/3.11.rst:1451
msgid "the :attr:`configparser.ParsingError.filename` property"
msgstr ""

#: ../../whatsnew/3.11.rst:1452
msgid "the :meth:`configparser.RawConfigParser.readfp` method"
msgstr ""

#: ../../whatsnew/3.11.rst:1454
msgid "(Contributed by Hugo van Kemenade in :issue:`45173`.)"
msgstr ""

#: ../../whatsnew/3.11.rst:1456
msgid ""
":class:`configparser.LegacyInterpolation` has been deprecated in the "
"docstring since Python 3.2. It now emits a :exc:`DeprecationWarning` and "
"will be removed in Python 3.13. Use "
":class:`configparser.BasicInterpolation` or "
":class:`configparser.ExtendedInterpolation` instead. (Contributed by Hugo"
" van Kemenade in :issue:`46607`.)"
msgstr ""

#: ../../whatsnew/3.11.rst:1462
msgid ""
"The :func:`locale.getdefaultlocale` function is deprecated and will be "
"removed in Python 3.13. Use :func:`locale.setlocale`, "
":func:`locale.getpreferredencoding(False) <locale.getpreferredencoding>` "
"and :func:`locale.getlocale` functions instead. (Contributed by Victor "
"Stinner in :gh:`90817`.)"
msgstr ""

#: ../../whatsnew/3.11.rst:1468
msgid ""
"The :func:`locale.resetlocale` function is deprecated and will be removed"
" in Python 3.13. Use ``locale.setlocale(locale.LC_ALL, \"\")`` instead. "
"(Contributed by Victor Stinner in :gh:`90817`.)"
msgstr ""

#: ../../whatsnew/3.11.rst:1472
msgid ""
"The :mod:`asynchat`, :mod:`asyncore` and  :mod:`smtpd` modules have been "
"deprecated since at least Python 3.6. Their documentation and deprecation"
" warnings have now been updated to note they will removed in Python 3.12 "
"(:pep:`594`). (Contributed by Hugo van Kemenade in :issue:`47022`.)"
msgstr ""

#: ../../whatsnew/3.11.rst:1478
msgid ""
":pep:`594` led to the deprecations of the following modules which are "
"slated for removal in Python 3.13:"
msgstr ""

#: ../../whatsnew/3.11.rst:1481
msgid ":mod:`aifc`"
msgstr ""

#: ../../whatsnew/3.11.rst:1482
msgid ":mod:`audioop`"
msgstr ""

#: ../../whatsnew/3.11.rst:1483
msgid ":mod:`cgi`"
msgstr ""

#: ../../whatsnew/3.11.rst:1484
msgid ":mod:`cgitb`"
msgstr ""

#: ../../whatsnew/3.11.rst:1485
msgid ":mod:`chunk`"
msgstr ""

#: ../../whatsnew/3.11.rst:1486
msgid ":mod:`crypt`"
msgstr ""

#: ../../whatsnew/3.11.rst:1487
msgid ":mod:`imghdr`"
msgstr ""

#: ../../whatsnew/3.11.rst:1488
msgid ":mod:`mailcap`"
msgstr ""

#: ../../whatsnew/3.11.rst:1489
msgid ":mod:`msilib`"
msgstr ""

#: ../../whatsnew/3.11.rst:1490
msgid ":mod:`nis`"
msgstr ""

#: ../../whatsnew/3.11.rst:1491
msgid ":mod:`nntplib`"
msgstr ""

#: ../../whatsnew/3.11.rst:1492
msgid ":mod:`ossaudiodev`"
msgstr ""

#: ../../whatsnew/3.11.rst:1493
msgid ":mod:`pipes`"
msgstr ""

#: ../../whatsnew/3.11.rst:1494
msgid ":mod:`sndhdr`"
msgstr ""

#: ../../whatsnew/3.11.rst:1495
msgid ":mod:`spwd`"
msgstr ""

#: ../../whatsnew/3.11.rst:1496
msgid ":mod:`sunau`"
msgstr ""

#: ../../whatsnew/3.11.rst:1497
msgid ":mod:`telnetlib`"
msgstr ""

#: ../../whatsnew/3.11.rst:1498
msgid ":mod:`uu`"
msgstr ""

#: ../../whatsnew/3.11.rst:1499
msgid ":mod:`xdrlib`"
msgstr ""

#: ../../whatsnew/3.11.rst:1501
msgid ""
"(Contributed by Brett Cannon in :issue:`47061` and Victor Stinner in "
":gh:`68966`.)"
msgstr ""

#: ../../whatsnew/3.11.rst:1504
msgid ""
"More strict rules will be applied now applied for numerical group "
"references and group names in regular expressions in future Python "
"versions. Only sequence of ASCII digits will be now accepted as a "
"numerical reference. The group name in bytes patterns and replacement "
"strings could only contain ASCII letters and digits and underscore. For "
"now, a deprecation warning is raised for such syntax. (Contributed by "
"Serhiy Storchaka in :gh:`91760`.)"
msgstr ""

#: ../../whatsnew/3.11.rst:1512
msgid ""
":class:`typing.Text`, which exists solely to provide compatibility "
"support between Python 2 and Python 3 code, is now deprecated. Its "
"removal is currently unplanned, but users are encouraged to use "
":class:`str` instead wherever possible. (Contributed by Alex Waygood in "
":gh:`92332`.)"
msgstr ""

#: ../../whatsnew/3.11.rst:1518
msgid ""
"The keyword argument syntax for constructing :data:`~typing.TypedDict` "
"types is now deprecated. Support will be removed in Python 3.13. "
"(Contributed by Jingchen Ye in :gh:`90224`.)"
msgstr ""

#: ../../whatsnew/3.11.rst:1522
msgid ""
"The :func:`re.template` function and the corresponding "
":const:`re.TEMPLATE` and :const:`re.T` flags are deprecated, as they were"
" undocumented and lacked an obvious purpose. They will be removed in "
"Python 3.13. (Contributed by Serhiy Storchaka and Miro Hrončok in "
":gh:`92728`.)"
msgstr ""

#: ../../whatsnew/3.11.rst:1529
msgid "Pending Removal in Python 3.12"
msgstr ""

#: ../../whatsnew/3.11.rst:1531
msgid ""
"The following APIs have been deprecated in earlier Python releases, and "
"will be removed in Python 3.12."
msgstr ""

#: ../../whatsnew/3.11.rst:1534
msgid "Python API:"
msgstr ""

#: ../../whatsnew/3.11.rst:1536
msgid ":class:`pkgutil.ImpImporter`"
msgstr ""

#: ../../whatsnew/3.11.rst:1537
msgid ":class:`pkgutil.ImpLoader`"
msgstr ""

#: ../../whatsnew/3.11.rst:1538
msgid ":envvar:`PYTHONTHREADDEBUG`"
msgstr ""

#: ../../whatsnew/3.11.rst:1539
msgid ":func:`importlib.find_loader`"
msgstr ""

#: ../../whatsnew/3.11.rst:1540
msgid ":func:`importlib.util.module_for_loader`"
msgstr ""

#: ../../whatsnew/3.11.rst:1541
msgid ":func:`importlib.util.set_loader_wrapper`"
msgstr ""

#: ../../whatsnew/3.11.rst:1542
msgid ":func:`importlib.util.set_package_wrapper`"
msgstr ""

#: ../../whatsnew/3.11.rst:1543
msgid ":meth:`importlib.abc.Loader.module_repr`"
msgstr ""

#: ../../whatsnew/3.11.rst:1544
msgid ":meth:`importlib.abc.Loadermodule_repr`"
msgstr ""

#: ../../whatsnew/3.11.rst:1545 ../../whatsnew/3.11.rst:1546
msgid ":meth:`importlib.abc.MetaPathFinder.find_module`"
msgstr ""

#: ../../whatsnew/3.11.rst:1547
msgid ":meth:`importlib.abc.PathEntryFinder.find_loader`"
msgstr ""

#: ../../whatsnew/3.11.rst:1548
msgid ":meth:`importlib.abc.PathEntryFinder.find_module`"
msgstr ""

#: ../../whatsnew/3.11.rst:1549
msgid ":meth:`importlib.machinery.BuiltinImporter.find_module`"
msgstr ""

#: ../../whatsnew/3.11.rst:1550
msgid ":meth:`importlib.machinery.BuiltinLoader.module_repr`"
msgstr ""

#: ../../whatsnew/3.11.rst:1551
msgid ":meth:`importlib.machinery.FileFinder.find_loader`"
msgstr ""

#: ../../whatsnew/3.11.rst:1552
msgid ":meth:`importlib.machinery.FileFinder.find_module`"
msgstr ""

#: ../../whatsnew/3.11.rst:1553
msgid ":meth:`importlib.machinery.FrozenImporter.find_module`"
msgstr ""

#: ../../whatsnew/3.11.rst:1554
msgid ":meth:`importlib.machinery.FrozenLoader.module_repr`"
msgstr ""

#: ../../whatsnew/3.11.rst:1555
msgid ":meth:`importlib.machinery.PathFinder.find_module`"
msgstr ""

#: ../../whatsnew/3.11.rst:1556
msgid ":meth:`importlib.machinery.WindowsRegistryFinder.find_module`"
msgstr ""

#: ../../whatsnew/3.11.rst:1557
msgid ":meth:`pathlib.Path.link_to`"
msgstr ""

#: ../../whatsnew/3.11.rst:1558
msgid "The entire :ref:`distutils namespace <distutils-deprecated>`"
msgstr ""

#: ../../whatsnew/3.11.rst:1559
msgid ":func:`cgi.log`"
msgstr ""

#: ../../whatsnew/3.11.rst:1560
msgid ":func:`sqlite3.OptimizedUnicode`"
msgstr ""

#: ../../whatsnew/3.11.rst:1561
msgid ":func:`sqlite3.enable_shared_cache`"
msgstr ""

#: ../../whatsnew/3.11.rst:1563
msgid "C API:"
msgstr ""

#: ../../whatsnew/3.11.rst:1565
msgid ":c:func:`PyUnicode_AS_DATA`"
msgstr ""

#: ../../whatsnew/3.11.rst:1566
msgid ":c:func:`PyUnicode_AS_UNICODE`"
msgstr ""

#: ../../whatsnew/3.11.rst:1567
msgid ":c:func:`PyUnicode_AsUnicodeAndSize`"
msgstr ""

#: ../../whatsnew/3.11.rst:1568
msgid ":c:func:`PyUnicode_AsUnicode`"
msgstr ""

#: ../../whatsnew/3.11.rst:1569
msgid ":c:func:`PyUnicode_FromUnicode`"
msgstr ""

#: ../../whatsnew/3.11.rst:1570
msgid ":c:func:`PyUnicode_GET_DATA_SIZE`"
msgstr ""

#: ../../whatsnew/3.11.rst:1571
msgid ":c:func:`PyUnicode_GET_SIZE`"
msgstr ""

#: ../../whatsnew/3.11.rst:1572
msgid ":c:func:`PyUnicode_GetSize`"
msgstr ""

#: ../../whatsnew/3.11.rst:1573
msgid ":c:func:`PyUnicode_IS_COMPACT`"
msgstr ""

#: ../../whatsnew/3.11.rst:1574
msgid ":c:func:`PyUnicode_IS_READY`"
msgstr ""

#: ../../whatsnew/3.11.rst:1575
msgid ":c:func:`PyUnicode_READY`"
msgstr ""

#: ../../whatsnew/3.11.rst:1576
msgid ":c:func:`Py_UNICODE_WSTR_LENGTH`"
msgstr ""

#: ../../whatsnew/3.11.rst:1577
msgid ":c:func:`_PyUnicode_AsUnicode`"
msgstr ""

#: ../../whatsnew/3.11.rst:1578
msgid ":c:macro:`PyUnicode_WCHAR_KIND`"
msgstr ""

#: ../../whatsnew/3.11.rst:1579
msgid ":c:type:`PyUnicodeObject`"
msgstr ""

#: ../../whatsnew/3.11.rst:1580
msgid ":c:func:`PyUnicode_InternImmortal()`"
msgstr ""

#: ../../whatsnew/3.11.rst:1584 ../../whatsnew/3.11.rst:2196
msgid "Removed"
msgstr ""

#: ../../whatsnew/3.11.rst:1586
msgid ""
":class:`smtpd.MailmanProxy` is now removed as it is unusable without an "
"external module, ``mailman``. (Contributed by Dong-hee Na in "
":issue:`35800`.)"
msgstr ""

#: ../../whatsnew/3.11.rst:1589
msgid ""
"The ``binhex`` module, deprecated in Python 3.9, is now removed. The "
"following :mod:`binascii` functions, deprecated in Python 3.9, are now "
"also removed:"
msgstr ""

#: ../../whatsnew/3.11.rst:1593
msgid "``a2b_hqx()``, ``b2a_hqx()``;"
msgstr ""

#: ../../whatsnew/3.11.rst:1594
msgid "``rlecode_hqx()``, ``rledecode_hqx()``."
msgstr ""

#: ../../whatsnew/3.11.rst:1596
msgid "The :func:`binascii.crc_hqx` function remains available."
msgstr ""

#: ../../whatsnew/3.11.rst:1598
msgid "(Contributed by Victor Stinner in :issue:`45085`.)"
msgstr ""

#: ../../whatsnew/3.11.rst:1600
msgid ""
"The distutils ``bdist_msi`` command, deprecated in Python 3.9, is now "
"removed. Use ``bdist_wheel`` (wheel packages) instead. (Contributed by "
"Hugo van Kemenade in :issue:`45124`.)"
msgstr ""

#: ../../whatsnew/3.11.rst:1604
msgid ""
"Due to significant security concerns, the *reuse_address* parameter of "
":meth:`asyncio.loop.create_datagram_endpoint`, disabled in Python 3.9, is"
" now entirely removed. This is because of the behavior of the socket "
"option ``SO_REUSEADDR`` in UDP. (Contributed by Hugo van Kemenade in "
":issue:`45129`.)"
msgstr ""

#: ../../whatsnew/3.11.rst:1610
msgid ""
"Removed :meth:`__getitem__` methods of "
":class:`xml.dom.pulldom.DOMEventStream`, "
":class:`wsgiref.util.FileWrapper` and :class:`fileinput.FileInput`, "
"deprecated since Python 3.9. (Contributed by Hugo van Kemenade in "
":issue:`45132`.)"
msgstr ""

#: ../../whatsnew/3.11.rst:1615
msgid ""
"The following deprecated functions and methods are removed in the "
":mod:`gettext` module: :func:`~gettext.lgettext`, "
":func:`~gettext.ldgettext`, :func:`~gettext.lngettext` and "
":func:`~gettext.ldngettext`."
msgstr ""

#: ../../whatsnew/3.11.rst:1619
msgid ""
"Function :func:`~gettext.bind_textdomain_codeset`, methods "
":meth:`~gettext.NullTranslations.output_charset` and "
":meth:`~gettext.NullTranslations.set_output_charset`, and the *codeset* "
"parameter of functions :func:`~gettext.translation` and "
":func:`~gettext.install` are also removed, since they are only used for "
"the ``l*gettext()`` functions. (Contributed by Dong-hee Na and Serhiy "
"Storchaka in :issue:`44235`.)"
msgstr ""

#: ../../whatsnew/3.11.rst:1627
msgid ""
"The :func:`@asyncio.coroutine <asyncio.coroutine>` :term:`decorator` "
"enabling legacy generator-based coroutines to be compatible with "
"async/await code. The function has been deprecated since Python 3.8 and "
"the removal was initially scheduled for Python 3.10. Use :keyword:`async "
"def` instead. (Contributed by Illia Volochii in :issue:`43216`.)"
msgstr ""

#: ../../whatsnew/3.11.rst:1633
msgid ""
":class:`asyncio.coroutines.CoroWrapper` used for wrapping legacy "
"generator-based coroutine objects in the debug mode. (Contributed by "
"Illia Volochii in :issue:`43216`.)"
msgstr ""

#: ../../whatsnew/3.11.rst:1637
msgid ""
"Removed the deprecated ``split()`` method of :class:`_tkinter.TkappType`."
" (Contributed by Erlend E. Aasland in :issue:`38371`.)"
msgstr ""

#: ../../whatsnew/3.11.rst:1640
msgid "Removed from the :mod:`inspect` module:"
msgstr ""

#: ../../whatsnew/3.11.rst:1642
msgid ""
"the ``getargspec`` function, deprecated since Python 3.0; use "
":func:`inspect.signature` or :func:`inspect.getfullargspec` instead."
msgstr ""

#: ../../whatsnew/3.11.rst:1645
msgid ""
"the ``formatargspec`` function, deprecated since Python 3.5; use the "
":func:`inspect.signature` function and :class:`Signature` object "
"directly."
msgstr ""

#: ../../whatsnew/3.11.rst:1649
msgid ""
"the undocumented ``Signature.from_builtin`` and "
"``Signature.from_function`` functions, deprecated since Python 3.5; use "
"the :meth:`Signature.from_callable() <inspect.Signature.from_callable>` "
"method instead."
msgstr ""

#: ../../whatsnew/3.11.rst:1654
msgid "(Contributed by Hugo van Kemenade in :issue:`45320`.)"
msgstr ""

#: ../../whatsnew/3.11.rst:1656
msgid ""
"Remove namespace package support from unittest discovery. It was "
"introduced in Python 3.4 but has been broken since Python 3.7. "
"(Contributed by Inada Naoki in :issue:`23882`.)"
msgstr ""

#: ../../whatsnew/3.11.rst:1660
msgid ""
"Remove ``__class_getitem__`` method from :class:`pathlib.PurePath`, "
"because it was not used and added by mistake in previous versions. "
"(Contributed by Nikita Sobolev in :issue:`46483`.)"
msgstr ""

#: ../../whatsnew/3.11.rst:1664
msgid ""
"Remove the undocumented private ``float.__set_format__()`` method, "
"previously known as ``float.__setformat__()`` in Python 3.7. Its "
"docstring said: \"You probably don't want to use this function. It exists"
" mainly to be used in Python's test suite.\" (Contributed by Victor "
"Stinner in :issue:`46852`.)"
msgstr ""

#: ../../whatsnew/3.11.rst:1670
msgid ""
"Pynche --- The Pythonically Natural Color and Hue Editor --- has been "
"moved out of ``Tools/scripts`` and is `being developed independently "
"<https://gitlab.com/warsaw/pynche/-/tree/main>`_ from the Python source "
"tree."
msgstr ""

#: ../../whatsnew/3.11.rst:1675 ../../whatsnew/3.11.rst:1885
msgid "Porting to Python 3.11"
msgstr ""

#: ../../whatsnew/3.11.rst:1677
msgid ""
"This section lists previously described changes and other bugfixes that "
"may require changes to your code."
msgstr ""

#: ../../whatsnew/3.11.rst:1682
msgid "Changes in the Python API"
msgstr ""

#: ../../whatsnew/3.11.rst:1684
msgid ""
"Prohibited passing non-:class:`concurrent.futures.ThreadPoolExecutor` "
"executors to :meth:`loop.set_default_executor` following a deprecation in"
" Python 3.8. (Contributed by Illia Volochii in :issue:`43234`.)"
msgstr ""

#: ../../whatsnew/3.11.rst:1689
msgid ""
":func:`open`, :func:`io.open`, :func:`codecs.open` and "
":class:`fileinput.FileInput` no longer accept ``'U'`` (\"universal "
"newline\") in the file mode. This flag was deprecated since Python 3.3. "
"In Python 3, the \"universal newline\" is used by default when a file is "
"open in text mode.  The :ref:`newline parameter <open-newline-parameter>`"
" of :func:`open` controls how universal newlines works. (Contributed by "
"Victor Stinner in :issue:`37330`.)"
msgstr ""

#: ../../whatsnew/3.11.rst:1697
msgid ""
"The :mod:`pdb` module now reads the :file:`.pdbrc` configuration file "
"with the ``'utf-8'`` encoding. (Contributed by Srinivas Reddy Thatiparthy"
" (శ్రీనివాస్  రెడ్డి తాటిపర్తి) in :issue:`41137`.)"
msgstr ""

#: ../../whatsnew/3.11.rst:1701
msgid ""
":mod:`calendar`: The :class:`calendar.LocaleTextCalendar` and "
":class:`calendar.LocaleHTMLCalendar` classes now use "
":func:`locale.getlocale`, instead of using "
":func:`locale.getdefaultlocale`, if no locale is specified. (Contributed "
"by Victor Stinner in :issue:`46659`.)"
msgstr ""

#: ../../whatsnew/3.11.rst:1707
msgid ""
"Global inline flags (e.g. ``(?i)``) can now only be used at the start of "
"the regular expressions.  Using them not at the start of expression was "
"deprecated since Python 3.6. (Contributed by Serhiy Storchaka in "
":issue:`47066`.)"
msgstr ""

#: ../../whatsnew/3.11.rst:1712
msgid ""
":mod:`re` module: Fix a few long-standing bugs where, in rare cases, "
"capturing group could get wrong result. So the result may be different "
"than before. (Contributed by Ma Lin in :issue:`35859`.)"
msgstr ""

#: ../../whatsnew/3.11.rst:1717
msgid ""
"The *population* parameter of :func:`random.sample` must be a sequence. "
"Automatic conversion of sets to lists is no longer supported. If the "
"sample size is larger than the population size, a :exc:`ValueError` is "
"raised. (Contributed by Raymond Hettinger in :issue:`40465`.)"
msgstr ""

#: ../../whatsnew/3.11.rst:1722
msgid ""
":class:`ast.AST` node positions are now validated when provided to "
":func:`compile` and other related functions. If invalid positions are "
"detected, a :exc:`ValueError` will be raised. (Contributed by Pablo "
"Galindo in :gh:`93351`)"
msgstr ""

#: ../../whatsnew/3.11.rst:1726
msgid ""
":c:member:`~PyTypeObject.tp_dictoffset` should be treated as write-only. "
"It can be set to describe C extension clases to the VM, but should be "
"regarded as meaningless when read. To get the pointer to the object's "
"dictionary call :c:func:`PyObject_GenericGetDict` instead."
msgstr ""

#: ../../whatsnew/3.11.rst:1732
msgid "Build Changes"
msgstr ""

#: ../../whatsnew/3.11.rst:1734
msgid ""
"Building Python now requires a C11 compiler. Optional C11 features are "
"not required. (Contributed by Victor Stinner in :issue:`46656`.)"
msgstr ""

#: ../../whatsnew/3.11.rst:1738
msgid ""
"Building Python now requires support of IEEE 754 floating point numbers. "
"(Contributed by Victor Stinner in :issue:`46917`.)"
msgstr ""

#: ../../whatsnew/3.11.rst:1741
msgid ""
"CPython can now be built with the ThinLTO option via ``--with-lto=thin``."
" (Contributed by Dong-hee Na and Brett Holman in :issue:`44340`.)"
msgstr ""

#: ../../whatsnew/3.11.rst:1744
msgid ""
"libpython is no longer linked against libcrypt. (Contributed by Mike "
"Gilbert in :issue:`45433`.)"
msgstr ""

#: ../../whatsnew/3.11.rst:1747
msgid ""
"Building Python now requires a C99 ``<math.h>`` header file providing the"
" following functions: ``copysign()``, ``hypot()``, ``isfinite()``, "
"``isinf()``, ``isnan()``, ``round()``. (Contributed by Victor Stinner in "
":issue:`45440`.)"
msgstr ""

#: ../../whatsnew/3.11.rst:1752
msgid ""
"Building Python now requires a C99 ``<math.h>`` header file providing a "
"``NAN`` constant, or the ``__builtin_nan()`` built-in function. "
"(Contributed by Victor Stinner in :issue:`46640`.)"
msgstr ""

#: ../../whatsnew/3.11.rst:1756
msgid ""
"Building Python now requires support for floating point Not-a-Number "
"(NaN): remove the ``Py_NO_NAN`` macro. (Contributed by Victor Stinner in "
":issue:`46656`.)"
msgstr ""

#: ../../whatsnew/3.11.rst:1760
msgid ""
"Freelists for object structs can now be disabled. A new "
":program:`configure` option :option:`!--without-freelists` can be used to"
" disable all freelists except empty tuple singleton. (Contributed by "
"Christian Heimes in :issue:`45522`.)"
msgstr ""

#: ../../whatsnew/3.11.rst:1765
msgid ""
"``Modules/Setup`` and ``Modules/makesetup`` have been improved and tied "
"up. Extension modules can now be built through ``makesetup``. All except "
"some test modules can be linked statically into main binary or library. "
"(Contributed by Brett Cannon and Christian Heimes in :issue:`45548`, "
":issue:`45570`, :issue:`45571`, and :issue:`43974`.)"
msgstr ""

#: ../../whatsnew/3.11.rst:1771
msgid ""
"Build dependencies, compiler flags, and linker flags for most stdlib "
"extension modules are now detected by :program:`configure`. libffi, "
"libnsl, libsqlite3, zlib, bzip2, liblzma, libcrypt, Tcl/Tk, and uuid "
"flags are detected by ``pkg-config`` (when available). :mod:`tkinter` now"
" requires ``pkg-config`` command to detect development settings for "
"Tcl/Tk headers and libraries. (Contributed by Christian Heimes and Erlend"
" Egeberg Aasland in :issue:`45847`, :issue:`45747`, and :issue:`45763`.)"
msgstr ""

#: ../../whatsnew/3.11.rst:1781
msgid ""
"Use the environment variables :envvar:`TCLTK_CFLAGS` and "
":envvar:`TCLTK_LIBS` to manually specify the location of Tcl/Tk headers "
"and libraries. The :program:`configure` options ``--with-tcltk-includes``"
" and ``--with-tcltk-libs`` have been removed."
msgstr ""

#: ../../whatsnew/3.11.rst:1786
msgid ""
"On RHEL 7 and CentOS 7 the development packages do not provide ``tcl.pc``"
" and ``tk.pc``, use :envvar:`TCLTK_LIBS=\"-ltk8.5 -ltkstub8.5 "
"-ltcl8.5\"`. The directory ``Misc/rhel7`` contains ``.pc`` files and "
"instructions how to build Python with RHEL 7's and CentOS 7's Tcl/Tk and "
"OpenSSL."
msgstr ""

#: ../../whatsnew/3.11.rst:1791
msgid ""
"CPython now has :pep:`11` tier 3 support for cross compiling to "
"WebAssembly platform ``wasm32-unknown-emscripten`` (Python in the "
"browser). The effort is inspired by previous work like `Pyodide "
"<https://pyodide.org/>`_. Emscripten provides a limited subset of POSIX "
"APIs. Python standard libraries features and modules related to "
"networking, processes, threading, signals, mmap, and users/groups are not"
" available or don't work. (Contributed by Christian Heimes and Ethan "
"Smith in :gh:`84461`, promoted in :gh:`95085`)"
msgstr ""

#: ../../whatsnew/3.11.rst:1800
msgid ""
"CPython now has :pep:`11` tier 3 support for cross compiling to "
"WebAssembly platform ``wasm32-unknown-wasi`` (WebAssembly System "
"Interface). Like on Emscripten, only a subset of Python's standard "
"library is available on WASI. (Contributed by Christian Heimes in "
":gh:`90473`, promoted in :gh:`95085`)"
msgstr ""

#: ../../whatsnew/3.11.rst:1805
msgid ""
"CPython will now use 30-bit digits by default for the Python :class:`int`"
" implementation. Previously, the default was to use 30-bit digits on "
"platforms with ``SIZEOF_VOID_P >= 8``, and 15-bit digits otherwise. It's "
"still possible to explicitly request use of 15-bit digits via either the "
"``--enable-big-digits`` option to the configure script or (for Windows) "
"the ``PYLONG_BITS_IN_DIGIT`` variable in ``PC/pyconfig.h``, but this "
"option may be removed at some point in the future. (Contributed by Mark "
"Dickinson in :issue:`45569`.)"
msgstr ""

#: ../../whatsnew/3.11.rst:1814
msgid ""
"The :mod:`tkinter` package now requires Tcl/Tk version 8.5.12 or newer. "
"(Contributed by Serhiy Storchaka in :issue:`46996`.)"
msgstr ""

#: ../../whatsnew/3.11.rst:1819
msgid "C API Changes"
msgstr ""

#: ../../whatsnew/3.11.rst:1824
msgid ""
"Add a new :c:func:`PyType_GetName` function to get type's short name. "
"(Contributed by Hai Shi in :issue:`42035`.)"
msgstr ""

#: ../../whatsnew/3.11.rst:1827
msgid ""
"Add a new :c:func:`PyType_GetQualName` function to get type's qualified "
"name. (Contributed by Hai Shi in :issue:`42035`.)"
msgstr ""

#: ../../whatsnew/3.11.rst:1830
msgid ""
"Add new :c:func:`PyThreadState_EnterTracing` and "
":c:func:`PyThreadState_LeaveTracing` functions to the limited C API to "
"suspend and resume tracing and profiling. (Contributed by Victor Stinner "
"in :issue:`43760`.)"
msgstr ""

#: ../../whatsnew/3.11.rst:1835
msgid ""
"Added the :c:data:`Py_Version` constant which bears the same value as "
":c:macro:`PY_VERSION_HEX`. (Contributed by  Gabriele N. Tornetta in "
":issue:`43931`.)"
msgstr ""

#: ../../whatsnew/3.11.rst:1839
msgid ""
":c:type:`Py_buffer` and APIs are now part of the limited API and the "
"stable ABI:"
msgstr ""

#: ../../whatsnew/3.11.rst:1842
msgid ":c:func:`PyObject_CheckBuffer`"
msgstr ""

#: ../../whatsnew/3.11.rst:1843
msgid ":c:func:`PyObject_GetBuffer`"
msgstr ""

#: ../../whatsnew/3.11.rst:1844
msgid ":c:func:`PyBuffer_GetPointer`"
msgstr ""

#: ../../whatsnew/3.11.rst:1845
msgid ":c:func:`PyBuffer_SizeFromFormat`"
msgstr ""

#: ../../whatsnew/3.11.rst:1846
msgid ":c:func:`PyBuffer_ToContiguous`"
msgstr ""

#: ../../whatsnew/3.11.rst:1847
msgid ":c:func:`PyBuffer_FromContiguous`"
msgstr ""

#: ../../whatsnew/3.11.rst:1848
msgid ":c:func:`PyBuffer_CopyData`"
msgstr ""

#: ../../whatsnew/3.11.rst:1849
msgid ":c:func:`PyBuffer_IsContiguous`"
msgstr ""

#: ../../whatsnew/3.11.rst:1850
msgid ":c:func:`PyBuffer_FillContiguousStrides`"
msgstr ""

#: ../../whatsnew/3.11.rst:1851
msgid ":c:func:`PyBuffer_FillInfo`"
msgstr ""

#: ../../whatsnew/3.11.rst:1852
msgid ":c:func:`PyBuffer_Release`"
msgstr ""

#: ../../whatsnew/3.11.rst:1853
msgid ":c:func:`PyMemoryView_FromBuffer`"
msgstr ""

#: ../../whatsnew/3.11.rst:1854
msgid ""
":c:member:`~PyBufferProcs.bf_getbuffer` and "
":c:member:`~PyBufferProcs.bf_releasebuffer` type slots"
msgstr ""

#: ../../whatsnew/3.11.rst:1857
msgid "(Contributed by Christian Heimes in :issue:`45459`.)"
msgstr ""

#: ../../whatsnew/3.11.rst:1859
msgid ""
"Added the :c:data:`PyType_GetModuleByDef` function, used to get the "
"module in which a method was defined, in cases where this information is "
"not available directly (via :c:type:`PyCMethod`). (Contributed by Petr "
"Viktorin in :issue:`46613`.)"
msgstr ""

#: ../../whatsnew/3.11.rst:1864
msgid ""
"Add new functions to pack and unpack C double (serialize and "
"deserialize): :c:func:`PyFloat_Pack2`, :c:func:`PyFloat_Pack4`, "
":c:func:`PyFloat_Pack8`, :c:func:`PyFloat_Unpack2`, "
":c:func:`PyFloat_Unpack4` and :c:func:`PyFloat_Unpack8`. (Contributed by "
"Victor Stinner in :issue:`46906`.)"
msgstr ""

#: ../../whatsnew/3.11.rst:1870
msgid ""
"Add new functions to get frame object attributes: "
":c:func:`PyFrame_GetBuiltins`, :c:func:`PyFrame_GetGenerator`, "
":c:func:`PyFrame_GetGlobals`, :c:func:`PyFrame_GetLasti`."
msgstr ""

#: ../../whatsnew/3.11.rst:1874
msgid ""
"Added two new functions to get and set the active exception instance: "
":c:func:`PyErr_GetHandledException` and "
":c:func:`PyErr_SetHandledException`. These are alternatives to "
":c:func:`PyErr_SetExcInfo()` and :c:func:`PyErr_GetExcInfo()` which work "
"with the legacy 3-tuple representation of exceptions. (Contributed by "
"Irit Katriel in :issue:`46343`.)"
msgstr ""

#: ../../whatsnew/3.11.rst:1881
msgid ""
"Added the :c:member:`PyConfig.safe_path` member. (Contributed by Victor "
"Stinner in :gh:`57684`.)"
msgstr ""

#: ../../whatsnew/3.11.rst:1887
msgid ""
":c:func:`PyErr_SetExcInfo()` no longer uses the ``type`` and "
"``traceback`` arguments, the interpreter now derives those values from "
"the exception instance (the ``value`` argument). The function still "
"steals references of all three arguments. (Contributed by Irit Katriel in"
" :issue:`45711`.)"
msgstr ""

#: ../../whatsnew/3.11.rst:1893
msgid ""
":c:func:`PyErr_GetExcInfo()` now derives the ``type`` and ``traceback`` "
"fields of the result from the exception instance (the ``value`` field). "
"(Contributed by Irit Katriel in :issue:`45711`.)"
msgstr ""

#: ../../whatsnew/3.11.rst:1897
msgid ""
":c:struct:`_frozen` has a new ``is_package`` field to indicate whether or"
" not the frozen module is a package.  Previously, a negative value in the"
" ``size`` field was the indicator.  Now only non-negative values be used "
"for ``size``. (Contributed by Kumar Aditya in :issue:`46608`.)"
msgstr ""

#: ../../whatsnew/3.11.rst:1903
msgid ""
":c:func:`_PyFrameEvalFunction` now takes ``_PyInterpreterFrame*`` as its "
"second parameter, instead of ``PyFrameObject*``. See :pep:`523` for more "
"details of how to use this function pointer type."
msgstr ""

#: ../../whatsnew/3.11.rst:1907
msgid ""
":c:func:`PyCode_New` and :c:func:`PyCode_NewWithPosOnlyArgs` now take an "
"additional ``exception_table`` argument. Using these functions should be "
"avoided, if at all possible. To get a custom code object: create a code "
"object using the compiler, then get a modified version with the "
"``replace`` method."
msgstr ""

#: ../../whatsnew/3.11.rst:1913
msgid ""
":c:type:`PyCodeObject` no longer has the ``co_code``, ``co_varnames``, "
"``co_cellvars`` and ``co_freevars`` fields.  Instead, use "
":c:func:`PyCode_GetCode`, :c:func:`PyCode_GetVarnames`, "
":c:func:`PyCode_GetCellvars` and :c:func:`PyCode_GetFreevars` "
"respectively to access them via the C API. (Contributed by Brandt Bucher "
"in :issue:`46841` and Ken Jin in :gh:`92154` and :gh:`94936`.)"
msgstr ""

#: ../../whatsnew/3.11.rst:1921
msgid ""
"The old trashcan macros "
"(``Py_TRASHCAN_SAFE_BEGIN``/``Py_TRASHCAN_SAFE_END``) are now deprecated."
" They should be replaced by the new macros ``Py_TRASHCAN_BEGIN`` and "
"``Py_TRASHCAN_END``."
msgstr ""

#: ../../whatsnew/3.11.rst:1925
msgid "A tp_dealloc function that has the old macros, such as::"
msgstr ""

#: ../../whatsnew/3.11.rst:1936
msgid "should migrate to the new macros as follows::"
msgstr ""

#: ../../whatsnew/3.11.rst:1947
msgid ""
"Note that ``Py_TRASHCAN_BEGIN`` has a second argument which should be the"
" deallocation function it is in."
msgstr ""

#: ../../whatsnew/3.11.rst:1950
msgid ""
"To support older Python versions in the same codebase, you can define the"
" following macros and use them throughout the code (credit: these were "
"copied from the ``mypy`` codebase)::"
msgstr ""

#: ../../whatsnew/3.11.rst:1962
msgid ""
"The :c:func:`PyType_Ready` function now raises an error if a type is "
"defined with the :const:`Py_TPFLAGS_HAVE_GC` flag set but has no traverse"
" function (:c:member:`PyTypeObject.tp_traverse`). (Contributed by Victor "
"Stinner in :issue:`44263`.)"
msgstr ""

#: ../../whatsnew/3.11.rst:1967
msgid ""
"Heap types with the :const:`Py_TPFLAGS_IMMUTABLETYPE` flag can now "
"inherit the :pep:`590` vectorcall protocol.  Previously, this was only "
"possible for :ref:`static types <static-types>`. (Contributed by Erlend "
"E. Aasland in :issue:`43908`)"
msgstr ""

#: ../../whatsnew/3.11.rst:1972
msgid ""
"Since :c:func:`Py_TYPE()` is changed to a inline static function, "
"``Py_TYPE(obj) = new_type`` must be replaced with ``Py_SET_TYPE(obj, "
"new_type)``: see the :c:func:`Py_SET_TYPE()` function (available since "
"Python 3.9). For backward compatibility, this macro can be used::"
msgstr ""

#: ../../whatsnew/3.11.rst:1984 ../../whatsnew/3.11.rst:1998
msgid "(Contributed by Victor Stinner in :issue:`39573`.)"
msgstr ""

#: ../../whatsnew/3.11.rst:1986
msgid ""
"Since :c:func:`Py_SIZE()` is changed to a inline static function, "
"``Py_SIZE(obj) = new_size`` must be replaced with ``Py_SET_SIZE(obj, "
"new_size)``: see the :c:func:`Py_SET_SIZE()` function (available since "
"Python 3.9). For backward compatibility, this macro can be used::"
msgstr ""

#: ../../whatsnew/3.11.rst:2000
msgid ""
"``<Python.h>`` no longer includes the header files ``<stdlib.h>``, "
"``<stdio.h>``, ``<errno.h>`` and ``<string.h>`` when the "
"``Py_LIMITED_API`` macro is set to ``0x030b0000`` (Python 3.11) or "
"higher. C extensions should explicitly include the header files after "
"``#include <Python.h>``. (Contributed by Victor Stinner in "
":issue:`45434`.)"
msgstr ""

#: ../../whatsnew/3.11.rst:2006
msgid ""
"The non-limited API files ``cellobject.h``, ``classobject.h``, "
"``code.h``, ``context.h``, ``funcobject.h``, ``genobject.h`` and "
"``longintrepr.h`` have been moved to the ``Include/cpython`` directory. "
"Moreover, the ``eval.h`` header file was removed. These files must not be"
" included directly, as they are already included in ``Python.h``: "
":ref:`Include Files <api-includes>`. If they have been included directly,"
" consider including ``Python.h`` instead. (Contributed by Victor Stinner "
"in :issue:`35134`.)"
msgstr ""

#: ../../whatsnew/3.11.rst:2014
msgid ""
"The :c:func:`PyUnicode_CHECK_INTERNED` macro has been excluded from the "
"limited C API. It was never usable there, because it used internal "
"structures which are not available in the limited C API. (Contributed by "
"Victor Stinner in :issue:`46007`.)"
msgstr ""

#: ../../whatsnew/3.11.rst:2019
msgid ""
"The following frame functions and type are now directly available with "
"``#include <Python.h>``, it's no longer needed to add ``#include "
"<frameobject.h>``:"
msgstr ""

#: ../../whatsnew/3.11.rst:2023
msgid ":c:func:`PyFrame_Check`"
msgstr ""

#: ../../whatsnew/3.11.rst:2024
msgid ":c:func:`PyFrame_GetBack`"
msgstr ""

#: ../../whatsnew/3.11.rst:2025
msgid ":c:func:`PyFrame_GetBuiltins`"
msgstr ""

#: ../../whatsnew/3.11.rst:2026
msgid ":c:func:`PyFrame_GetGenerator`"
msgstr ""

#: ../../whatsnew/3.11.rst:2027
msgid ":c:func:`PyFrame_GetGlobals`"
msgstr ""

#: ../../whatsnew/3.11.rst:2028
msgid ":c:func:`PyFrame_GetLasti`"
msgstr ""

#: ../../whatsnew/3.11.rst:2029
msgid ":c:func:`PyFrame_GetLocals`"
msgstr ""

#: ../../whatsnew/3.11.rst:2030
msgid ":c:type:`PyFrame_Type`"
msgstr ""

#: ../../whatsnew/3.11.rst:2032
msgid "(Contributed by Victor Stinner in :gh:`93937`.)"
msgstr ""

#: ../../whatsnew/3.11.rst:2036
msgid ""
"The :c:type:`PyFrameObject` structure members have been removed from the "
"public C API."
msgstr ""

#: ../../whatsnew/3.11.rst:2039
msgid ""
"While the documentation notes that the :c:type:`PyFrameObject` fields are"
" subject to change at any time, they have been stable for a long time and"
" were used in several popular extensions."
msgstr ""

#: ../../whatsnew/3.11.rst:2043
msgid ""
"In Python 3.11, the frame struct was reorganized to allow performance "
"optimizations. Some fields were removed entirely, as they were details of"
" the old implementation."
msgstr ""

#: ../../whatsnew/3.11.rst:2047
msgid ":c:type:`PyFrameObject` fields:"
msgstr ""

#: ../../whatsnew/3.11.rst:2049
msgid "``f_back``: use :c:func:`PyFrame_GetBack`."
msgstr ""

#: ../../whatsnew/3.11.rst:2050
msgid "``f_blockstack``: removed."
msgstr ""

#: ../../whatsnew/3.11.rst:2051
msgid "``f_builtins``: use :c:func:`PyFrame_GetBuiltins`."
msgstr ""

#: ../../whatsnew/3.11.rst:2052
msgid "``f_code``: use :c:func:`PyFrame_GetCode`."
msgstr ""

#: ../../whatsnew/3.11.rst:2053
msgid "``f_gen``: use :c:func:`PyFrame_GetGenerator`."
msgstr ""

#: ../../whatsnew/3.11.rst:2054
msgid "``f_globals``: use :c:func:`PyFrame_GetGlobals`."
msgstr ""

#: ../../whatsnew/3.11.rst:2055
msgid "``f_iblock``: removed."
msgstr ""

#: ../../whatsnew/3.11.rst:2056
msgid ""
"``f_lasti``: use :c:func:`PyFrame_GetLasti`. Code using ``f_lasti`` with "
"``PyCode_Addr2Line()`` should use :c:func:`PyFrame_GetLineNumber` "
"instead; it may be faster."
msgstr ""

#: ../../whatsnew/3.11.rst:2059
msgid "``f_lineno``: use :c:func:`PyFrame_GetLineNumber`"
msgstr ""

#: ../../whatsnew/3.11.rst:2060
msgid "``f_locals``: use :c:func:`PyFrame_GetLocals`."
msgstr ""

#: ../../whatsnew/3.11.rst:2061
msgid "``f_stackdepth``: removed."
msgstr ""

#: ../../whatsnew/3.11.rst:2062
msgid "``f_state``: no public API (renamed to ``f_frame.f_state``)."
msgstr ""

#: ../../whatsnew/3.11.rst:2063
msgid "``f_trace``: no public API."
msgstr ""

#: ../../whatsnew/3.11.rst:2064
msgid ""
"``f_trace_lines``: use ``PyObject_GetAttrString((PyObject*)frame, "
"\"f_trace_lines\")``."
msgstr ""

#: ../../whatsnew/3.11.rst:2065
msgid ""
"``f_trace_opcodes``: use ``PyObject_GetAttrString((PyObject*)frame, "
"\"f_trace_opcodes\")``."
msgstr ""

#: ../../whatsnew/3.11.rst:2066
msgid "``f_localsplus``: no public API (renamed to ``f_frame.localsplus``)."
msgstr ""

#: ../../whatsnew/3.11.rst:2067
msgid "``f_valuestack``: removed."
msgstr ""

#: ../../whatsnew/3.11.rst:2069
msgid ""
"The Python frame object is now created lazily. A side effect is that the "
"``f_back`` member must not be accessed directly, since its value is now "
"also computed lazily. The :c:func:`PyFrame_GetBack` function must be "
"called instead."
msgstr ""

#: ../../whatsnew/3.11.rst:2074
msgid ""
"Debuggers that accessed the ``f_locals`` directly *must* call "
":c:func:`PyFrame_GetLocals` instead. They no longer need to call "
":c:func:`PyFrame_FastToLocalsWithError` or "
":c:func:`PyFrame_LocalsToFast`, in fact they should not call those "
"functions. The necessary updating of the frame is now managed by the "
"virtual machine."
msgstr ""

#: ../../whatsnew/3.11.rst:2080
msgid "Code defining ``PyFrame_GetCode()`` on Python 3.8 and older::"
msgstr ""

#: ../../whatsnew/3.11.rst:2090
msgid "Code defining ``PyFrame_GetBack()`` on Python 3.8 and older::"
msgstr ""

#: ../../whatsnew/3.11.rst:2100
msgid ""
"Or use the `pythoncapi_compat project "
"<https://github.com/python/pythoncapi_compat>`__ to get these two "
"functions on older Python versions."
msgstr ""

#: ../../whatsnew/3.11.rst:2104
msgid "Changes of the :c:type:`PyThreadState` structure members:"
msgstr ""

#: ../../whatsnew/3.11.rst:2106
msgid ""
"``frame``: removed, use :c:func:`PyThreadState_GetFrame` (function added "
"to Python 3.9 by :issue:`40429`). Warning: the function returns a "
":term:`strong reference`, need to call :c:func:`Py_XDECREF`."
msgstr ""

#: ../../whatsnew/3.11.rst:2110
msgid ""
"``tracing``: changed, use :c:func:`PyThreadState_EnterTracing` and "
":c:func:`PyThreadState_LeaveTracing` (functions added to Python 3.11 by "
":issue:`43760`)."
msgstr ""

#: ../../whatsnew/3.11.rst:2113
msgid ""
"``recursion_depth``: removed, use ``(tstate->recursion_limit - "
"tstate->recursion_remaining)`` instead."
msgstr ""

#: ../../whatsnew/3.11.rst:2115
msgid "``stackcheck_counter``: removed."
msgstr ""

#: ../../whatsnew/3.11.rst:2117
msgid "Code defining ``PyThreadState_GetFrame()`` on Python 3.8 and older::"
msgstr ""

#: ../../whatsnew/3.11.rst:2127
msgid ""
"Code defining ``PyThreadState_EnterTracing()`` and "
"``PyThreadState_LeaveTracing()`` on Python 3.10 and older::"
msgstr ""

#: ../../whatsnew/3.11.rst:2153
msgid ""
"Or use `the pythoncapi_compat project "
"<https://github.com/python/pythoncapi_compat>`__ to get these functions "
"on old Python functions."
msgstr ""

#: ../../whatsnew/3.11.rst:2157
msgid ""
"Distributors are encouraged to build Python with the optimized Blake2 "
"library `libb2`_."
msgstr ""

#: ../../whatsnew/3.11.rst:2160
msgid ""
"The :c:member:`PyConfig.module_search_paths_set` field must now be set to"
" 1 for initialization to use :c:member:`PyConfig.module_search_paths` to "
"initialize :data:`sys.path`. Otherwise, initialization will recalculate "
"the path and replace any values added to ``module_search_paths``."
msgstr ""

#: ../../whatsnew/3.11.rst:2165
msgid ""
":c:func:`PyConfig_Read` no longer calculates the initial search path, and"
" will not fill any values into :c:member:`PyConfig.module_search_paths`. "
"To calculate default paths and then modify them, finish initialization "
"and use :c:func:`PySys_GetObject` to retrieve :data:`sys.path` as a "
"Python list object and modify it directly."
msgstr ""

#: ../../whatsnew/3.11.rst:2173
msgid "Deprecate the following functions to configure the Python initialization:"
msgstr ""

#: ../../whatsnew/3.11.rst:2175
msgid ":c:func:`PySys_AddWarnOptionUnicode`"
msgstr ""

#: ../../whatsnew/3.11.rst:2176
msgid ":c:func:`PySys_AddWarnOption`"
msgstr ""

#: ../../whatsnew/3.11.rst:2177
msgid ":c:func:`PySys_AddXOption`"
msgstr ""

#: ../../whatsnew/3.11.rst:2178
msgid ":c:func:`PySys_HasWarnOptions`"
msgstr ""

#: ../../whatsnew/3.11.rst:2179
msgid ":c:func:`PySys_SetArgvEx`"
msgstr ""

#: ../../whatsnew/3.11.rst:2180
msgid ":c:func:`PySys_SetArgv`"
msgstr ""

#: ../../whatsnew/3.11.rst:2181
msgid ":c:func:`PySys_SetPath`"
msgstr ""

#: ../../whatsnew/3.11.rst:2182
msgid ":c:func:`Py_SetPath`"
msgstr ""

#: ../../whatsnew/3.11.rst:2183
msgid ":c:func:`Py_SetProgramName`"
msgstr ""

#: ../../whatsnew/3.11.rst:2184
msgid ":c:func:`Py_SetPythonHome`"
msgstr ""

#: ../../whatsnew/3.11.rst:2185
msgid ":c:func:`Py_SetStandardStreamEncoding`"
msgstr ""

#: ../../whatsnew/3.11.rst:2186
msgid ":c:func:`_Py_SetProgramFullPath`"
msgstr ""

#: ../../whatsnew/3.11.rst:2188
msgid ""
"Use the new :c:type:`PyConfig` API of the :ref:`Python Initialization "
"Configuration <init-config>` instead (:pep:`587`). (Contributed by Victor"
" Stinner in :gh:`88279`.)"
msgstr ""

#: ../../whatsnew/3.11.rst:2192
msgid ""
"Deprecate the ``ob_shash`` member of the :c:type:`PyBytesObject`. Use "
":c:func:`PyObject_Hash` instead. (Contributed by Inada Naoki in "
":issue:`46864`.)"
msgstr ""

#: ../../whatsnew/3.11.rst:2198
msgid ""
":c:func:`PyFrame_BlockSetup` and :c:func:`PyFrame_BlockPop` have been "
"removed. (Contributed by Mark Shannon in :issue:`40222`.)"
msgstr ""

#: ../../whatsnew/3.11.rst:2202
msgid "Remove the following math macros using the ``errno`` variable:"
msgstr ""

#: ../../whatsnew/3.11.rst:2204
msgid "``Py_ADJUST_ERANGE1()``"
msgstr ""

#: ../../whatsnew/3.11.rst:2205
msgid "``Py_ADJUST_ERANGE2()``"
msgstr ""

#: ../../whatsnew/3.11.rst:2206
msgid "``Py_OVERFLOWED()``"
msgstr ""

#: ../../whatsnew/3.11.rst:2207
msgid "``Py_SET_ERANGE_IF_OVERFLOW()``"
msgstr ""

#: ../../whatsnew/3.11.rst:2208
msgid "``Py_SET_ERRNO_ON_MATH_ERROR()``"
msgstr ""

#: ../../whatsnew/3.11.rst:2210
msgid "(Contributed by Victor Stinner in :issue:`45412`.)"
msgstr ""

#: ../../whatsnew/3.11.rst:2212
msgid ""
"Remove ``Py_UNICODE_COPY()`` and ``Py_UNICODE_FILL()`` macros, deprecated"
" since Python 3.3. Use ``PyUnicode_CopyCharacters()`` or ``memcpy()`` "
"(``wchar_t*`` string), and ``PyUnicode_Fill()`` functions instead. "
"(Contributed by Victor Stinner in :issue:`41123`.)"
msgstr ""

#: ../../whatsnew/3.11.rst:2217
msgid ""
"Remove the ``pystrhex.h`` header file. It only contains private "
"functions. C extensions should only include the main ``<Python.h>`` "
"header file. (Contributed by Victor Stinner in :issue:`45434`.)"
msgstr ""

#: ../../whatsnew/3.11.rst:2221
msgid ""
"Remove the ``Py_FORCE_DOUBLE()`` macro. It was used by the "
"``Py_IS_INFINITY()`` macro. (Contributed by Victor Stinner in "
":issue:`45440`.)"
msgstr ""

#: ../../whatsnew/3.11.rst:2225
msgid ""
"The following items are no longer available when "
":c:macro:`Py_LIMITED_API` is defined:"
msgstr ""

#: ../../whatsnew/3.11.rst:2228
msgid ":c:func:`PyMarshal_WriteLongToFile`"
msgstr ""

#: ../../whatsnew/3.11.rst:2229
msgid ":c:func:`PyMarshal_WriteObjectToFile`"
msgstr ""

#: ../../whatsnew/3.11.rst:2230
msgid ":c:func:`PyMarshal_ReadObjectFromString`"
msgstr ""

#: ../../whatsnew/3.11.rst:2231
msgid ":c:func:`PyMarshal_WriteObjectToString`"
msgstr ""

#: ../../whatsnew/3.11.rst:2232
msgid "the ``Py_MARSHAL_VERSION`` macro"
msgstr ""

#: ../../whatsnew/3.11.rst:2234
msgid "These are not part of the :ref:`limited API <stable-abi-list>`."
msgstr ""

#: ../../whatsnew/3.11.rst:2236
msgid "(Contributed by Victor Stinner in :issue:`45474`.)"
msgstr ""

#: ../../whatsnew/3.11.rst:2238
msgid ""
"Exclude :c:func:`PyWeakref_GET_OBJECT` from the limited C API. It never "
"worked since the :c:type:`PyWeakReference` structure is opaque in the "
"limited C API. (Contributed by Victor Stinner in :issue:`35134`.)"
msgstr ""

#: ../../whatsnew/3.11.rst:2243
msgid ""
"Remove the ``PyHeapType_GET_MEMBERS()`` macro. It was exposed in the "
"public C API by mistake, it must only be used by Python internally. Use "
"the ``PyTypeObject.tp_members`` member instead. (Contributed by Victor "
"Stinner in :issue:`40170`.)"
msgstr ""

#: ../../whatsnew/3.11.rst:2248
msgid ""
"Remove the ``HAVE_PY_SET_53BIT_PRECISION`` macro (moved to the internal C"
" API). (Contributed by Victor Stinner in :issue:`45412`.)"
msgstr ""

#: ../../whatsnew/3.11.rst:2252
msgid ""
"Remove the :c:type:`Py_UNICODE` encoder APIs, as they have been "
"deprecated since Python 3.3, are little used and are inefficient relative"
" to the recommended alternatives."
msgstr ""

#: ../../whatsnew/3.11.rst:2257
msgid "The removed functions are:"
msgstr ""

#: ../../whatsnew/3.11.rst:2259
msgid ":func:`!PyUnicode_Encode`"
msgstr ""

#: ../../whatsnew/3.11.rst:2260
msgid ":func:`!PyUnicode_EncodeASCII`"
msgstr ""

#: ../../whatsnew/3.11.rst:2261
msgid ":func:`!PyUnicode_EncodeLatin1`"
msgstr ""

#: ../../whatsnew/3.11.rst:2262
msgid ":func:`!PyUnicode_EncodeUTF7`"
msgstr ""

#: ../../whatsnew/3.11.rst:2263
msgid ":func:`!PyUnicode_EncodeUTF8`"
msgstr ""

#: ../../whatsnew/3.11.rst:2264
msgid ":func:`!PyUnicode_EncodeUTF16`"
msgstr ""

#: ../../whatsnew/3.11.rst:2265
msgid ":func:`!PyUnicode_EncodeUTF32`"
msgstr ""

#: ../../whatsnew/3.11.rst:2266
msgid ":func:`!PyUnicode_EncodeUnicodeEscape`"
msgstr ""

#: ../../whatsnew/3.11.rst:2267
msgid ":func:`!PyUnicode_EncodeRawUnicodeEscape`"
msgstr ""

#: ../../whatsnew/3.11.rst:2268
msgid ":func:`!PyUnicode_EncodeCharmap`"
msgstr ""

#: ../../whatsnew/3.11.rst:2269
msgid ":func:`!PyUnicode_TranslateCharmap`"
msgstr ""

#: ../../whatsnew/3.11.rst:2270
msgid ":func:`!PyUnicode_EncodeDecimal`"
msgstr ""

#: ../../whatsnew/3.11.rst:2271
msgid ":func:`!PyUnicode_TransformDecimalToASCII`"
msgstr ""

#: ../../whatsnew/3.11.rst:2273
msgid ""
"See :pep:`624` for details and :pep:`migration guidance <624#alternative-"
"apis>`. (Contributed by Inada Naoki in :issue:`44029`.)"
msgstr ""

#~ msgid ""
#~ "Prerelease users should be aware that"
#~ " this document is currently in draft"
#~ " form. It will be updated "
#~ "substantially as Python 3.11 moves "
#~ "towards release, so it's worth checking"
#~ " back even after reading earlier "
#~ "versions."
#~ msgstr ""

#~ msgid ""
#~ "Python 3.11 is up to 10-60% faster"
#~ " than Python 3.10. On average, we "
#~ "measured a 1.25x speedup on the "
#~ "standard benchmark suite. See `Faster "
#~ "CPython`_ for details."
#~ msgstr ""

#~ msgid ""
#~ ":pep:`654`: Exception Groups and ``except*``."
#~ " (Contributed by Irit Katriel in "
#~ ":issue:`45292`.)"
#~ msgstr ""

#~ msgid ""
#~ ":pep:`655`: Marking individual TypedDict items"
#~ " as required or potentially-missing."
#~ msgstr ""

#~ msgid "Security improvements:"
#~ msgstr ""

#~ msgid ""
#~ "New :option:`-P` command line option and"
#~ " :envvar:`PYTHONSAFEPATH` environment variable to"
#~ " not prepend a potentially unsafe "
#~ "path to :data:`sys.path` such as the "
#~ "current directory, the script's directory "
#~ "or an empty string."
#~ msgstr ""

#~ msgid "Enhanced error locations in tracebacks"
#~ msgstr ""

#~ msgid ""
#~ "When printing tracebacks, the interpreter "
#~ "will now point to the exact "
#~ "expression that caused the error instead"
#~ " of just the line. For example:"
#~ msgstr ""

#~ msgid ""
#~ "Previous versions of the interpreter "
#~ "would point to just the line "
#~ "making it ambiguous which object was "
#~ "``None``. These enhanced errors can also"
#~ " be helpful when dealing with deeply"
#~ " nested dictionary objects and multiple "
#~ "function calls,"
#~ msgstr ""

#~ msgid "as well as complex arithmetic expressions:"
#~ msgstr ""

#~ msgid ""
#~ "This feature requires storing column "
#~ "positions in code objects which may "
#~ "result in a small increase of disk"
#~ " usage of compiled Python files or"
#~ " interpreter memory usage. To avoid "
#~ "storing the extra information and/or "
#~ "deactivate printing the extra traceback "
#~ "information, the :option:`-X` ``no_debug_ranges``"
#~ " command line flag or the "
#~ ":envvar:`PYTHONNODEBUGRANGES` environment variable "
#~ "can be used."
#~ msgstr ""

#~ msgid "Column information for code objects"
#~ msgstr ""

#~ msgid ""
#~ "The information used by the enhanced "
#~ "traceback feature is made available as"
#~ " a general API that can be used"
#~ " to correlate bytecode instructions with"
#~ " source code. This information can be"
#~ " retrieved using:"
#~ msgstr ""

#~ msgid "The :c:func:`PyCode_Addr2Location` function in the C-API."
#~ msgstr ""

#~ msgid ""
#~ "The :option:`-X` ``no_debug_ranges`` option "
#~ "and the environment variable "
#~ ":envvar:`PYTHONNODEBUGRANGES` can be used to"
#~ " disable this feature."
#~ msgstr ""

#~ msgid "Exceptions can be enriched with notes (PEP 678)"
#~ msgstr ""

#~ msgid ""
#~ "The :meth:`add_note` method was added to"
#~ " :exc:`BaseException`. It can be used "
#~ "to enrich exceptions with context "
#~ "information which is not available at"
#~ " the time when the exception is "
#~ "raised. The notes added appear in "
#~ "the default traceback. See :pep:`678` "
#~ "for more details. (Contributed by Irit"
#~ " Katriel in :issue:`45607`.)"
#~ msgstr ""

#~ msgid ""
#~ ":pep:`484` introduced :data:`~typing.TypeVar`, "
#~ "enabling creation of generics parameterised"
#~ " with a single type. :pep:`646` "
#~ "introduces :data:`~typing.TypeVarTuple`, enabling "
#~ "parameterisation with an *arbitrary* number"
#~ " of types. In other words, a "
#~ ":data:`~typing.TypeVarTuple` is a *variadic* "
#~ "type variable, enabling *variadic* generics."
#~ " This enables a wide variety of "
#~ "use cases. In particular, it allows "
#~ "the type of array-like structures "
#~ "in numerical computing libraries such as"
#~ " NumPy and TensorFlow to be "
#~ "parameterised with the array *shape*. "
#~ "Static type checkers will now be "
#~ "able to catch shape-related bugs "
#~ "in code that uses these libraries."
#~ msgstr ""

#~ msgid ""
#~ ":data:`~typing.Required` and :data:`~typing.NotRequired`"
#~ " provide a straightforward way to "
#~ "mark whether individual items in a "
#~ ":data:`~typing.TypedDict` must be present. "
#~ "Previously this was only possible using"
#~ " inheritance."
#~ msgstr ""

#~ msgid ""
#~ "Fields are still required by default,"
#~ " unless the ``total=False`` parameter is"
#~ " set. For example, the following "
#~ "specifies a dictionary with one required"
#~ " and one not-required key::"
#~ msgstr ""

#~ msgid ""
#~ "The new :data:`~typing.Self` annotation "
#~ "provides a simple and intuitive way "
#~ "to annotate methods that return an "
#~ "instance of their class. This behaves"
#~ " the same as the "
#~ ":data:`~typing.TypeVar`-based approach specified in"
#~ " :pep:`484` but is more concise and"
#~ " easier to follow."
#~ msgstr ""

#~ msgid ""
#~ "Common use cases include alternative "
#~ "constructors provided as classmethods and "
#~ ":meth:`~object.__enter__` methods that return "
#~ "``self``::"
#~ msgstr ""

#~ msgid ""
#~ ":data:`~typing.dataclass_transform` may be used "
#~ "to decorate a class, metaclass, or "
#~ "a function that is itself a "
#~ "decorator. The presence of "
#~ "``@dataclass_transform()`` tells a static type"
#~ " checker that the decorated object "
#~ "performs runtime \"magic\" that transforms "
#~ "a class, giving it "
#~ ":func:`dataclasses.dataclass`-like behaviors."
#~ msgstr ""

#~ msgid ""
#~ "Starred expressions can be used in "
#~ ":ref:`for statements<for>`. (See :issue:`46725` "
#~ "for more details.)"
#~ msgstr ""

#~ msgid ""
#~ "Asynchronous comprehensions are now allowed"
#~ " inside comprehensions in asynchronous "
#~ "functions. Outer comprehensions implicitly "
#~ "become asynchronous. (Contributed by Serhiy"
#~ " Storchaka in :issue:`33346`.)"
#~ msgstr ""

#~ msgid ""
#~ "A :exc:`TypeError` is now raised instead"
#~ " of an :exc:`AttributeError` in "
#~ ":meth:`contextlib.ExitStack.enter_context` and "
#~ ":meth:`contextlib.AsyncExitStack.enter_async_context` for "
#~ "objects which do not support the "
#~ ":term:`context manager` or :term:`asynchronous "
#~ "context manager` protocols correspondingly. "
#~ "(Contributed by Serhiy Storchaka in "
#~ ":issue:`44471`.)"
#~ msgstr ""

#~ msgid ""
#~ "A :exc:`TypeError` is now raised instead"
#~ " of an :exc:`AttributeError` in "
#~ ":keyword:`with` and :keyword:`async with` "
#~ "statements for objects which do not "
#~ "support the :term:`context manager` or "
#~ ":term:`asynchronous context manager` protocols "
#~ "correspondingly. (Contributed by Serhiy "
#~ "Storchaka in :issue:`12022`.)"
#~ msgstr ""

#~ msgid ""
#~ "Added :meth:`object.__getstate__` which provides "
#~ "the default implementation of the "
#~ "``__getstate__()`` method.  :mod:`Copying <copy>`"
#~ " and :mod:`pickling <pickle>` instances of"
#~ " subclasses of builtin types "
#~ ":class:`bytearray`, :class:`set`, :class:`frozenset`, "
#~ ":class:`collections.OrderedDict`, :class:`collections.deque`,"
#~ " :class:`weakref.WeakSet`, and :class:`datetime.tzinfo`"
#~ " now copies and pickles instance "
#~ "attributes implemented as :term:`slots "
#~ "<__slots__>`. (Contributed by Serhiy Storchaka"
#~ " in :issue:`26579`.)"
#~ msgstr ""

#~ msgid ""
#~ "Add :option:`-P` command line option and"
#~ " :envvar:`PYTHONSAFEPATH` environment variable to"
#~ " not prepend a potentially unsafe "
#~ "path to :data:`sys.path` such as the "
#~ "current directory, the script's directory "
#~ "or an empty string. (Contributed by "
#~ "Victor Stinner in :gh:`57684`.)"
#~ msgstr ""

#~ msgid ""
#~ "A ``\"z\"`` option was added to "
#~ "the format specification mini-language "
#~ "that coerces negative zero to zero "
#~ "after rounding to the format precision."
#~ "  See :pep:`682` for more details.  "
#~ "(Contributed by John Belmonte in "
#~ ":gh:`90153`.)"
#~ msgstr ""

#~ msgid ""
#~ "Special methods :meth:`complex.__complex__` and "
#~ ":meth:`bytes.__bytes__` are implemented to "
#~ "support :class:`typing.SupportsComplex` and "
#~ ":class:`typing.SupportsBytes` protocols. (Contributed "
#~ "by Mark Dickinson and Dong-hee Na"
#~ " in :issue:`24234`.)"
#~ msgstr ""

#~ msgid ""
#~ "``siphash13`` is added as a new "
#~ "internal hashing algorithms. It has "
#~ "similar security properties as ``siphash24``"
#~ " but it is slightly faster for "
#~ "long inputs. ``str``, ``bytes``, and "
#~ "some other types now use it as "
#~ "default algorithm for :func:`hash`. :pep:`552`"
#~ " hash-based pyc files now use "
#~ "``siphash13``, too. (Contributed by Inada "
#~ "Naoki in :issue:`29410`.)"
#~ msgstr ""

#~ msgid ""
#~ "The interpreter state's representation of "
#~ "handled exceptions (a.k.a exc_info, or "
#~ "_PyErr_StackItem) now has only the "
#~ "``exc_value`` field, ``exc_type`` and "
#~ "``exc_traceback`` have been removed as "
#~ "their values can be derived from "
#~ "``exc_value``. (Contributed by Irit Katriel"
#~ " in :issue:`45711`.)"
#~ msgstr ""

#~ msgid ""
#~ "A new command line option for the"
#~ " Windows installer ``AppendPath`` has been"
#~ " added. It behaves similiar to "
#~ "``PrependPath`` but appends the install "
#~ "and scripts directories instead of "
#~ "prepending them. (Contributed by Bastian "
#~ "Neuburger in :issue:`44934`.)"
#~ msgstr ""

#~ msgid ""
#~ "A new module, :mod:`tomllib`, was added"
#~ " for parsing TOML. (Contributed by "
#~ "Taneli Hukkinen in :issue:`40059`.)"
#~ msgstr ""

#~ msgid ""
#~ ":mod:`wsgiref.types`, containing WSGI-specific "
#~ "types for static type checking, was "
#~ "added. (Contributed by Sebastian Rittau "
#~ "in :issue:`42012`.)"
#~ msgstr ""

#~ msgid ""
#~ "Add raw datagram socket functions to "
#~ "the event loop: "
#~ ":meth:`~asyncio.AbstractEventLoop.sock_sendto`, "
#~ ":meth:`~asyncio.AbstractEventLoop.sock_recvfrom` and "
#~ ":meth:`~asyncio.AbstractEventLoop.sock_recvfrom_into`. "
#~ "(Contributed by Alex Grönholm in "
#~ ":issue:`46805`.)"
#~ msgstr ""

#~ msgid ""
#~ "Add :meth:`~asyncio.streams.StreamWriter.start_tls` method"
#~ " for upgrading existing stream-based "
#~ "connections to TLS. (Contributed by Ian"
#~ " Good in :issue:`34975`.)"
#~ msgstr ""

#~ msgid ""
#~ "Add :class:`~asyncio.Barrier` class to the "
#~ "synchronization primitives of the asyncio "
#~ "library. (Contributed by Yves Duprat and"
#~ " Andrew Svetlov in :gh:`87518`.)"
#~ msgstr ""

#~ msgid ""
#~ "Apply syntax highlighting to `.pyi` "
#~ "files. (Contributed by Alex Waygood and"
#~ " Terry Jan Reedy in :issue:`45447`.)"
#~ msgstr ""

#~ msgid ""
#~ "Change the frame-related functions in"
#~ " the :mod:`inspect` module to return "
#~ "a regular object (that is backwards "
#~ "compatible with the old tuple-like "
#~ "interface) that include the extended "
#~ ":pep:`657` position information (end line "
#~ "number, column and end column). The "
#~ "affected functions are: "
#~ ":func:`inspect.getframeinfo`, :func:`inspect.getouterframes`,"
#~ " :func:`inspect.getinnerframes`, :func:`inspect.stack` "
#~ "and :func:`inspect.trace`. (Contributed by "
#~ "Pablo Galindo in :gh:`88116`)"
#~ msgstr ""

#~ msgid ""
#~ ":meth:`~socket.create_connection` has an option "
#~ "to raise, in case of failure to"
#~ " connect, an :exc:`ExceptionGroup` containing "
#~ "all errors instead of only raising "
#~ "the last error. (Contributed by Irit "
#~ "Katriel in :issue:`29980`)."
#~ msgstr ""

#~ msgid ""
#~ "Add :meth:`~sqlite3.Connection.blobopen` to "
#~ ":class:`sqlite3.Connection`. :class:`sqlite3.Blob` allows"
#~ " incremental I/O operations on blobs. "
#~ "(Contributed by Aviv Palivoda and Erlend"
#~ " E. Aasland in :issue:`24905`)"
#~ msgstr ""

#~ msgid ""
#~ "Two new :ref:`installation schemes "
#~ "<installation_paths>` (*posix_venv*, *nt_venv* and"
#~ " *venv*) were added and are used "
#~ "when Python creates new virtual "
#~ "environments or when it is running "
#~ "from a virtual environment. The first"
#~ " two schemes (*posix_venv* and *nt_venv*)"
#~ " are OS-specific for non-Windows "
#~ "and Windows, the *venv* is essentially"
#~ " an alias to one of them "
#~ "according to the OS Python runs "
#~ "on. This is useful for downstream "
#~ "distributors who modify "
#~ ":func:`sysconfig.get_preferred_scheme`. Third party "
#~ "code that creates new virtual "
#~ "environments should use the new *venv*"
#~ " installation scheme to determine the "
#~ "paths, as does :mod:`venv`. (Contributed "
#~ "by Miro Hrončok in :issue:`45413`.)"
#~ msgstr ""

#~ msgid ""
#~ "The Unicode database has been updated"
#~ " to version 14.0.0. (:issue:`45190`)."
#~ msgstr ""

#~ msgid ""
#~ "CPython 3.11 is on average `25% "
#~ "faster <https://github.com/faster-cpython/ideas/blob/main"
#~ "/main-vs-310.rst>`_ than CPython 3.10 when"
#~ " measured with the `pyperformance "
#~ "<https://github.com/python/pyperformance>`_ benchmark "
#~ "suite, and compiled with GCC on "
#~ "Ubuntu Linux. Depending on your "
#~ "workload, the speedup could be up "
#~ "to 10-60% faster."
#~ msgstr ""

#~ msgid ""
#~ "When sorting using tuples as keys, "
#~ "the order of the result may differ"
#~ " from earlier releases if the tuple"
#~ " elements don't define a total "
#~ "ordering (see :ref:`expressions-value-"
#~ "comparisons` for information on total "
#~ "ordering).  It's generally true that the"
#~ " result of sorting simply isn't "
#~ "well-defined in the absence of a "
#~ "total ordering on list elements."
#~ msgstr ""

#~ msgid ""
#~ "Building Python now requires a C11 "
#~ "compiler without optional C11 features. "
#~ "(Contributed by Victor Stinner in "
#~ ":issue:`46656`.)"
#~ msgstr ""

#~ msgid ""
#~ "Freelists for object structs can now "
#~ "be disabled. A new :program:`configure` "
#~ "option :option:`!--without-freelists` can be"
#~ " used to disable all freelists except"
#~ " empty tuple singleton. (Contributed by "
#~ "Christian Heimes in :issue:`45522`)"
#~ msgstr ""

#~ msgid ""
#~ "Build dependencies, compiler flags, and "
#~ "linker flags for most stdlib extension"
#~ " modules are now detected by "
#~ ":program:`configure`. libffi, libnsl, libsqlite3,"
#~ " zlib, bzip2, liblzma, libcrypt, Tcl/Tk "
#~ "libs, and uuid flags are detected "
#~ "by ``pkg-config`` (when available). "
#~ "(Contributed by Christian Heimes and "
#~ "Erlend Egeberg Aasland in :issue:`45847`, "
#~ ":issue:`45747`, and :issue:`45763`.)"
#~ msgstr ""

#~ msgid ""
#~ "Use the environment variables ``TCLTK_CFLAGS``"
#~ " and ``TCLTK_LIBS`` to manually specify "
#~ "the location of Tcl/Tk headers and "
#~ "libraries. The :program:`configure` options "
#~ "``--with-tcltk-includes`` and ``--with-"
#~ "tcltk-libs`` have been removed."
#~ msgstr ""

#~ msgid ""
#~ "CPython now has experimental support for"
#~ " cross compiling to WebAssembly platform"
#~ " ``wasm32-emscripten``. The effort is "
#~ "inspired by previous work like Pyodide."
#~ " (Contributed by Christian Heimes and "
#~ "Ethan Smith in :issue:`40280`.)"
#~ msgstr ""

#~ msgid ""
#~ ":c:type:`_frozen` has a new ``is_package`` "
#~ "field to indicate whether or not "
#~ "the frozen module is a package.  "
#~ "Previously, a negative value in the "
#~ "``size`` field was the indicator.  Now"
#~ " only non-negative values be used "
#~ "for ``size``. (Contributed by Kumar "
#~ "Aditya in :issue:`46608`.)"
#~ msgstr ""

#~ msgid ""
#~ ":c:type:`PyCodeObject` no longer has a "
#~ "``co_code`` field.  Instead, use "
#~ "``PyObject_GetAttrString(code_object, \"co_code\")`` or"
#~ " :c:func:`PyCode_GetCode` to get the "
#~ "underlying bytes object. (Contributed by "
#~ "Brandt Bucher in :issue:`46841` and Ken"
#~ " Jin in :gh:`92154`.)"
#~ msgstr ""

