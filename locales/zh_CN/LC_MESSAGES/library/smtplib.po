# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2021, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
# Translators:
# Arisaka97 <solitaire2312@gmail.com>, 2021
# 汪心禾 <wangxinhe06@gmail.com>, 2021
# 陈也在哦 <wenbinchen150@icloud.com>, 2021
# ppcfish <ppcfish@gmail.com>, 2021
# Freesand Leo <yuqinju@163.com>, 2021
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.10\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-07-27 13:07+0000\n"
"PO-Revision-Date: 2021-06-28 01:13+0000\n"
"Last-Translator: Freesand Leo <yuqinju@163.com>, 2021\n"
"Language-Team: Chinese (China) (https://www.transifex.com/python-doc/teams/5390/zh_CN/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: zh_CN\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../library/smtplib.rst:2
msgid ":mod:`smtplib` --- SMTP protocol client"
msgstr ":mod:`smtplib` ---SMTP协议客户端"

#: ../../library/smtplib.rst:9
msgid "**Source code:** :source:`Lib/smtplib.py`"
msgstr "**源代码：** :source:`Lib/smtplib.py`"

#: ../../library/smtplib.rst:17
msgid ""
"The :mod:`smtplib` module defines an SMTP client session object that can be "
"used to send mail to any internet machine with an SMTP or ESMTP listener "
"daemon.  For details of SMTP and ESMTP operation, consult :rfc:`821` (Simple"
" Mail Transfer Protocol) and :rfc:`1869` (SMTP Service Extensions)."
msgstr ""

#: ../../library/smtplib.rst:25
msgid ""
"An :class:`SMTP` instance encapsulates an SMTP connection.  It has methods "
"that support a full repertoire of SMTP and ESMTP operations. If the optional"
" host and port parameters are given, the SMTP :meth:`connect` method is "
"called with those parameters during initialization.  If specified, "
"*local_hostname* is used as the FQDN of the local host in the HELO/EHLO "
"command.  Otherwise, the local hostname is found using "
":func:`socket.getfqdn`.  If the :meth:`connect` call returns anything other "
"than a success code, an :exc:`SMTPConnectError` is raised. The optional "
"*timeout* parameter specifies a timeout in seconds for blocking operations "
"like the connection attempt (if not specified, the global default timeout "
"setting will be used).  If the timeout expires, :exc:`TimeoutError` is "
"raised.  The optional source_address parameter allows binding to some "
"specific source address in a machine with multiple network interfaces, "
"and/or to some specific source TCP port. It takes a 2-tuple (host, port), "
"for the socket to bind to as its source address before connecting. If "
"omitted (or if host or port are ``''`` and/or 0 respectively) the OS default"
" behavior will be used."
msgstr ""

#: ../../library/smtplib.rst:43
msgid ""
"For normal use, you should only require the initialization/connect, "
":meth:`sendmail`, and :meth:`SMTP.quit` methods. An example is included "
"below."
msgstr ""
"正常使用时，只需要初始化或 connect 方法，:meth:`sendmail` 方法，再加上 :meth:`SMTP.quit` "
"方法即可。下文包括了一个示例。"

#: ../../library/smtplib.rst:47
msgid ""
"The :class:`SMTP` class supports the :keyword:`with` statement.  When used "
"like this, the SMTP ``QUIT`` command is issued automatically when the "
":keyword:`!with` statement exits.  E.g.::"
msgstr ""
":class:`SMTP` 类支持 :keyword:`with` 语句。当这样使用时，:keyword:`!with` 语句一退出就会自动发出 "
"SMTP ``QUIT`` 命令。例如::"

#: ../../library/smtplib.rst:58
msgid ""
"Raises an :ref:`auditing event <auditing>` ``smtplib.send`` with arguments "
"``self``, ``data``."
msgstr ""

#: ../../library/smtplib.rst:60
msgid ""
"All commands will raise an :ref:`auditing event <auditing>` "
"``smtplib.SMTP.send`` with arguments ``self`` and ``data``, where ``data`` "
"is the bytes about to be sent to the remote host."
msgstr ""

#: ../../library/smtplib.rst:64
msgid "Support for the :keyword:`with` statement was added."
msgstr "添加了对 :keyword:`with` 语句的支持。"

#: ../../library/smtplib.rst:67 ../../library/smtplib.rst:99
msgid "source_address argument was added."
msgstr ""

#: ../../library/smtplib.rst:70
msgid "The SMTPUTF8 extension (:rfc:`6531`) is now supported."
msgstr ""

#: ../../library/smtplib.rst:73 ../../library/smtplib.rst:114
msgid ""
"If the *timeout* parameter is set to be zero, it will raise a "
":class:`ValueError` to prevent the creation of a non-blocking socket"
msgstr ""

#: ../../library/smtplib.rst:81
msgid ""
"An :class:`SMTP_SSL` instance behaves exactly the same as instances of "
":class:`SMTP`. :class:`SMTP_SSL` should be used for situations where SSL is "
"required from the beginning of the connection and using :meth:`starttls` is "
"not appropriate. If *host* is not specified, the local host is used. If "
"*port* is zero, the standard SMTP-over-SSL port (465) is used.  The optional"
" arguments *local_hostname*, *timeout* and *source_address* have the same "
"meaning as they do in the :class:`SMTP` class.  *context*, also optional, "
"can contain a :class:`~ssl.SSLContext` and allows configuring various "
"aspects of the secure connection.  Please read :ref:`ssl-security` for best "
"practices."
msgstr ""
":class:`SMTP_SSL` 实例与 :class:`SMTP` 实例的行为完全相同。在开始连接就需要 SSL，且 "
":meth:`starttls` 不适合的情况下，应该使用 :class:`SMTP_SSL`。如果未指定 *host*，则使用 "
"localhost。如果 *port* 为 0，则使用标准 SMTP-over-SSL 端口（465）。可选参数 "
"*local_hostname*、*timeout* 和 *source_address* 的含义与 :class:`SMTP` 类中的相同。可选参数 "
"*context* 是一个 :class:`~ssl.SSLContext` 对象，可以从多个方面配置安全连接。请阅读 :ref:`ssl-"
"security` 以获取最佳实践。"

#: ../../library/smtplib.rst:92
msgid ""
"*keyfile* and *certfile* are a legacy alternative to *context*, and can "
"point to a PEM formatted private key and certificate chain file for the SSL "
"connection."
msgstr ""

#: ../../library/smtplib.rst:96 ../../library/smtplib.rst:427
msgid "*context* was added."
msgstr "增加了 *context*。"

#: ../../library/smtplib.rst:102
msgid ""
"The class now supports hostname check with "
":attr:`ssl.SSLContext.check_hostname` and *Server Name Indication* (see "
":data:`ssl.HAS_SNI`)."
msgstr ""
"本类现在支持使用 :attr:`ssl.SSLContext.check_hostname` 和 *服务器名称指示* （参阅 "
":data:`ssl.HAS_SNI`）进行主机名检查。"

#: ../../library/smtplib.rst:109 ../../library/smtplib.rst:413
msgid ""
"*keyfile* and *certfile* are deprecated in favor of *context*. Please use "
":meth:`ssl.SSLContext.load_cert_chain` instead, or let "
":func:`ssl.create_default_context` select the system's trusted CA "
"certificates for you."
msgstr ""
"*keyfile* 和 *certfile* 已弃用并转而推荐 *context*。 请改用 "
":meth:`ssl.SSLContext.load_cert_chain` 或让 :func:`ssl.create_default_context`"
" 为你选择系统所信任的 CA 证书。"

#: ../../library/smtplib.rst:121
msgid ""
"The LMTP protocol, which is very similar to ESMTP, is heavily based on the "
"standard SMTP client. It's common to use Unix sockets for LMTP, so our "
":meth:`connect` method must support that as well as a regular host:port "
"server. The optional arguments local_hostname and source_address have the "
"same meaning as they do in the :class:`SMTP` class. To specify a Unix "
"socket, you must use an absolute path for *host*, starting with a '/'."
msgstr ""
"LMTP 协议与 ESMTP 非常相似，它很大程度上基于标准的 SMTP 客户端。将 Unix 套接字用于 LMTP 是很常见的，因此 "
":meth:`connect` 方法支持 Unix 套接字，也支持常规的 host:port 服务器。可选参数 local_hostname 和 "
"source_address 的含义与 :class:`SMTP` 类中的相同。要指定 Unix 套接字，*host* 必须使用绝对路径，以 '/' "
"开头。"

#: ../../library/smtplib.rst:128
msgid ""
"Authentication is supported, using the regular SMTP mechanism. When using a "
"Unix socket, LMTP generally don't support or require any authentication, but"
" your mileage might vary."
msgstr ""

#: ../../library/smtplib.rst:132
msgid "The optional *timeout* parameter was added."
msgstr "添加了可选的 *timeout* 形参。"

#: ../../library/smtplib.rst:136
msgid "A nice selection of exceptions is defined as well:"
msgstr ""

#: ../../library/smtplib.rst:141
msgid ""
"Subclass of :exc:`OSError` that is the base exception class for all the "
"other exceptions provided by this module."
msgstr ""

#: ../../library/smtplib.rst:144
msgid "SMTPException became subclass of :exc:`OSError`"
msgstr ""

#: ../../library/smtplib.rst:150
msgid ""
"This exception is raised when the server unexpectedly disconnects, or when "
"an attempt is made to use the :class:`SMTP` instance before connecting it to"
" a server."
msgstr ""

#: ../../library/smtplib.rst:157
msgid ""
"Base class for all exceptions that include an SMTP error code. These "
"exceptions are generated in some instances when the SMTP server returns an "
"error code.  The error code is stored in the :attr:`smtp_code` attribute of "
"the error, and the :attr:`smtp_error` attribute is set to the error message."
msgstr ""

#: ../../library/smtplib.rst:165
msgid ""
"Sender address refused.  In addition to the attributes set by on all "
":exc:`SMTPResponseException` exceptions, this sets 'sender' to the string "
"that the SMTP server refused."
msgstr ""

#: ../../library/smtplib.rst:172
msgid ""
"All recipient addresses refused.  The errors for each recipient are "
"accessible through the attribute :attr:`recipients`, which is a dictionary "
"of exactly the same sort as :meth:`SMTP.sendmail` returns."
msgstr ""

#: ../../library/smtplib.rst:179
msgid "The SMTP server refused to accept the message data."
msgstr ""

#: ../../library/smtplib.rst:184
msgid "Error occurred during establishment of a connection  with the server."
msgstr ""

#: ../../library/smtplib.rst:189
msgid "The server refused our ``HELO`` message."
msgstr ""

#: ../../library/smtplib.rst:194
msgid "The command or option attempted is not supported by the server."
msgstr ""

#: ../../library/smtplib.rst:201
msgid ""
"SMTP authentication went wrong.  Most probably the server didn't accept the "
"username/password combination provided."
msgstr ""

#: ../../library/smtplib.rst:209
msgid ":rfc:`821` - Simple Mail Transfer Protocol"
msgstr ""

#: ../../library/smtplib.rst:208
msgid ""
"Protocol definition for SMTP.  This document covers the model, operating "
"procedure, and protocol details for SMTP."
msgstr ""

#: ../../library/smtplib.rst:213
msgid ":rfc:`1869` - SMTP Service Extensions"
msgstr ""

#: ../../library/smtplib.rst:212
msgid ""
"Definition of the ESMTP extensions for SMTP.  This describes a framework for"
" extending SMTP with new commands, supporting dynamic discovery of the "
"commands provided by the server, and defines a few additional commands."
msgstr ""

#: ../../library/smtplib.rst:220
msgid "SMTP Objects"
msgstr ""

#: ../../library/smtplib.rst:222
msgid "An :class:`SMTP` instance has the following methods:"
msgstr ""

#: ../../library/smtplib.rst:227
msgid ""
"Set the debug output level.  A value of 1 or ``True`` for *level* results in"
" debug messages for connection and for all messages sent to and received "
"from the server.  A value of 2 for *level* results in these messages being "
"timestamped."
msgstr ""

#: ../../library/smtplib.rst:232
msgid "Added debuglevel 2."
msgstr ""

#: ../../library/smtplib.rst:237
msgid ""
"Send a command *cmd* to the server.  The optional argument *args* is simply "
"concatenated to the command, separated by a space."
msgstr ""

#: ../../library/smtplib.rst:240
msgid ""
"This returns a 2-tuple composed of a numeric response code and the actual "
"response line (multiline responses are joined into one long line.)"
msgstr ""

#: ../../library/smtplib.rst:243
msgid ""
"In normal operation it should not be necessary to call this method "
"explicitly. It is used to implement other methods and may be useful for "
"testing private extensions."
msgstr ""

#: ../../library/smtplib.rst:247
msgid ""
"If the connection to the server is lost while waiting for the reply, "
":exc:`SMTPServerDisconnected` will be raised."
msgstr ""

#: ../../library/smtplib.rst:253
msgid ""
"Connect to a host on a given port.  The defaults are to connect to the local"
" host at the standard SMTP port (25). If the hostname ends with a colon "
"(``':'``) followed by a number, that suffix will be stripped off and the "
"number interpreted as the port number to use. This method is automatically "
"invoked by the constructor if a host is specified during instantiation.  "
"Returns a 2-tuple of the response code and message sent by the server in its"
" connection response."
msgstr ""
"连接到某个主机的某个端口。默认是连接到 localhost 的标准 SMTP 端口（25）上。如果主机名以冒号 (``':'``) "
"结尾，后跟数字，则该后缀将被删除，且数字将视作要使用的端口号。如果在实例化时指定了 host，则构造函数会自动调用本方法。返回包含响应码和响应消息的 2"
" 元组，它们由服务器在其连接响应中发送。"

#: ../../library/smtplib.rst:261
msgid ""
"Raises an :ref:`auditing event <auditing>` ``smtplib.connect`` with "
"arguments ``self``, ``host``, ``port``."
msgstr ""

#: ../../library/smtplib.rst:266
msgid ""
"Identify yourself to the SMTP server using ``HELO``.  The hostname argument "
"defaults to the fully qualified domain name of the local host. The message "
"returned by the server is stored as the :attr:`helo_resp` attribute of the "
"object."
msgstr ""

#: ../../library/smtplib.rst:271
msgid ""
"In normal operation it should not be necessary to call this method "
"explicitly. It will be implicitly called by the :meth:`sendmail` when "
"necessary."
msgstr ""

#: ../../library/smtplib.rst:277
msgid ""
"Identify yourself to an ESMTP server using ``EHLO``.  The hostname argument "
"defaults to the fully qualified domain name of the local host.  Examine the "
"response for ESMTP option and store them for use by :meth:`has_extn`. Also "
"sets several informational attributes: the message returned by the server is"
" stored as the :attr:`ehlo_resp` attribute, :attr:`does_esmtp` is set to "
"``True`` or ``False`` depending on whether the server supports ESMTP, and "
":attr:`esmtp_features` will be a dictionary containing the names of the SMTP"
" service extensions this server supports, and their parameters (if any)."
msgstr ""

#: ../../library/smtplib.rst:287
msgid ""
"Unless you wish to use :meth:`has_extn` before sending mail, it should not "
"be necessary to call this method explicitly.  It will be implicitly called "
"by :meth:`sendmail` when necessary."
msgstr ""

#: ../../library/smtplib.rst:293
msgid ""
"This method calls :meth:`ehlo` and/or :meth:`helo` if there has been no "
"previous ``EHLO`` or ``HELO`` command this session.  It tries ESMTP ``EHLO``"
" first."
msgstr ""

#: ../../library/smtplib.rst:297 ../../library/smtplib.rst:327
#: ../../library/smtplib.rst:419 ../../library/smtplib.rst:488
msgid ":exc:`SMTPHeloError`"
msgstr ""

#: ../../library/smtplib.rst:298 ../../library/smtplib.rst:327
#: ../../library/smtplib.rst:419 ../../library/smtplib.rst:488
msgid "The server didn't reply properly to the ``HELO`` greeting."
msgstr ""

#: ../../library/smtplib.rst:302
msgid ""
"Return :const:`True` if *name* is in the set of SMTP service extensions "
"returned by the server, :const:`False` otherwise. Case is ignored."
msgstr ""

#: ../../library/smtplib.rst:308
msgid ""
"Check the validity of an address on this server using SMTP ``VRFY``. Returns"
" a tuple consisting of code 250 and a full :rfc:`822` address (including "
"human name) if the user address is valid. Otherwise returns an SMTP error "
"code of 400 or greater and an error string."
msgstr ""

#: ../../library/smtplib.rst:315
msgid "Many sites disable SMTP ``VRFY`` in order to foil spammers."
msgstr ""

#: ../../library/smtplib.rst:320
msgid ""
"Log in on an SMTP server that requires authentication. The arguments are the"
" username and the password to authenticate with. If there has been no "
"previous ``EHLO`` or ``HELO`` command this session, this method tries ESMTP "
"``EHLO`` first. This method will return normally if the authentication was "
"successful, or may raise the following exceptions:"
msgstr ""

#: ../../library/smtplib.rst:330
msgid ":exc:`SMTPAuthenticationError`"
msgstr ""

#: ../../library/smtplib.rst:330
msgid "The server didn't accept the username/password combination."
msgstr ""

#: ../../library/smtplib.rst:333 ../../library/smtplib.rst:422
#: ../../library/smtplib.rst:499
msgid ":exc:`SMTPNotSupportedError`"
msgstr ""

#: ../../library/smtplib.rst:333
msgid "The ``AUTH`` command is not supported by the server."
msgstr ""

#: ../../library/smtplib.rst:336
msgid ":exc:`SMTPException`"
msgstr ""

#: ../../library/smtplib.rst:336
msgid "No suitable authentication method was found."
msgstr ""

#: ../../library/smtplib.rst:338
msgid ""
"Each of the authentication methods supported by :mod:`smtplib` are tried in "
"turn if they are advertised as supported by the server.  See :meth:`auth` "
"for a list of supported authentication methods.  *initial_response_ok* is "
"passed through to :meth:`auth`."
msgstr ""

#: ../../library/smtplib.rst:343
msgid ""
"Optional keyword argument *initial_response_ok* specifies whether, for "
"authentication methods that support it, an \"initial response\" as specified"
" in :rfc:`4954` can be sent along with the ``AUTH`` command, rather than "
"requiring a challenge/response."
msgstr ""

#: ../../library/smtplib.rst:348
msgid ""
":exc:`SMTPNotSupportedError` may be raised, and the *initial_response_ok* "
"parameter was added."
msgstr ""

#: ../../library/smtplib.rst:355
msgid ""
"Issue an ``SMTP`` ``AUTH`` command for the specified authentication "
"*mechanism*, and handle the challenge response via *authobject*."
msgstr ""

#: ../../library/smtplib.rst:358
msgid ""
"*mechanism* specifies which authentication mechanism is to be used as "
"argument to the ``AUTH`` command; the valid values are those listed in the "
"``auth`` element of :attr:`esmtp_features`."
msgstr ""

#: ../../library/smtplib.rst:362
msgid ""
"*authobject* must be a callable object taking an optional single argument:"
msgstr ""

#: ../../library/smtplib.rst:364
msgid "data = authobject(challenge=None)"
msgstr ""

#: ../../library/smtplib.rst:366
msgid ""
"If optional keyword argument *initial_response_ok* is true, ``authobject()``"
" will be called first with no argument.  It can return the :rfc:`4954` "
"\"initial response\" ASCII ``str`` which will be encoded and sent with the "
"``AUTH`` command as below.  If the ``authobject()`` does not support an "
"initial response (e.g. because it requires a challenge), it should return "
"``None`` when called with ``challenge=None``.  If *initial_response_ok* is "
"false, then ``authobject()`` will not be called first with ``None``."
msgstr ""

#: ../../library/smtplib.rst:374
msgid ""
"If the initial response check returns ``None``, or if *initial_response_ok* "
"is false, ``authobject()`` will be called to process the server's challenge "
"response; the *challenge* argument it is passed will be a ``bytes``.  It "
"should return ASCII ``str`` *data* that will be base64 encoded and sent to "
"the server."
msgstr ""

#: ../../library/smtplib.rst:380
msgid ""
"The ``SMTP`` class provides ``authobjects`` for the ``CRAM-MD5``, ``PLAIN``,"
" and ``LOGIN`` mechanisms; they are named ``SMTP.auth_cram_md5``, "
"``SMTP.auth_plain``, and ``SMTP.auth_login`` respectively.  They all require"
" that the ``user`` and ``password`` properties of the ``SMTP`` instance are "
"set to appropriate values."
msgstr ""

#: ../../library/smtplib.rst:386
msgid ""
"User code does not normally need to call ``auth`` directly, but can instead "
"call the :meth:`login` method, which will try each of the above mechanisms "
"in turn, in the order listed.  ``auth`` is exposed to facilitate the "
"implementation of authentication methods not (or not yet) supported directly"
" by :mod:`smtplib`."
msgstr ""

#: ../../library/smtplib.rst:397
msgid ""
"Put the SMTP connection in TLS (Transport Layer Security) mode.  All SMTP "
"commands that follow will be encrypted.  You should then call :meth:`ehlo` "
"again."
msgstr ""

#: ../../library/smtplib.rst:401
msgid ""
"If *keyfile* and *certfile* are provided, they are used to create an "
":class:`ssl.SSLContext`."
msgstr ""

#: ../../library/smtplib.rst:404
msgid ""
"Optional *context* parameter is an :class:`ssl.SSLContext` object; This is "
"an alternative to using a keyfile and a certfile and if specified both "
"*keyfile* and *certfile* should be ``None``."
msgstr ""

#: ../../library/smtplib.rst:408
msgid ""
"If there has been no previous ``EHLO`` or ``HELO`` command this session, "
"this method tries ESMTP ``EHLO`` first."
msgstr ""

#: ../../library/smtplib.rst:422
msgid "The server does not support the STARTTLS extension."
msgstr ""

#: ../../library/smtplib.rst:425
msgid ":exc:`RuntimeError`"
msgstr ":exc:`RuntimeError`"

#: ../../library/smtplib.rst:425
msgid "SSL/TLS support is not available to your Python interpreter."
msgstr ""

#: ../../library/smtplib.rst:430
msgid ""
"The method now supports hostname check with "
":attr:`SSLContext.check_hostname` and *Server Name Indicator* (see "
":data:`~ssl.HAS_SNI`)."
msgstr ""

#: ../../library/smtplib.rst:435
msgid ""
"The error raised for lack of STARTTLS support is now the "
":exc:`SMTPNotSupportedError` subclass instead of the base "
":exc:`SMTPException`."
msgstr ""

#: ../../library/smtplib.rst:443
msgid ""
"Send mail.  The required arguments are an :rfc:`822` from-address string, a "
"list of :rfc:`822` to-address strings (a bare string will be treated as a "
"list with 1 address), and a message string.  The caller may pass a list of "
"ESMTP options (such as ``8bitmime``) to be used in ``MAIL FROM`` commands as"
" *mail_options*. ESMTP options (such as ``DSN`` commands) that should be "
"used with all ``RCPT`` commands can be passed as *rcpt_options*.  (If you "
"need to use different ESMTP options to different recipients you have to use "
"the low-level methods such as :meth:`mail`, :meth:`rcpt` and :meth:`data` to"
" send the message.)"
msgstr ""
"发送邮件。必要参数是一个 :rfc:`822` 发件地址字符串，一个 :rfc:`822` 收件地址字符串列表（裸字符串将被视为含有 1 "
"个地址的列表），以及一个消息字符串。调用者可以将 ESMTP 选项列表（如 ``8bitmime``）作为 *mail_options* 传入，用于 "
"``MAIL FROM`` 命令。需要与所有 ``RCPT`` 命令一起使用的 ESMTP 选项（如 ``DSN`` 命令）可以作为 "
"*rcpt_options* 传入。（如果需要对不同的收件人使用不同的 ESMTP 选项，则必须使用底层的方法来发送消息，如 :meth:`mail`,"
" :meth:`rcpt` 和 :meth:`data`。）"

#: ../../library/smtplib.rst:454
msgid ""
"The *from_addr* and *to_addrs* parameters are used to construct the message "
"envelope used by the transport agents.  ``sendmail`` does not modify the "
"message headers in any way."
msgstr ""

#: ../../library/smtplib.rst:458
msgid ""
"*msg* may be a string containing characters in the ASCII range, or a byte "
"string.  A string is encoded to bytes using the ascii codec, and lone "
"``\\r`` and ``\\n`` characters are converted to ``\\r\\n`` characters.  A "
"byte string is not modified."
msgstr ""

#: ../../library/smtplib.rst:463
msgid ""
"If there has been no previous ``EHLO`` or ``HELO`` command this session, "
"this method tries ESMTP ``EHLO`` first. If the server does ESMTP, message "
"size and each of the specified options will be passed to it (if the option "
"is in the feature set the server advertises).  If ``EHLO`` fails, ``HELO`` "
"will be tried and ESMTP options suppressed."
msgstr ""

#: ../../library/smtplib.rst:469
msgid ""
"This method will return normally if the mail is accepted for at least one "
"recipient. Otherwise it will raise an exception.  That is, if this method "
"does not raise an exception, then someone should get your mail. If this "
"method does not raise an exception, it returns a dictionary, with one entry "
"for each recipient that was refused.  Each entry contains a tuple of the "
"SMTP error code and the accompanying error message sent by the server."
msgstr ""

#: ../../library/smtplib.rst:476
msgid ""
"If ``SMTPUTF8`` is included in *mail_options*, and the server supports it, "
"*from_addr* and *to_addrs* may contain non-ASCII characters."
msgstr ""

#: ../../library/smtplib.rst:479
msgid "This method may raise the following exceptions:"
msgstr ""

#: ../../library/smtplib.rst:485
msgid ":exc:`SMTPRecipientsRefused`"
msgstr ""

#: ../../library/smtplib.rst:482
msgid ""
"All recipients were refused.  Nobody got the mail.  The :attr:`recipients` "
"attribute of the exception object is a dictionary with information about the"
" refused recipients (like the one returned when at least one recipient was "
"accepted)."
msgstr ""

#: ../../library/smtplib.rst:491
msgid ":exc:`SMTPSenderRefused`"
msgstr ""

#: ../../library/smtplib.rst:491
msgid "The server didn't accept the *from_addr*."
msgstr ""

#: ../../library/smtplib.rst:495
msgid ":exc:`SMTPDataError`"
msgstr ""

#: ../../library/smtplib.rst:494
msgid ""
"The server replied with an unexpected error code (other than a refusal of a "
"recipient)."
msgstr ""

#: ../../library/smtplib.rst:498
msgid ""
"``SMTPUTF8`` was given in the *mail_options* but is not supported by the "
"server."
msgstr ""

#: ../../library/smtplib.rst:501
msgid ""
"Unless otherwise noted, the connection will be open even after an exception "
"is raised."
msgstr ""

#: ../../library/smtplib.rst:504
msgid "*msg* may be a byte string."
msgstr ""

#: ../../library/smtplib.rst:507
msgid ""
"``SMTPUTF8`` support added, and :exc:`SMTPNotSupportedError` may be raised "
"if ``SMTPUTF8`` is specified but the server does not support it."
msgstr ""

#: ../../library/smtplib.rst:515
msgid ""
"This is a convenience method for calling :meth:`sendmail` with the message "
"represented by an :class:`email.message.Message` object.  The arguments have"
" the same meaning as for :meth:`sendmail`, except that *msg* is a "
"``Message`` object."
msgstr ""
"本方法是一种快捷方法，用于带着消息调用 :meth:`sendmail`，消息由 :class:`email.message.Message` "
"对象表示。参数的含义与 :meth:`sendmail` 中的相同，除了 *msg*，它是一个 ``Message`` 对象。"

#: ../../library/smtplib.rst:520
msgid ""
"If *from_addr* is ``None`` or *to_addrs* is ``None``, ``send_message`` fills"
" those arguments with addresses extracted from the headers of *msg* as "
"specified in :rfc:`5322`\\: *from_addr* is set to the :mailheader:`Sender` "
"field if it is present, and otherwise to the :mailheader:`From` field. "
"*to_addrs* combines the values (if any) of the :mailheader:`To`, "
":mailheader:`Cc`, and :mailheader:`Bcc` fields from *msg*.  If exactly one "
"set of :mailheader:`Resent-*` headers appear in the message, the regular "
"headers are ignored and the :mailheader:`Resent-*` headers are used instead."
" If the message contains more than one set of :mailheader:`Resent-*` "
"headers, a :exc:`ValueError` is raised, since there is no way to "
"unambiguously detect the most recent set of :mailheader:`Resent-` headers."
msgstr ""
"如果 *from_addr* 为 ``None`` 或 *to_addrs* 为 ``None``，那么``send_message``将根据 "
":rfc:`5322`，从 *msg* 头部提取地址填充下列参数：如果头部存在 :mailheader:`Sender` 字段，则用它填充 "
"*from_addr*，不存在则用 :mailheader:`From` 字段填充 *from_addr*。*to_addrs* 组合了 *msg* "
"中的 :mailheader:`To`, :mailheader:`Cc` 和 :mailheader:`Bcc` "
"字段的值（字段存在的情况下）。如果一组 :mailheader:`Resent-*` 头部恰好出现在 message 中，那么就忽略常规的头部，改用 "
":mailheader:`Resent-*` 头部。如果 message 包含多组 :mailheader:`Resent-*` 头部，则引发 "
":exc:`ValueError`，因为无法明确检测出哪一组 :mailheader:`Resent-` 头部是最新的。"

#: ../../library/smtplib.rst:532
msgid ""
"``send_message`` serializes *msg* using "
":class:`~email.generator.BytesGenerator` with ``\\r\\n`` as the *linesep*, "
"and calls :meth:`sendmail` to transmit the resulting message.  Regardless of"
" the values of *from_addr* and *to_addrs*, ``send_message`` does not "
"transmit any :mailheader:`Bcc` or :mailheader:`Resent-Bcc` headers that may "
"appear in *msg*.  If any of the addresses in *from_addr* and *to_addrs* "
"contain non-ASCII characters and the server does not advertise ``SMTPUTF8`` "
"support, an :exc:`SMTPNotSupported` error is raised.  Otherwise the "
"``Message`` is serialized with a clone of its :mod:`~email.policy` with the "
":attr:`~email.policy.EmailPolicy.utf8` attribute set to ``True``, and "
"``SMTPUTF8`` and ``BODY=8BITMIME`` are added to *mail_options*."
msgstr ""
"``send_message`` 使用 :class:`~email.generator.BytesGenerator` 来序列化 *msg*，且将 "
"``\\r\\n`` 作为 *linesep*，并调用 :meth:`sendmail` 来传输序列化后的结果。无论 *from_addr* 和 "
"*to_addrs* 的值为何，``send_message`` 都不会传输 *msg* 中可能出现的 :mailheader:`Bcc` 或 "
":mailheader:`Resent-Bcc` 头部。如果 *from_addr* 和 *to_addrs* 中的某个地址包含非 ASCII "
"字符，且服务器没有声明支持 ``SMTPUTF8``，则引发 :exc:`SMTPNotSupported` 错误。如果服务器支持，则 "
"``Message`` 将按新克隆的 :mod:`~email.policy` 进行序列化，其中的 "
":attr:`~email.policy.EmailPolicy.utf8` 属性被设置为 ``True``，且 ``SMTPUTF8`` 和 "
"``BODY=8BITMIME`` 被添加到 *mail_options* 中。"

#: ../../library/smtplib.rst:546
msgid "Support for internationalized addresses (``SMTPUTF8``)."
msgstr ""

#: ../../library/smtplib.rst:552
msgid ""
"Terminate the SMTP session and close the connection.  Return the result of "
"the SMTP ``QUIT`` command."
msgstr ""

#: ../../library/smtplib.rst:556
msgid ""
"Low-level methods corresponding to the standard SMTP/ESMTP commands "
"``HELP``, ``RSET``, ``NOOP``, ``MAIL``, ``RCPT``, and ``DATA`` are also "
"supported. Normally these do not need to be called directly, so they are not"
" documented here.  For details, consult the module code."
msgstr ""

#: ../../library/smtplib.rst:565
msgid "SMTP Example"
msgstr ""

#: ../../library/smtplib.rst:567
msgid ""
"This example prompts the user for addresses needed in the message envelope "
"('To' and 'From' addresses), and the message to be delivered.  Note that the"
" headers to be included with the message must be included in the message as "
"entered; this example doesn't do any processing of the :rfc:`822` headers.  "
"In particular, the 'To' and 'From' addresses must be included in the message"
" headers explicitly. ::"
msgstr ""

#: ../../library/smtplib.rst:603
msgid ""
"In general, you will want to use the :mod:`email` package's features to "
"construct an email message, which you can then send via "
":meth:`~smtplib.SMTP.send_message`; see :ref:`email-examples`."
msgstr ""
