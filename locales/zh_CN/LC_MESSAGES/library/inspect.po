# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2021, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2021.
#
# Translators:
# Makdon <makdon@makdon.me>, 2021
# Freesand Leo <yuqinju@163.com>, 2021
# ppcfish <ppcfish@gmail.com>, 2021
# ruoyu zhang <ruoyu0088@gmail.com>, 2021
# Iterator <xicheng.li@ucdconnect.ie>, 2021
# Jiuh-star <jiuh.star@gmail.com>, 2021
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.10\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-10-12 09:44+0800\n"
"PO-Revision-Date: 2021-06-28 01:08+0000\n"
"Last-Translator: Jiuh-star <jiuh.star@gmail.com>, 2021\n"
"Language: zh_CN\n"
"Language-Team: Chinese (China) (https://www.transifex.com/python-"
"doc/teams/5390/zh_CN/)\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.10.3\n"

#: ../../library/inspect.rst:2
msgid ":mod:`inspect` --- Inspect live objects"
msgstr ":mod:`inspect` --- 检查对象"

#: ../../library/inspect.rst:10
msgid "**Source code:** :source:`Lib/inspect.py`"
msgstr "**源代码:** :source:`Lib/inspect.py`"

#: ../../library/inspect.rst:14
msgid ""
"The :mod:`inspect` module provides several useful functions to help get "
"information about live objects such as modules, classes, methods, "
"functions, tracebacks, frame objects, and code objects.  For example, it "
"can help you examine the contents of a class, retrieve the source code of"
" a method, extract and format the argument list for a function, or get "
"all the information you need to display a detailed traceback."
msgstr ""
":mod:`inspect` "
"模块提供了一些有用的函数帮助获取对象的信息，例如模块、类、方法、函数、回溯、帧对象以及代码对象。例如它可以帮助你检查类的内容，获取某个方法的源代码，取得并格式化某个函数的实参列表，或者获取你需要显示的回溯的详细信息。"

#: ../../library/inspect.rst:21
msgid ""
"There are four main kinds of services provided by this module: type "
"checking, getting source code, inspecting classes and functions, and "
"examining the interpreter stack."
msgstr "该模块提供了4种主要的功能：类型检查、获取源代码、检查类与函数、检查解释器的调用堆栈。"

#: ../../library/inspect.rst:29
msgid "Types and members"
msgstr "类型和成员"

#: ../../library/inspect.rst:31
msgid ""
"The :func:`getmembers` function retrieves the members of an object such "
"as a class or module. The functions whose names begin with \"is\" are "
"mainly provided as convenient choices for the second argument to "
":func:`getmembers`. They also help you determine when you can expect to "
"find the following special attributes:"
msgstr ""
":func:`getmembers` 函数获取对象的成员，例如类或模块。函数名以\"is\"开始的函数主要作为 "
":func:`getmembers` 的第 2 个实参使用。它们也可用于判定某对象是否有如下的特殊属性:"

#: ../../library/inspect.rst:41
msgid "Type"
msgstr "类型"

#: ../../library/inspect.rst:41
msgid "Attribute"
msgstr "属性"

#: ../../library/inspect.rst:41
msgid "Description"
msgstr "描述"

#: ../../library/inspect.rst:43
msgid "module"
msgstr "module -- 模块"

#: ../../library/inspect.rst:43 ../../library/inspect.rst:48
#: ../../library/inspect.rst:58 ../../library/inspect.rst:76
#: ../../library/inspect.rst:238
msgid "__doc__"
msgstr "__doc__"

#: ../../library/inspect.rst:43 ../../library/inspect.rst:48
#: ../../library/inspect.rst:58 ../../library/inspect.rst:76
#: ../../library/inspect.rst:238
msgid "documentation string"
msgstr "文档字符串"

#: ../../library/inspect.rst:45
msgid "__file__"
msgstr "__file__"

#: ../../library/inspect.rst:45
msgid "filename (missing for built-in modules)"
msgstr "文件名(内置模块没有文件名)"

#: ../../library/inspect.rst:48
msgid "class"
msgstr "class -- 类"

#: ../../library/inspect.rst:50 ../../library/inspect.rst:60
#: ../../library/inspect.rst:78 ../../library/inspect.rst:207
#: ../../library/inspect.rst:221 ../../library/inspect.rst:240
msgid "__name__"
msgstr "__name__"

#: ../../library/inspect.rst:50
msgid "name with which this class was defined"
msgstr "类定义时所使用的名称"

#: ../../library/inspect.rst:53 ../../library/inspect.rst:63
#: ../../library/inspect.rst:81 ../../library/inspect.rst:209
#: ../../library/inspect.rst:223 ../../library/inspect.rst:243
msgid "__qualname__"
msgstr "__qualname__"

#: ../../library/inspect.rst:53 ../../library/inspect.rst:63
#: ../../library/inspect.rst:81 ../../library/inspect.rst:209
#: ../../library/inspect.rst:223 ../../library/inspect.rst:243
msgid "qualified name"
msgstr "qualified name -- 限定名称"

#: ../../library/inspect.rst:55 ../../library/inspect.rst:73
#: ../../library/inspect.rst:106
msgid "__module__"
msgstr "__module__"

#: ../../library/inspect.rst:55
msgid "name of module in which this class was defined"
msgstr "该类型被定义时所在的模块的名称"

#: ../../library/inspect.rst:58
msgid "method"
msgstr "method -- 方法"

#: ../../library/inspect.rst:60
msgid "name with which this method was defined"
msgstr "该方法定义时所使用的名称"

#: ../../library/inspect.rst:65
msgid "__func__"
msgstr "__func__"

#: ../../library/inspect.rst:65
msgid "function object containing implementation of method"
msgstr "实现该方法的函数对象"

#: ../../library/inspect.rst:69 ../../library/inspect.rst:245
msgid "__self__"
msgstr "__self__"

#: ../../library/inspect.rst:69
msgid "instance to which this method is bound, or ``None``"
msgstr "该方法被绑定的实例，若没有绑定则为 ``None``"

#: ../../library/inspect.rst:73
msgid "name of module in which this method was defined"
msgstr "定义此方法的模块的名称"

#: ../../library/inspect.rst:76
msgid "function"
msgstr "function -- 函数"

#: ../../library/inspect.rst:78
msgid "name with which this function was defined"
msgstr "用于定义此函数的名称"

#: ../../library/inspect.rst:83
msgid "__code__"
msgstr "__code__"

#: ../../library/inspect.rst:83
msgid "code object containing compiled function :term:`bytecode`"
msgstr "包含已编译函数的代码对象 :term:`bytecode` "

#: ../../library/inspect.rst:87
msgid "__defaults__"
msgstr "__defaults__"

#: ../../library/inspect.rst:87
msgid "tuple of any default values for positional or keyword parameters"
msgstr "所有位置或关键字形参的默认值的元组"

#: ../../library/inspect.rst:91
msgid "__kwdefaults__"
msgstr "__kwdefaults__"

#: ../../library/inspect.rst:91
msgid "mapping of any default values for keyword-only parameters"
msgstr ""

#: ../../library/inspect.rst:95
msgid "__globals__"
msgstr "__globals__"

#: ../../library/inspect.rst:95
msgid "global namespace in which this function was defined"
msgstr ""

#: ../../library/inspect.rst:98
msgid "__builtins__"
msgstr ""

#: ../../library/inspect.rst:98
msgid "builtins namespace"
msgstr ""

#: ../../library/inspect.rst:100
msgid "__annotations__"
msgstr "__annotations__"

#: ../../library/inspect.rst:100
msgid ""
"mapping of parameters names to annotations; ``\"return\"`` key is "
"reserved for return annotations."
msgstr ""

#: ../../library/inspect.rst:106
msgid "name of module in which this function was defined"
msgstr ""

#: ../../library/inspect.rst:109
msgid "traceback"
msgstr "回溯"

#: ../../library/inspect.rst:109
msgid "tb_frame"
msgstr "tb_frame"

#: ../../library/inspect.rst:109
msgid "frame object at this level"
msgstr "此级别的框架对象"

#: ../../library/inspect.rst:112
msgid "tb_lasti"
msgstr "tb_lasti"

#: ../../library/inspect.rst:112 ../../library/inspect.rst:134
msgid "index of last attempted instruction in bytecode"
msgstr ""

#: ../../library/inspect.rst:115
msgid "tb_lineno"
msgstr "tb_lineno"

#: ../../library/inspect.rst:115 ../../library/inspect.rst:137
msgid "current line number in Python source code"
msgstr ""

#: ../../library/inspect.rst:118
msgid "tb_next"
msgstr "tb_next"

#: ../../library/inspect.rst:118
msgid "next inner traceback object (called by this level)"
msgstr ""

#: ../../library/inspect.rst:122 ../../library/inspect.rst:211
#: ../../library/inspect.rst:228
msgid "frame"
msgstr "框架"

#: ../../library/inspect.rst:122
msgid "f_back"
msgstr "f_back"

#: ../../library/inspect.rst:122
msgid "next outer frame object (this frame's caller)"
msgstr ""

#: ../../library/inspect.rst:125
msgid "f_builtins"
msgstr "f_builtins"

#: ../../library/inspect.rst:125
msgid "builtins namespace seen by this frame"
msgstr ""

#: ../../library/inspect.rst:128
msgid "f_code"
msgstr "f_code"

#: ../../library/inspect.rst:128
msgid "code object being executed in this frame"
msgstr ""

#: ../../library/inspect.rst:131
msgid "f_globals"
msgstr "f_globals"

#: ../../library/inspect.rst:131
msgid "global namespace seen by this frame"
msgstr ""

#: ../../library/inspect.rst:134
msgid "f_lasti"
msgstr "f_lasti"

#: ../../library/inspect.rst:137
msgid "f_lineno"
msgstr "f_lineno"

#: ../../library/inspect.rst:140
msgid "f_locals"
msgstr "f_locals"

#: ../../library/inspect.rst:140
msgid "local namespace seen by this frame"
msgstr ""

#: ../../library/inspect.rst:143
msgid "f_trace"
msgstr "f_trace"

#: ../../library/inspect.rst:143
msgid "tracing function for this frame, or ``None``"
msgstr ""

#: ../../library/inspect.rst:146 ../../library/inspect.rst:215
#: ../../library/inspect.rst:232
msgid "code"
msgstr "code"

#: ../../library/inspect.rst:146
msgid "co_argcount"
msgstr "co_argcount"

#: ../../library/inspect.rst:146
msgid ""
"number of arguments (not including keyword only arguments, \\* or \\*\\* "
"args)"
msgstr ""

#: ../../library/inspect.rst:151
msgid "co_code"
msgstr "co_code"

#: ../../library/inspect.rst:151
msgid "string of raw compiled bytecode"
msgstr "原始编译字节码的字符串"

#: ../../library/inspect.rst:154
msgid "co_cellvars"
msgstr "co_cellvars"

#: ../../library/inspect.rst:154
msgid "tuple of names of cell variables (referenced by containing scopes)"
msgstr "单元变量名称的元组(通过包含作用域引用)"

#: ../../library/inspect.rst:158
msgid "co_consts"
msgstr "co_consts"

#: ../../library/inspect.rst:158
msgid "tuple of constants used in the bytecode"
msgstr "字节码中使用的常量元组"

#: ../../library/inspect.rst:161
msgid "co_filename"
msgstr "co_filename"

#: ../../library/inspect.rst:161
msgid "name of file in which this code object was created"
msgstr "创建此代码对象的文件的名称"

#: ../../library/inspect.rst:165
msgid "co_firstlineno"
msgstr "co_firstlineno"

#: ../../library/inspect.rst:165
msgid "number of first line in Python source code"
msgstr ""

#: ../../library/inspect.rst:168
msgid "co_flags"
msgstr "co_flags"

#: ../../library/inspect.rst:168
msgid "bitmap of ``CO_*`` flags, read more :ref:`here <inspect-module-co-flags>`"
msgstr ""

#: ../../library/inspect.rst:172
msgid "co_lnotab"
msgstr "co_lnotab"

#: ../../library/inspect.rst:172
msgid "encoded mapping of line numbers to bytecode indices"
msgstr "编码的行号到字节码索引的映射"

#: ../../library/inspect.rst:176
msgid "co_freevars"
msgstr "co_freevars"

#: ../../library/inspect.rst:176
msgid "tuple of names of free variables (referenced via a function's closure)"
msgstr ""

#: ../../library/inspect.rst:180
msgid "co_posonlyargcount"
msgstr ""

#: ../../library/inspect.rst:180
msgid "number of positional only arguments"
msgstr ""

#: ../../library/inspect.rst:183
msgid "co_kwonlyargcount"
msgstr "co_kwonlyargcount"

#: ../../library/inspect.rst:183
msgid "number of keyword only arguments (not including \\*\\* arg)"
msgstr ""

#: ../../library/inspect.rst:187
msgid "co_name"
msgstr "co_name"

#: ../../library/inspect.rst:187
msgid "name with which this code object was defined"
msgstr "定义此代码对象的名称"

#: ../../library/inspect.rst:190
#, fuzzy
msgid "co_qualname"
msgstr "__qualname__"

#: ../../library/inspect.rst:190
#, fuzzy
msgid "fully qualified name with which this code object was defined"
msgstr "定义此代码对象的名称"

#: ../../library/inspect.rst:194
msgid "co_names"
msgstr "co_names"

#: ../../library/inspect.rst:194
#, fuzzy
msgid "tuple of names other than arguments and function locals"
msgstr "实参名和局部变量的元组"

#: ../../library/inspect.rst:198
msgid "co_nlocals"
msgstr "co_nlocals"

#: ../../library/inspect.rst:198
msgid "number of local variables"
msgstr "局部变量的数量"

#: ../../library/inspect.rst:200
msgid "co_stacksize"
msgstr "co_stacksize"

#: ../../library/inspect.rst:200
msgid "virtual machine stack space required"
msgstr "需要虚拟机堆栈空间"

#: ../../library/inspect.rst:203
msgid "co_varnames"
msgstr "co_varnames"

#: ../../library/inspect.rst:203
msgid "tuple of names of arguments and local variables"
msgstr "实参名和局部变量的元组"

#: ../../library/inspect.rst:207
msgid "generator"
msgstr "generator -- 生成器"

#: ../../library/inspect.rst:207 ../../library/inspect.rst:221
msgid "name"
msgstr "名称"

#: ../../library/inspect.rst:211
msgid "gi_frame"
msgstr "gi_frame"

#: ../../library/inspect.rst:213
msgid "gi_running"
msgstr "gi_running"

#: ../../library/inspect.rst:213
msgid "is the generator running?"
msgstr "生成器在运行吗？"

#: ../../library/inspect.rst:215
msgid "gi_code"
msgstr "gi_code"

#: ../../library/inspect.rst:217
msgid "gi_yieldfrom"
msgstr "gi_yieldfrom"

#: ../../library/inspect.rst:217
msgid "object being iterated by ``yield from``, or ``None``"
msgstr ""

#: ../../library/inspect.rst:221
msgid "coroutine"
msgstr "coroutine -- 协程"

#: ../../library/inspect.rst:225
msgid "cr_await"
msgstr "cr_await"

#: ../../library/inspect.rst:225
msgid "object being awaited on, or ``None``"
msgstr ""

#: ../../library/inspect.rst:228
msgid "cr_frame"
msgstr "cr_frame"

#: ../../library/inspect.rst:230
msgid "cr_running"
msgstr "cr_running"

#: ../../library/inspect.rst:230
msgid "is the coroutine running?"
msgstr ""

#: ../../library/inspect.rst:232
msgid "cr_code"
msgstr "cr_code"

#: ../../library/inspect.rst:234
msgid "cr_origin"
msgstr "cr_origin"

#: ../../library/inspect.rst:234
msgid "where coroutine was created, or ``None``. See |coroutine-origin-link|"
msgstr ""

#: ../../library/inspect.rst:238
msgid "builtin"
msgstr "builtin"

#: ../../library/inspect.rst:240
msgid "original name of this function or method"
msgstr "此函数或方法的原始名称"

#: ../../library/inspect.rst:245
msgid "instance to which a method is bound, or ``None``"
msgstr ""

#: ../../library/inspect.rst:252
msgid "Add ``__qualname__`` and ``gi_yieldfrom`` attributes to generators."
msgstr ""

#: ../../library/inspect.rst:254
msgid ""
"The ``__name__`` attribute of generators is now set from the function "
"name, instead of the code name, and it can now be modified."
msgstr ""

#: ../../library/inspect.rst:259
msgid "Add ``cr_origin`` attribute to coroutines."
msgstr ""

#: ../../library/inspect.rst:263
msgid "Add ``__builtins__`` attribute to functions."
msgstr ""

#: ../../library/inspect.rst:267
msgid ""
"Return all the members of an object in a list of ``(name, value)`` pairs "
"sorted by name. If the optional *predicate* argument—which will be called"
" with the ``value`` object of each member—is supplied, only members for "
"which the predicate returns a true value are included."
msgstr ""

#: ../../library/inspect.rst:274
msgid ""
":func:`getmembers` will only return class attributes defined in the "
"metaclass when the argument is a class and those attributes have been "
"listed in the metaclass' custom :meth:`__dir__`."
msgstr ""

#: ../../library/inspect.rst:281
msgid ""
"Return all the members of an object in a list of ``(name, value)`` pairs "
"sorted by name without triggering dynamic lookup via the descriptor "
"protocol, __getattr__ or __getattribute__. Optionally, only return "
"members that satisfy a given predicate."
msgstr ""

#: ../../library/inspect.rst:288
msgid ""
":func:`getmembers_static` may not be able to retrieve all members that "
"getmembers can fetch (like dynamically created attributes) and may find "
"members that getmembers can't (like descriptors that raise "
"AttributeError). It can also return descriptor objects instead of "
"instance members in some cases."
msgstr ""

#: ../../library/inspect.rst:299
msgid ""
"Return the name of the module named by the file *path*, without including"
" the names of enclosing packages. The file extension is checked against "
"all of the entries in :func:`importlib.machinery.all_suffixes`. If it "
"matches, the final path component is returned with the extension removed."
" Otherwise, ``None`` is returned."
msgstr ""

#: ../../library/inspect.rst:305
msgid ""
"Note that this function *only* returns a meaningful name for actual "
"Python modules - paths that potentially refer to Python packages will "
"still return ``None``."
msgstr ""

#: ../../library/inspect.rst:309
msgid "The function is based directly on :mod:`importlib`."
msgstr ""

#: ../../library/inspect.rst:315
msgid "Return ``True`` if the object is a module."
msgstr ""

#: ../../library/inspect.rst:320
msgid ""
"Return ``True`` if the object is a class, whether built-in or created in "
"Python code."
msgstr ""

#: ../../library/inspect.rst:326
msgid "Return ``True`` if the object is a bound method written in Python."
msgstr ""

#: ../../library/inspect.rst:331
msgid ""
"Return ``True`` if the object is a Python function, which includes "
"functions created by a :term:`lambda` expression."
msgstr ""

#: ../../library/inspect.rst:337
msgid "Return ``True`` if the object is a Python generator function."
msgstr ""

#: ../../library/inspect.rst:339
msgid ""
"Functions wrapped in :func:`functools.partial` now return ``True`` if the"
" wrapped function is a Python generator function."
msgstr ""

#: ../../library/inspect.rst:346
msgid "Return ``True`` if the object is a generator."
msgstr ""

#: ../../library/inspect.rst:351
msgid ""
"Return ``True`` if the object is a :term:`coroutine function` (a function"
" defined with an :keyword:`async def` syntax)."
msgstr ""

#: ../../library/inspect.rst:356
msgid ""
"Functions wrapped in :func:`functools.partial` now return ``True`` if the"
" wrapped function is a :term:`coroutine function`."
msgstr ""

#: ../../library/inspect.rst:363
msgid ""
"Return ``True`` if the object is a :term:`coroutine` created by an "
":keyword:`async def` function."
msgstr ""

#: ../../library/inspect.rst:371
msgid "Return ``True`` if the object can be used in :keyword:`await` expression."
msgstr ""

#: ../../library/inspect.rst:373
msgid ""
"Can also be used to distinguish generator-based coroutines from regular "
"generators::"
msgstr ""

#: ../../library/inspect.rst:390
msgid ""
"Return ``True`` if the object is an :term:`asynchronous generator` "
"function, for example::"
msgstr ""

#: ../../library/inspect.rst:401
msgid ""
"Functions wrapped in :func:`functools.partial` now return ``True`` if the"
" wrapped function is a :term:`asynchronous generator` function."
msgstr ""

#: ../../library/inspect.rst:408
msgid ""
"Return ``True`` if the object is an :term:`asynchronous generator "
"iterator` created by an :term:`asynchronous generator` function."
msgstr ""

#: ../../library/inspect.rst:415
msgid "Return ``True`` if the object is a traceback."
msgstr ""

#: ../../library/inspect.rst:420
msgid "Return ``True`` if the object is a frame."
msgstr ""

#: ../../library/inspect.rst:425
msgid "Return ``True`` if the object is a code."
msgstr ""

#: ../../library/inspect.rst:430
msgid ""
"Return ``True`` if the object is a built-in function or a bound built-in "
"method."
msgstr ""

#: ../../library/inspect.rst:435
msgid ""
"Return ``True`` if the type of object is a "
":class:`~types.MethodWrapperType`."
msgstr ""

#: ../../library/inspect.rst:437
msgid ""
"These are instances of :class:`~types.MethodWrapperType`, such as "
":meth:`~object().__str__`, :meth:`~object().__eq__` and "
":meth:`~object().__repr__`"
msgstr ""

#: ../../library/inspect.rst:443
msgid ""
"Return ``True`` if the object is a user-defined or built-in function or "
"method."
msgstr ""

#: ../../library/inspect.rst:448
msgid "Return ``True`` if the object is an abstract base class."
msgstr ""

#: ../../library/inspect.rst:453
msgid ""
"Return ``True`` if the object is a method descriptor, but not if "
":func:`ismethod`, :func:`isclass`, :func:`isfunction` or "
":func:`isbuiltin` are true."
msgstr ""

#: ../../library/inspect.rst:457
msgid ""
"This, for example, is true of ``int.__add__``.  An object passing this "
"test has a :meth:`~object.__get__` method but not a "
":meth:`~object.__set__` method, but beyond that the set of attributes "
"varies.  A :attr:`~definition.__name__` attribute is usually sensible, "
"and :attr:`__doc__` often is."
msgstr ""

#: ../../library/inspect.rst:463
msgid ""
"Methods implemented via descriptors that also pass one of the other tests"
" return ``False`` from the :func:`ismethoddescriptor` test, simply "
"because the other tests promise more -- you can, e.g., count on having "
"the :attr:`__func__` attribute (etc) when an object passes "
":func:`ismethod`."
msgstr ""

#: ../../library/inspect.rst:471
msgid "Return ``True`` if the object is a data descriptor."
msgstr ""

#: ../../library/inspect.rst:473
msgid ""
"Data descriptors have a :attr:`~object.__set__` or a "
":attr:`~object.__delete__` method. Examples are properties (defined in "
"Python), getsets, and members.  The latter two are defined in C and there"
" are more specific tests available for those types, which is robust "
"across Python implementations.  Typically, data descriptors will also "
"have :attr:`~definition.__name__` and :attr:`__doc__` attributes "
"(properties, getsets, and members have both of these attributes), but "
"this is not guaranteed."
msgstr ""

#: ../../library/inspect.rst:484
msgid "Return ``True`` if the object is a getset descriptor."
msgstr ""

#: ../../library/inspect.rst:488
msgid ""
"getsets are attributes defined in extension modules via "
":c:type:`PyGetSetDef` structures.  For Python implementations without "
"such types, this method will always return ``False``."
msgstr ""

#: ../../library/inspect.rst:495
msgid "Return ``True`` if the object is a member descriptor."
msgstr ""

#: ../../library/inspect.rst:499
msgid ""
"Member descriptors are attributes defined in extension modules via "
":c:type:`PyMemberDef` structures.  For Python implementations without "
"such types, this method will always return ``False``."
msgstr ""

#: ../../library/inspect.rst:507
msgid "Retrieving source code"
msgstr "检索源代码"

#: ../../library/inspect.rst:511
#, fuzzy
msgid ""
"Get the documentation string for an object, cleaned up with "
":func:`cleandoc`. If the documentation string for an object is not "
"provided and the object is a class, a method, a property or a descriptor,"
" retrieve the documentation string from the inheritance hierarchy. Return"
" ``None`` if the documentation string is invalid or missing."
msgstr ""
"获取一个对象的文档字符串，用 :func:`cleandoc` "
"清理。如果没有提供一个对象的文档字符串，并且该对象是一个类、一个方法、一个属性或一个描述符，则从继承层次结构中检索文档字符串。"

#: ../../library/inspect.rst:517
msgid "Documentation strings are now inherited if not overridden."
msgstr "文档字符串现在如果不被重写就会被继承。"

#: ../../library/inspect.rst:523
msgid ""
"Return in a single string any lines of comments immediately preceding the"
" object's source code (for a class, function, or method), or at the top "
"of the Python source file (if the object is a module).  If the object's "
"source code is unavailable, return ``None``.  This could happen if the "
"object has been defined in C or the interactive shell."
msgstr ""
"用一个字符串返回紧挨着对象的源代码（对于类、函数或方法）的任何一行注解，或者在 Python 源文件的顶部（如果对象是一个模块）。 "
"如果对象的源代码不可用，则返回 ``None``。 如果该对象是在 C 语言或交互式 shell 中定义的，就可能发生这种情况。"

#: ../../library/inspect.rst:532
msgid ""
"Return the name of the (text or binary) file in which an object was "
"defined. This will fail with a :exc:`TypeError` if the object is a built-"
"in module, class, or function."
msgstr "返回定义对象的（文本或二进制）文件的名称。如果该对象是一个内置的模块、类或函数，这将会以 :exc:`TypeError` 失败。"

#: ../../library/inspect.rst:539
#, fuzzy
msgid ""
"Try to guess which module an object was defined in. Return ``None`` if "
"the module cannot be determined."
msgstr "尝试猜测一个对象是在哪个模块中定义的。"

#: ../../library/inspect.rst:545
#, fuzzy
msgid ""
"Return the name of the Python source file in which an object was defined "
"or ``None`` if no way can be identified to get the source.  This will "
"fail with a :exc:`TypeError` if the object is a built-in module, class, "
"or function."
msgstr "返回定义对象的 Python 源文件的名称。如果对象是一个内置的模块、类或函数，这将导致 :exc:`TypeError` 失败。"

#: ../../library/inspect.rst:553
msgid ""
"Return a list of source lines and starting line number for an object. The"
" argument may be a module, class, method, function, traceback, frame, or "
"code object.  The source code is returned as a list of the lines "
"corresponding to the object and the line number indicates where in the "
"original source file the first line of code was found.  An :exc:`OSError`"
" is raised if the source code cannot be retrieved."
msgstr ""
"返回一个对象的源行和起始行号的列表。实参可以是一个模块、类、方法、函数、回溯（traceback）、框架（frame）或代码对象（code "
"object）。源代码被返回为对应于该对象的行的列表，行号表示在原始源文件中找到第一行代码的位置。如果不能检索到源代码，会引发一个 "
":exc:`OSError`。"

#: ../../library/inspect.rst:560 ../../library/inspect.rst:572
msgid ""
":exc:`OSError` is raised instead of :exc:`IOError`, now an alias of the "
"former."
msgstr ":exc:`OSError` 被引发，而不是 :exc:`IOError`，现在是前者的别名。"

#: ../../library/inspect.rst:567
msgid ""
"Return the text of the source code for an object. The argument may be a "
"module, class, method, function, traceback, frame, or code object.  The "
"source code is returned as a single string.  An :exc:`OSError` is raised "
"if the source code cannot be retrieved."
msgstr ""
"返回一个对象的源代码文本。实参可以是一个模块、类、方法、函数、回溯、框架或代码对象。源代码将以单个字符串的形式返回。如果不能检索到源代码，会引发一个"
" :exc:`OSError`。"

#: ../../library/inspect.rst:579
msgid ""
"Clean up indentation from docstrings that are indented to line up with "
"blocks of code."
msgstr "清理缩进到与代码块一致的文档字符串的缩进。"

#: ../../library/inspect.rst:582
msgid ""
"All leading whitespace is removed from the first line.  Any leading "
"whitespace that can be uniformly removed from the second line onwards is "
"removed.  Empty lines at the beginning and end are subsequently removed."
"  Also, all tabs are expanded to spaces."
msgstr "所有先导空白都从第一行中删除。从第二行开始，任何可以统一删除的前导空白都被删除。开头和结尾的空行随后被删除。此外，所有的制表符都被扩展为空格。"

#: ../../library/inspect.rst:591
msgid "Introspecting callables with the Signature object"
msgstr "用 Signature 对象对可调用程序进行自省"

#: ../../library/inspect.rst:595
msgid ""
"The Signature object represents the call signature of a callable object "
"and its return annotation.  To retrieve a Signature object, use the "
":func:`signature` function."
msgstr "Signature 对象代表了一个可调用对象的调用签名和它的 return 注解。要检索签名对象，请使用 :func:`signature` 函数。"

#: ../../library/inspect.rst:601
msgid "Return a :class:`Signature` object for the given ``callable``::"
msgstr "返回一个 :class:`Signature` 对象，用于给定的 ``callable`` ::"

#: ../../library/inspect.rst:618
msgid ""
"Accepts a wide range of Python callables, from plain functions and "
"classes to :func:`functools.partial` objects."
msgstr "接受广泛的 Python 可调用文件，从普通函数和类到 :func:`functools.partial` 对象。"

#: ../../library/inspect.rst:621
msgid ""
"For objects defined in modules using stringized annotations (``from "
"__future__ import annotations``), :func:`signature` will attempt to "
"automatically un-stringize the annotations using "
":func:`inspect.get_annotations()`.  The ``global``, ``locals``, and "
"``eval_str`` parameters are passed into :func:`inspect.get_annotations()`"
" when resolving the annotations; see the documentation for "
":func:`inspect.get_annotations()` for instructions on how to use these "
"parameters."
msgstr ""
"对于使用字符串注解的模块中定义的对象（``from __future__ import annotations``）， "
":func:`signature` 将尝试使用 :func:`inspect.get_annotations()` "
"自动解除注解的字符串。``global``, ``locals``, 和 ``eval_str`` 形参在解析注解时被传入 "
":func:`inspect.get_annotations()`；关于如何使用这些形参，请参见 "
":func:`inspect.get_annotations()` 的文档。"

#: ../../library/inspect.rst:630
msgid ""
"Raises :exc:`ValueError` if no signature can be provided, and "
":exc:`TypeError` if that type of object is not supported.  Also, if the "
"annotations are stringized, and ``eval_str`` is not false, the ``eval()``"
" call(s) to un-stringize the annotations could potentially raise any kind"
" of exception."
msgstr ""
"如果不能提供签名，则引发 :exc:`ValueError`，如果不支持该类型的对象，则引发 "
":exc:`TypeError`。另外，如果注解是字符串化的，并且 ``eval_str`` 不是假的，``eval()`` "
"调用来解除注解的字符串化，有可能引发任何类型的异常。"

#: ../../library/inspect.rst:636
msgid ""
"A slash(/) in the signature of a function denotes that the parameters "
"prior to it are positional-only. For more info, see :ref:`the FAQ entry "
"on positional-only parameters <faq-positional-only-arguments>`."
msgstr ""
"函数签名中的斜线（/）表示它前面的形参是仅有位置的。更多信息，请参见 :ref:`关于仅有位置的形参的常见问题条目 <faq-"
"positional-only-arguments>`。"

#: ../../library/inspect.rst:640
msgid ""
"``follow_wrapped`` parameter. Pass ``False`` to get a signature of "
"``callable`` specifically (``callable.__wrapped__`` will not be used to "
"unwrap decorated callables.)"
msgstr ""
"``follow_wrapped`` 形参。传递 ``False`` 以获得具体的 ``callable`` "
"的签名（``callable.__wrapped__`` 将不会被用来解除装饰的可调用程序）。"

#: ../../library/inspect.rst:645
msgid "``globals``, ``locals``, and ``eval_str`` parameters."
msgstr "``globals``, ``locals`` 和 ``eval_str`` 形参"

#: ../../library/inspect.rst:650
msgid ""
"Some callables may not be introspectable in certain implementations of "
"Python.  For example, in CPython, some built-in functions defined in C "
"provide no metadata about their arguments."
msgstr ""
"在 Python 的某些实现中，一些可调用函数可能是不可反省的。例如，在 CPython 中，一些用 C "
"语言定义的内置函数没有提供关于其实参的元数据。"

#: ../../library/inspect.rst:657
msgid ""
"A Signature object represents the call signature of a function and its "
"return annotation.  For each parameter accepted by the function it stores"
" a :class:`Parameter` object in its :attr:`parameters` collection."
msgstr ""
"一个 Signature 对象代表了一个函数的调用签名和它的 return 注解。对于函数接受的每个形参，它在其 "
":attr:`parameters` 集合中存储一个 :class:`Parameter` 对象。"

#: ../../library/inspect.rst:661
msgid ""
"The optional *parameters* argument is a sequence of :class:`Parameter` "
"objects, which is validated to check that there are no parameters with "
"duplicate names, and that the parameters are in the right order, i.e. "
"positional-only first, then positional-or-keyword, and that parameters "
"with defaults follow parameters without defaults."
msgstr ""
"可选的 *parameters* 实参是一个 :class:`Parameter` "
"对象的序列，它被验证以检查是否有名称重复的形参，以及形参的顺序是否正确，即先是仅有位置的形参，然后是有位置或关键字的形参，以及有默认值的形参紧随没有默认值的形参。"

#: ../../library/inspect.rst:667
msgid ""
"The optional *return_annotation* argument, can be an arbitrary Python "
"object, is the \"return\" annotation of the callable."
msgstr "可选的 *return_annotation* 实参，可以是一个任意的 Python 对象，是可调用对象的 \"return\" 注解。"

#: ../../library/inspect.rst:670
msgid ""
"Signature objects are *immutable*.  Use :meth:`Signature.replace` to make"
" a modified copy."
msgstr "Signature 对象是 *不可变的*。使用 :meth:`Signature.replace` 来制作一个修改的副本。"

#: ../../library/inspect.rst:673
msgid "Signature objects are picklable and hashable."
msgstr "签名对象是可提取（picklable）和可散列的。"

#: ../../library/inspect.rst:678
msgid "A special class-level marker to specify absence of a return annotation."
msgstr "一个特殊的类级标记，用于指定没有 return 注解。"

#: ../../library/inspect.rst:682
msgid ""
"An ordered mapping of parameters' names to the corresponding "
":class:`Parameter` objects.  Parameters appear in strict definition "
"order, including keyword-only parameters."
msgstr "形参名称与相应的 :class:`Parameter` 对象的有序映射。形参以严格的定义顺序出现，包括只有关键字的形参。"

#: ../../library/inspect.rst:686 ../../library/inspect.rst:1010
msgid ""
"Python only explicitly guaranteed that it preserved the declaration order"
" of keyword-only parameters as of version 3.7, although in practice this "
"order had always been preserved in Python 3."
msgstr "Python 只明确地保证从 3.7 版开始保留只用关键字的形参的声明顺序，尽管实际上这个顺序在 Python 3 中一直被保留着。"

#: ../../library/inspect.rst:693
msgid ""
"The \"return\" annotation for the callable.  If the callable has no "
"\"return\" annotation, this attribute is set to :attr:`Signature.empty`."
msgstr ""
"可调用程序的 \"return\" 注解。如果可调用程序没有 \"return\" 注解，这个属性将被设置为 "
":attr:`Signature.empty`。"

#: ../../library/inspect.rst:698
msgid ""
"Create a mapping from positional and keyword arguments to parameters. "
"Returns :class:`BoundArguments` if ``*args`` and ``**kwargs`` match the "
"signature, or raises a :exc:`TypeError`."
msgstr ""
"创建一个从位置形参和关键字 arguments 到 parameters 的映射。如果 ``*args``  和 ``**kwargs`` "
"符合签名，则返回 :class:`BoundArguments`，否则引发 :exc:`TypeError`。"

#: ../../library/inspect.rst:704
msgid ""
"Works the same way as :meth:`Signature.bind`, but allows the omission of "
"some required arguments (mimics :func:`functools.partial` behavior.) "
"Returns :class:`BoundArguments`, or raises a :exc:`TypeError` if the "
"passed arguments do not match the signature."
msgstr ""
"与 :meth:`Signature.bind` 的工作方式相同，但允许省略一些必要的实参（模仿 "
":func:`functools.partial` 的行为）。返回 "
":class:`BoundArguments`，如果传递的实参与签名不匹配，则引发 :exc:`TypeError`。"

#: ../../library/inspect.rst:711
msgid ""
"Create a new Signature instance based on the instance replace was invoked"
" on.  It is possible to pass different ``parameters`` and/or "
"``return_annotation`` to override the corresponding properties of the "
"base signature.  To remove return_annotation from the copied Signature, "
"pass in :attr:`Signature.empty`."
msgstr ""
"在被替换的实例基础上创建一个新的 Signature 实例。可以通过不同的 ``parameters`` 和/或 "
"``return_annotation`` 来覆盖基本签名的相应属性。要从复制的签名中移除 return_annotation，请传入 "
":attr:`Signature.empty`。"

#: ../../library/inspect.rst:728
msgid ""
"Return a :class:`Signature` (or its subclass) object for a given callable"
" ``obj``.  Pass ``follow_wrapped=False`` to get a signature of ``obj`` "
"without unwrapping its ``__wrapped__`` chain. ``globalns`` and "
"``localns`` will be used as the namespaces when resolving annotations."
msgstr ""
"为给定的可调用的 ``obj`` 返回一个 :class:`Signature` （或其子类）对象。通过 "
"``follow_wrapped=False`` 来获得 ``obj`` 的签名，而不需要解开其 ``__wrapped__`` "
"链。``globalns`` 和 ``localns`` 将在解析注解时作为命名空间使用。"

#: ../../library/inspect.rst:733
msgid "This method simplifies subclassing of :class:`Signature`::"
msgstr "这个方法简化了 :class:`Signature` 的子类化 ::"

#: ../../library/inspect.rst:742
msgid "``globalns`` and ``localns`` parameters."
msgstr "``globalns`` 和 ``localns`` 形参。"

#: ../../library/inspect.rst:748
msgid ""
"Parameter objects are *immutable*.  Instead of modifying a Parameter "
"object, you can use :meth:`Parameter.replace` to create a modified copy."
msgstr ""
"形参对象是 *不可变的*。你可以使用 :meth:`Parameter.replace` 来创建一个修改过的副本，而不是修改一个 "
"Parameter 对象。"

#: ../../library/inspect.rst:751
msgid "Parameter objects are picklable and hashable."
msgstr "Parameter 对象是可拾取和可哈希的。"

#: ../../library/inspect.rst:756
msgid ""
"A special class-level marker to specify absence of default values and "
"annotations."
msgstr "一个特殊的类级标记，用于指定没有默认值和注解。"

#: ../../library/inspect.rst:761
msgid ""
"The name of the parameter as a string.  The name must be a valid Python "
"identifier."
msgstr "形参的名称，是一个字符串。该名称必须是一个有效的 Python 标识符。"

#: ../../library/inspect.rst:766
msgid ""
"CPython generates implicit parameter names of the form ``.0`` on the code"
" objects used to implement comprehensions and generator expressions."
msgstr "CPython 在用于实现理解和生成器表达式的代码对象上生成形式为 ``.0`` 的隐含形参名。"

#: ../../library/inspect.rst:770
msgid ""
"These parameter names are exposed by this module as names like "
"``implicit0``."
msgstr "这些形参名称被本模块暴露为 ``implicit0`` 等名称。"

#: ../../library/inspect.rst:776
msgid ""
"The default value for the parameter.  If the parameter has no default "
"value, this attribute is set to :attr:`Parameter.empty`."
msgstr "该形参的默认值。如果该形参没有默认值，这个属性将被设置为 :attr:`Parameter.empty`。"

#: ../../library/inspect.rst:781
msgid ""
"The annotation for the parameter.  If the parameter has no annotation, "
"this attribute is set to :attr:`Parameter.empty`."
msgstr "形参的注解。如果形参没有注解，这个属性被设置为 :attr:`Parameter.empty`。"

#: ../../library/inspect.rst:786
msgid ""
"Describes how argument values are bound to the parameter.  Possible "
"values (accessible via :class:`Parameter`, like "
"``Parameter.KEYWORD_ONLY``):"
msgstr ""
"描述了实参值如何被绑定到形参上。可能的值（可通过 :class:`Parameter` 访问，如 "
"``Parameter.KEYWORD_ONLY``）："

#: ../../library/inspect.rst:792
msgid "Name"
msgstr "名称"

#: ../../library/inspect.rst:792
msgid "Meaning"
msgstr "含意"

#: ../../library/inspect.rst:794
msgid "*POSITIONAL_ONLY*"
msgstr ""

#: ../../library/inspect.rst:794
msgid ""
"Value must be supplied as a positional argument. Positional only "
"parameters are those which appear before a ``/`` entry (if present) in a "
"Python function definition."
msgstr "Value 必须作为一个位置实参提供。只有位置形参是那些出现在 Python 函数定义中的 ``/`` 条目之前的参数（如果存在的话）。"

#: ../../library/inspect.rst:799
msgid "*POSITIONAL_OR_KEYWORD*"
msgstr ""

#: ../../library/inspect.rst:799
msgid ""
"Value may be supplied as either a keyword or positional argument (this is"
" the standard binding behaviour for functions implemented in Python.)"
msgstr ""

#: ../../library/inspect.rst:804
msgid "*VAR_POSITIONAL*"
msgstr ""

#: ../../library/inspect.rst:804
msgid ""
"A tuple of positional arguments that aren't bound to any other parameter."
" This corresponds to a ``*args`` parameter in a Python function "
"definition."
msgstr ""

#: ../../library/inspect.rst:809
msgid "*KEYWORD_ONLY*"
msgstr ""

#: ../../library/inspect.rst:809
msgid ""
"Value must be supplied as a keyword argument. Keyword only parameters are"
" those which appear after a ``*`` or ``*args`` entry in a Python function"
" definition."
msgstr ""

#: ../../library/inspect.rst:814
msgid "*VAR_KEYWORD*"
msgstr ""

#: ../../library/inspect.rst:814
msgid ""
"A dict of keyword arguments that aren't bound to any other parameter. "
"This corresponds to a ``**kwargs`` parameter in a Python function "
"definition."
msgstr ""

#: ../../library/inspect.rst:820
msgid "Example: print all keyword-only arguments without default values::"
msgstr "例子：打印所有只有关键字的实参，没有默认值 ::"

#: ../../library/inspect.rst:834
msgid "Describes a enum value of Parameter.kind."
msgstr "描述了 Parameter.kind 的一个枚举值。"

#: ../../library/inspect.rst:838
msgid "Example: print all descriptions of arguments::"
msgstr "例子：打印所有实参的描述 ::"

#: ../../library/inspect.rst:853
msgid ""
"Create a new Parameter instance based on the instance replaced was "
"invoked on.  To override a :class:`Parameter` attribute, pass the "
"corresponding argument.  To remove a default value or/and an annotation "
"from a Parameter, pass :attr:`Parameter.empty`."
msgstr ""
"在被替换的实例基础上创建一个新的参数实例。要覆盖一个 :class:`Parameter` "
"属性，请传递相应的参数。要从参数中移除默认值或/和注释，请传递 :attr:`Parameter.empty`。"

#: ../../library/inspect.rst:871
msgid ""
"In Python 3.3 Parameter objects were allowed to have ``name`` set to "
"``None`` if their ``kind`` was set to ``POSITIONAL_ONLY``. This is no "
"longer permitted."
msgstr ""
"在 Python 3.3 中，如果它们的 ``kind`` 被设置为 ``POSITIONAL_ONLY``，则允许 ``name`` 被设置为 "
"``None``。这已不再允许。"

#: ../../library/inspect.rst:878
msgid ""
"Result of a :meth:`Signature.bind` or :meth:`Signature.bind_partial` "
"call. Holds the mapping of arguments to the function's parameters."
msgstr ""
":meth:`Signature.bind` 或 :meth:`Signature.bind_partial` "
"调用的结果。保存实参对函数形参的映射。"

#: ../../library/inspect.rst:883
msgid ""
"A mutable mapping of parameters' names to arguments' values. Contains "
"only explicitly bound arguments.  Changes in :attr:`arguments` will "
"reflect in :attr:`args` and :attr:`kwargs`."
msgstr ""

#: ../../library/inspect.rst:887
msgid ""
"Should be used in conjunction with :attr:`Signature.parameters` for any "
"argument processing purposes."
msgstr ""

#: ../../library/inspect.rst:892
msgid ""
"Arguments for which :meth:`Signature.bind` or "
":meth:`Signature.bind_partial` relied on a default value are skipped. "
"However, if needed, use :meth:`BoundArguments.apply_defaults` to add "
"them."
msgstr ""

#: ../../library/inspect.rst:897
msgid ""
":attr:`arguments` is now of type :class:`dict`. Formerly, it was of type "
":class:`collections.OrderedDict`."
msgstr ""

#: ../../library/inspect.rst:903
msgid ""
"A tuple of positional arguments values.  Dynamically computed from the "
":attr:`arguments` attribute."
msgstr ""

#: ../../library/inspect.rst:908
msgid ""
"A dict of keyword arguments values.  Dynamically computed from the "
":attr:`arguments` attribute."
msgstr ""

#: ../../library/inspect.rst:913
msgid "A reference to the parent :class:`Signature` object."
msgstr ""

#: ../../library/inspect.rst:917
msgid "Set default values for missing arguments."
msgstr ""

#: ../../library/inspect.rst:919
msgid ""
"For variable-positional arguments (``*args``) the default is an empty "
"tuple."
msgstr ""

#: ../../library/inspect.rst:922
msgid ""
"For variable-keyword arguments (``**kwargs``) the default is an empty "
"dict."
msgstr ""

#: ../../library/inspect.rst:935
msgid ""
"The :attr:`args` and :attr:`kwargs` properties can be used to invoke "
"functions::"
msgstr ""

#: ../../library/inspect.rst:948
msgid ":pep:`362` - Function Signature Object."
msgstr ""

#: ../../library/inspect.rst:949
msgid "The detailed specification, implementation details and examples."
msgstr ""

#: ../../library/inspect.rst:955
msgid "Classes and functions"
msgstr "类与函数"

#: ../../library/inspect.rst:959
msgid ""
"Arrange the given list of classes into a hierarchy of nested lists. Where"
" a nested list appears, it contains classes derived from the class whose "
"entry immediately precedes the list.  Each entry is a 2-tuple containing "
"a class and a tuple of its base classes.  If the *unique* argument is "
"true, exactly one entry appears in the returned structure for each class "
"in the given list.  Otherwise, classes using multiple inheritance and "
"their descendants will appear multiple times."
msgstr ""

#: ../../library/inspect.rst:970
msgid ""
"Get the names and default values of a Python function's parameters.  A "
":term:`named tuple` is returned:"
msgstr ""

#: ../../library/inspect.rst:973
msgid ""
"``FullArgSpec(args, varargs, varkw, defaults, kwonlyargs, kwonlydefaults,"
" annotations)``"
msgstr ""

#: ../../library/inspect.rst:976
msgid ""
"*args* is a list of the positional parameter names. *varargs* is the name"
" of the ``*`` parameter or ``None`` if arbitrary positional arguments are"
" not accepted. *varkw* is the name of the ``**`` parameter or ``None`` if"
" arbitrary keyword arguments are not accepted. *defaults* is an *n*-tuple"
" of default argument values corresponding to the last *n* positional "
"parameters, or ``None`` if there are no such defaults defined. "
"*kwonlyargs* is a list of keyword-only parameter names in declaration "
"order. *kwonlydefaults* is a dictionary mapping parameter names from "
"*kwonlyargs* to the default values used if no argument is supplied. "
"*annotations* is a dictionary mapping parameter names to annotations. The"
" special key ``\"return\"`` is used to report the function return value "
"annotation (if any)."
msgstr ""

#: ../../library/inspect.rst:991
msgid ""
"Note that :func:`signature` and :ref:`Signature Object <inspect-"
"signature-object>` provide the recommended API for callable "
"introspection, and support additional behaviours (like positional-only "
"arguments) that are sometimes encountered in extension module APIs. This "
"function is retained primarily for use in code that needs to maintain "
"compatibility with the Python 2 ``inspect`` module API."
msgstr ""

#: ../../library/inspect.rst:998
msgid ""
"This function is now based on :func:`signature`, but still ignores "
"``__wrapped__`` attributes and includes the already bound first parameter"
" in the signature output for bound methods."
msgstr ""

#: ../../library/inspect.rst:1003
msgid ""
"This method was previously documented as deprecated in favour of "
":func:`signature` in Python 3.5, but that decision has been reversed in "
"order to restore a clearly supported standard interface for single-source"
" Python 2/3 code migrating away from the legacy :func:`getargspec` API."
msgstr ""

#: ../../library/inspect.rst:1018
msgid ""
"Get information about arguments passed into a particular frame.  A "
":term:`named tuple` ``ArgInfo(args, varargs, keywords, locals)`` is "
"returned. *args* is a list of the argument names.  *varargs* and "
"*keywords* are the names of the ``*`` and ``**`` arguments or ``None``.  "
"*locals* is the locals dictionary of the given frame."
msgstr ""

#: ../../library/inspect.rst:1025 ../../library/inspect.rst:1035
msgid "This function was inadvertently marked as deprecated in Python 3.5."
msgstr ""

#: ../../library/inspect.rst:1030
msgid ""
"Format a pretty argument spec from the four values returned by "
":func:`getargvalues`.  The format\\* arguments are the corresponding "
"optional formatting functions that are called to turn names and values "
"into strings."
msgstr ""

#: ../../library/inspect.rst:1040
msgid ""
"Return a tuple of class cls's base classes, including cls, in method "
"resolution order.  No class appears more than once in this tuple. Note "
"that the method resolution order depends on cls's type.  Unless a very "
"peculiar user-defined metatype is in use, cls will be the first element "
"of the tuple."
msgstr ""

#: ../../library/inspect.rst:1048
msgid ""
"Bind the *args* and *kwds* to the argument names of the Python function "
"or method *func*, as if it was called with them. For bound methods, bind "
"also the first argument (typically named ``self``) to the associated "
"instance. A dict is returned, mapping the argument names (including the "
"names of the ``*`` and ``**`` arguments, if any) to their values from "
"*args* and *kwds*. In case of invoking *func* incorrectly, i.e. whenever "
"``func(*args, **kwds)`` would raise an exception because of incompatible "
"signature, an exception of the same type and the same or similar message "
"is raised. For example::"
msgstr ""

#: ../../library/inspect.rst:1071
msgid "Use :meth:`Signature.bind` and :meth:`Signature.bind_partial` instead."
msgstr ""

#: ../../library/inspect.rst:1077
msgid ""
"Get the mapping of external name references in a Python function or "
"method *func* to their current values. A :term:`named tuple` "
"``ClosureVars(nonlocals, globals, builtins, unbound)`` is returned. "
"*nonlocals* maps referenced names to lexical closure variables, *globals*"
" to the function's module globals and *builtins* to the builtins visible "
"from the function body. *unbound* is the set of names referenced in the "
"function that could not be resolved at all given the current module "
"globals and builtins."
msgstr ""

#: ../../library/inspect.rst:1086
msgid ":exc:`TypeError` is raised if *func* is not a Python function or method."
msgstr ""

#: ../../library/inspect.rst:1093
msgid ""
"Get the object wrapped by *func*. It follows the chain of "
":attr:`__wrapped__` attributes returning the last object in the chain."
msgstr ""

#: ../../library/inspect.rst:1096
msgid ""
"*stop* is an optional callback accepting an object in the wrapper chain "
"as its sole argument that allows the unwrapping to be terminated early if"
" the callback returns a true value. If the callback never returns a true "
"value, the last object in the chain is returned as usual. For example, "
":func:`signature` uses this to stop unwrapping if any object in the chain"
" has a ``__signature__`` attribute defined."
msgstr ""

#: ../../library/inspect.rst:1103
msgid ":exc:`ValueError` is raised if a cycle is encountered."
msgstr ""

#: ../../library/inspect.rst:1110
msgid "Compute the annotations dict for an object."
msgstr "计算一个对象的注解 dict。"

#: ../../library/inspect.rst:1112
msgid ""
"``obj`` may be a callable, class, or module. Passing in an object of any "
"other type raises :exc:`TypeError`."
msgstr "``obj`` 可以是一个 callable，类，或模块。传入任何其他类型的对象会引发 :exc:`TypeError`。"

#: ../../library/inspect.rst:1115
msgid ""
"Returns a dict.  ``get_annotations()`` returns a new dict every time it's"
" called; calling it twice on the same object will return two different "
"but equivalent dicts."
msgstr ""
"返回一个dict。``get_annotations()`` 每次调用都会返回一个新的 dict；对同一个对象调用两次会返回两个不同但等价的 "
"dict。"

#: ../../library/inspect.rst:1119
msgid "This function handles several details for you:"
msgstr "这个函数为你处理几个细节："

#: ../../library/inspect.rst:1121
msgid ""
"If ``eval_str`` is true, values of type ``str`` will be un-stringized "
"using :func:`eval()`.  This is intended for use with stringized "
"annotations (``from __future__ import annotations``)."
msgstr ""
"如果 ``eval_str`` 为真，``str`` 类型的值将使用 :func:`eval()` "
"进行解串。这是为了与字符串化的注释一起使用（``from __future__ import annotations``)）。"

#: ../../library/inspect.rst:1125
msgid ""
"If ``obj`` doesn't have an annotations dict, returns an empty dict.  "
"(Functions and methods always have an annotations dict; classes, modules,"
" and other types of callables may not.)"
msgstr "如果 ``obj`` 没有注释 dict，返回一个空 dict。（函数和方法总是有一个注解字典；类、模块和其他类型的可调用程序可能没有）。"

#: ../../library/inspect.rst:1129
msgid ""
"Ignores inherited annotations on classes.  If a class doesn't have its "
"own annotations dict, returns an empty dict."
msgstr "忽略类上的继承注解。如果一个类没有自己的注解字典，则返回一个空字典。"

#: ../../library/inspect.rst:1131
msgid ""
"All accesses to object members and dict values are done using "
"``getattr()`` and ``dict.get()`` for safety."
msgstr "为了安全起见，访问对象成员和 dict 值使用 ``getattr()`` 和 ``dict.get()``。"

#: ../../library/inspect.rst:1133
#, fuzzy
msgid "Always, always, always returns a freshly created dict."
msgstr "总是，总是，总是返回一个新创建的 dict。"

#: ../../library/inspect.rst:1135
msgid ""
"``eval_str`` controls whether or not values of type ``str`` are replaced "
"with the result of calling :func:`eval()` on those values:"
msgstr "``eval_str`` 控制 ``str`` 类型的值是否被替换成对这些值调用 :func:`eval()`  的结果："

#: ../../library/inspect.rst:1138
msgid ""
"If eval_str is true, :func:`eval()` is called on values of type ``str``. "
"(Note that ``get_annotations`` doesn't catch exceptions; if "
":func:`eval()` raises an exception, it will unwind the stack past the "
"``get_annotations`` call.)"
msgstr ""
"如果 eval_str 为真，:func:`eval()` 将对 ``str`` 类型的值进行调用。（注意，``get_annotations``"
" 不捕捉异常；如果 :func:`eval()` 引发异常，它将在 ``get_annotations`` 调用后解绑堆栈）。"

#: ../../library/inspect.rst:1142
msgid "If eval_str is false (the default), values of type ``str`` are unchanged."
msgstr "如果 eval_str 为 false（默认），那么 ``str`` 类型的值将不会改变。"

#: ../../library/inspect.rst:1144
msgid ""
"``globals`` and ``locals`` are passed in to :func:`eval()`; see the "
"documentation for :func:`eval()` for more information.  If ``globals`` or"
" ``locals`` is ``None``, this function may replace that value with a "
"context-specific default, contingent on ``type(obj)``:"
msgstr ""
"``globals`` 和 ``locals`` 被传递到 :func:`eval()`；更多信息请参见 :func:`eval()` "
"的文档。如果 ``globals`` 或 ``locals`` 是 ``None``，这个函数可能会用特定环境的默认值替换该值，取决于 "
"``type(obj)``："

#: ../../library/inspect.rst:1149
msgid "If ``obj`` is a module, ``globals`` defaults to ``obj.__dict__``."
msgstr "如果 ``obj`` 是一个模块，``globals`` 默认为 ``obj.__dict__``。"

#: ../../library/inspect.rst:1150
msgid ""
"If ``obj`` is a class, ``globals`` defaults to "
"``sys.modules[obj.__module__].__dict__`` and ``locals`` defaults to the "
"``obj`` class namespace."
msgstr ""
"如果 ``obj`` 是一个类，``globals`` 默认为 "
"``sys.modules[obj.__module__].__dict__``，``locals`` 默认为 ``obj`` 类的命名空间。"

#: ../../library/inspect.rst:1153
msgid ""
"If ``obj`` is a callable, ``globals`` defaults to ``obj.__globals__``, "
"although if ``obj`` is a wrapped function (using "
"``functools.update_wrapper()``) it is first unwrapped."
msgstr ""
"如果 ``obj`` 是一个可调用的，``globals`` 默认为 ``obj.__globals__``，尽管如果 ``obj`` "
"是一个被包裹的函数（使用 ``functools.update_wrapper()``），它首先被解开。"

#: ../../library/inspect.rst:1157
msgid ""
"Calling ``get_annotations`` is best practice for accessing the "
"annotations dict of any object.  See :ref:`annotations-howto` for more "
"information on annotations best practices."
msgstr ""
"调用 ``get_annotations`` 是访问任何对象的注解 dict 的最佳做法。参见 :ref:`annotations-howto` "
"以了解更多关于注解的最佳实践。"

#: ../../library/inspect.rst:1167
msgid "The interpreter stack"
msgstr ""

#: ../../library/inspect.rst:1169
msgid ""
"Some of the following functions return :class:`FrameInfo` objects. For "
"backwards compatibility these objects allow tuple-like operations on all "
"attributes except ``positions``. This behavior is considered deprecated "
"and may be removed in the future."
msgstr ""

#: ../../library/inspect.rst:1178
msgid "The :ref:`frame object <frame-objects>` that the record corresponds to."
msgstr ""

#: ../../library/inspect.rst:1182
msgid ""
"The file name associated with the code being executed by the frame this "
"record corresponds to."
msgstr ""

#: ../../library/inspect.rst:1187
msgid ""
"The line number of the current line associated with the code being "
"executed by the frame this record corresponds to."
msgstr ""

#: ../../library/inspect.rst:1192
msgid ""
"The function name that is being executed by the frame this record "
"corresponds to."
msgstr ""

#: ../../library/inspect.rst:1196
msgid ""
"A list of lines of context from the source code that's being executed by "
"the frame this record corresponds to."
msgstr ""

#: ../../library/inspect.rst:1201 ../../library/inspect.rst:1239
msgid ""
"The index of the current line being executed in the :attr:`code_context` "
"list."
msgstr ""

#: ../../library/inspect.rst:1205
msgid ""
"A :class:`dis.Positions` object containing the start line number, end "
"line number, start column offset, and end column offset associated with "
"the instruction being executed by the frame this record corresponds to."
msgstr ""

#: ../../library/inspect.rst:1209
msgid "Return a named tuple instead of a tuple."
msgstr ""

#: ../../library/inspect.rst:1212
msgid ""
"Changed the return object from a named tuple to a regular object (that is"
" backwards compatible with the previous named tuple)."
msgstr ""

#: ../../library/inspect.rst:1220
msgid ""
"The file name associated with the code being executed by the frame this "
"traceback corresponds to."
msgstr ""

#: ../../library/inspect.rst:1225
msgid ""
"The line number of the current line associated with the code being "
"executed by the frame this traceback corresponds to."
msgstr ""

#: ../../library/inspect.rst:1230
msgid ""
"The function name that is being executed by the frame this traceback "
"corresponds to."
msgstr ""

#: ../../library/inspect.rst:1234
msgid ""
"A list of lines of context from the source code that's being executed by "
"the frame this traceback corresponds to."
msgstr ""

#: ../../library/inspect.rst:1243
msgid ""
"A :class:`dis.Positions` object containing the start line number, end "
"line number, start column offset, and end column offset associated with "
"the instruction being executed by the frame this traceback corresponds "
"to."
msgstr ""

#: ../../library/inspect.rst:1250
msgid ""
"Keeping references to frame objects, as found in the first element of the"
" frame records these functions return, can cause your program to create "
"reference cycles.  Once a reference cycle has been created, the lifespan "
"of all objects which can be accessed from the objects which form the "
"cycle can become much longer even if Python's optional cycle detector is "
"enabled.  If such cycles must be created, it is important to ensure they "
"are explicitly broken to avoid the delayed destruction of objects and "
"increased memory consumption which occurs."
msgstr ""

#: ../../library/inspect.rst:1258
msgid ""
"Though the cycle detector will catch these, destruction of the frames "
"(and local variables) can be made deterministic by removing the cycle in "
"a :keyword:`finally` clause.  This is also important if the cycle "
"detector was disabled when Python was compiled or using "
":func:`gc.disable`.  For example::"
msgstr ""

#: ../../library/inspect.rst:1270
msgid ""
"If you want to keep the frame around (for example to print a traceback "
"later), you can also break reference cycles by using the "
":meth:`frame.clear` method."
msgstr ""

#: ../../library/inspect.rst:1274
msgid ""
"The optional *context* argument supported by most of these functions "
"specifies the number of lines of context to return, which are centered "
"around the current line."
msgstr ""

#: ../../library/inspect.rst:1281
msgid ""
"Get information about a frame or traceback object.  A :class:`Traceback` "
"object is returned."
msgstr ""

#: ../../library/inspect.rst:1284
msgid "A :class:`Traceback` object is returned instead of a named tuple."
msgstr ""

#: ../../library/inspect.rst:1289
msgid ""
"Get a list of :class:`FrameInfo` objects for a frame and all outer "
"frames. These frames represent the calls that lead to the creation of "
"*frame*. The first entry in the returned list represents *frame*; the "
"last entry represents the outermost call on *frame*'s stack."
msgstr ""

#: ../../library/inspect.rst:1294 ../../library/inspect.rst:1309
#: ../../library/inspect.rst:1335 ../../library/inspect.rst:1350
msgid ""
"A list of :term:`named tuples <named tuple>` ``FrameInfo(frame, filename,"
" lineno, function, code_context, index)`` is returned."
msgstr ""

#: ../../library/inspect.rst:1299 ../../library/inspect.rst:1314
#: ../../library/inspect.rst:1340 ../../library/inspect.rst:1355
msgid "A list of :class:`FrameInfo` objects is returned."
msgstr ""

#: ../../library/inspect.rst:1304
msgid ""
"Get a list of :class:`FrameInfo` objects for a traceback's frame and all "
"inner frames.  These frames represent calls made as a consequence of "
"*frame*. The first entry in the list represents *traceback*; the last "
"entry represents where the exception was raised."
msgstr ""

#: ../../library/inspect.rst:1319
msgid "Return the frame object for the caller's stack frame."
msgstr ""

#: ../../library/inspect.rst:1323
msgid ""
"This function relies on Python stack frame support in the interpreter, "
"which isn't guaranteed to exist in all implementations of Python.  If "
"running in an implementation without Python stack frame support this "
"function returns ``None``."
msgstr ""

#: ../../library/inspect.rst:1331
msgid ""
"Return a list of :class:`FrameInfo` objects for the caller's stack.  The "
"first entry in the returned list represents the caller; the last entry "
"represents the outermost call on the stack."
msgstr ""

#: ../../library/inspect.rst:1345
msgid ""
"Return a list of :class:`FrameInfo` objects for the stack between the "
"current frame and the frame in which an exception currently being handled"
" was raised in.  The first entry in the list represents the caller; the "
"last entry represents where the exception was raised."
msgstr ""

#: ../../library/inspect.rst:1359
msgid "Fetching attributes statically"
msgstr ""

#: ../../library/inspect.rst:1361
msgid ""
"Both :func:`getattr` and :func:`hasattr` can trigger code execution when "
"fetching or checking for the existence of attributes. Descriptors, like "
"properties, will be invoked and :meth:`__getattr__` and "
":meth:`__getattribute__` may be called."
msgstr ""

#: ../../library/inspect.rst:1366
msgid ""
"For cases where you want passive introspection, like documentation tools,"
" this can be inconvenient. :func:`getattr_static` has the same signature "
"as :func:`getattr` but avoids executing code when it fetches attributes."
msgstr ""

#: ../../library/inspect.rst:1372
msgid ""
"Retrieve attributes without triggering dynamic lookup via the descriptor "
"protocol, :meth:`__getattr__` or :meth:`__getattribute__`."
msgstr ""

#: ../../library/inspect.rst:1375
msgid ""
"Note: this function may not be able to retrieve all attributes that "
"getattr can fetch (like dynamically created attributes) and may find "
"attributes that getattr can't (like descriptors that raise "
"AttributeError). It can also return descriptors objects instead of "
"instance members."
msgstr ""

#: ../../library/inspect.rst:1381
msgid ""
"If the instance :attr:`~object.__dict__` is shadowed by another member "
"(for example a property) then this function will be unable to find "
"instance members."
msgstr ""

#: ../../library/inspect.rst:1387
msgid ""
":func:`getattr_static` does not resolve descriptors, for example slot "
"descriptors or getset descriptors on objects implemented in C. The "
"descriptor object is returned instead of the underlying attribute."
msgstr ""

#: ../../library/inspect.rst:1391
msgid ""
"You can handle these with code like the following. Note that for "
"arbitrary getset descriptors invoking these may trigger code execution::"
msgstr ""

#: ../../library/inspect.rst:1417
msgid "Current State of Generators and Coroutines"
msgstr ""

#: ../../library/inspect.rst:1419
msgid ""
"When implementing coroutine schedulers and for other advanced uses of "
"generators, it is useful to determine whether a generator is currently "
"executing, is waiting to start or resume or execution, or has already "
"terminated. :func:`getgeneratorstate` allows the current state of a "
"generator to be determined easily."
msgstr ""

#: ../../library/inspect.rst:1427
msgid "Get current state of a generator-iterator."
msgstr ""

#: ../../library/inspect.rst:1433 ../../library/inspect.rst:1448
msgid "Possible states are:"
msgstr ""

#: ../../library/inspect.rst:1430
msgid "GEN_CREATED: Waiting to start execution."
msgstr ""

#: ../../library/inspect.rst:1431
msgid "GEN_RUNNING: Currently being executed by the interpreter."
msgstr ""

#: ../../library/inspect.rst:1432
msgid "GEN_SUSPENDED: Currently suspended at a yield expression."
msgstr ""

#: ../../library/inspect.rst:1433
msgid "GEN_CLOSED: Execution has completed."
msgstr ""

#: ../../library/inspect.rst:1439
msgid ""
"Get current state of a coroutine object.  The function is intended to be "
"used with coroutine objects created by :keyword:`async def` functions, "
"but will accept any coroutine-like object that has ``cr_running`` and "
"``cr_frame`` attributes."
msgstr ""

#: ../../library/inspect.rst:1445
msgid "CORO_CREATED: Waiting to start execution."
msgstr ""

#: ../../library/inspect.rst:1446
msgid "CORO_RUNNING: Currently being executed by the interpreter."
msgstr ""

#: ../../library/inspect.rst:1447
msgid "CORO_SUSPENDED: Currently suspended at an await expression."
msgstr ""

#: ../../library/inspect.rst:1448
msgid "CORO_CLOSED: Execution has completed."
msgstr ""

#: ../../library/inspect.rst:1452
msgid ""
"The current internal state of the generator can also be queried. This is "
"mostly useful for testing purposes, to ensure that internal state is "
"being updated as expected:"
msgstr ""

#: ../../library/inspect.rst:1458
msgid ""
"Get the mapping of live local variables in *generator* to their current "
"values.  A dictionary is returned that maps from variable names to "
"values. This is the equivalent of calling :func:`locals` in the body of "
"the generator, and all the same caveats apply."
msgstr ""

#: ../../library/inspect.rst:1463
msgid ""
"If *generator* is a :term:`generator` with no currently associated frame,"
" then an empty dictionary is returned.  :exc:`TypeError` is raised if "
"*generator* is not a Python generator object."
msgstr ""

#: ../../library/inspect.rst:1469
msgid ""
"This function relies on the generator exposing a Python stack frame for "
"introspection, which isn't guaranteed to be the case in all "
"implementations of Python. In such cases, this function will always "
"return an empty dictionary."
msgstr ""

#: ../../library/inspect.rst:1478
msgid ""
"This function is analogous to :func:`~inspect.getgeneratorlocals`, but "
"works for coroutine objects created by :keyword:`async def` functions."
msgstr ""

#: ../../library/inspect.rst:1487
msgid "Code Objects Bit Flags"
msgstr ""

#: ../../library/inspect.rst:1489
msgid ""
"Python code objects have a ``co_flags`` attribute, which is a bitmap of "
"the following flags:"
msgstr ""

#: ../../library/inspect.rst:1494
msgid "The code object is optimized, using fast locals."
msgstr ""

#: ../../library/inspect.rst:1498
msgid ""
"If set, a new dict will be created for the frame's ``f_locals`` when the "
"code object is executed."
msgstr ""

#: ../../library/inspect.rst:1503
msgid "The code object has a variable positional parameter (``*args``-like)."
msgstr ""

#: ../../library/inspect.rst:1507
msgid "The code object has a variable keyword parameter (``**kwargs``-like)."
msgstr ""

#: ../../library/inspect.rst:1511
msgid "The flag is set when the code object is a nested function."
msgstr ""

#: ../../library/inspect.rst:1515
msgid ""
"The flag is set when the code object is a generator function, i.e. a "
"generator object is returned when the code object is executed."
msgstr ""

#: ../../library/inspect.rst:1520
msgid ""
"The flag is set when the code object is a coroutine function. When the "
"code object is executed it returns a coroutine object. See :pep:`492` for"
" more details."
msgstr ""

#: ../../library/inspect.rst:1528
msgid ""
"The flag is used to transform generators into generator-based coroutines."
"  Generator objects with this flag can be used in ``await`` expression, "
"and can ``yield from`` coroutine objects. See :pep:`492` for more "
"details."
msgstr ""

#: ../../library/inspect.rst:1537
msgid ""
"The flag is set when the code object is an asynchronous generator "
"function.  When the code object is executed it returns an asynchronous "
"generator object.  See :pep:`525` for more details."
msgstr ""

#: ../../library/inspect.rst:1544
msgid ""
"The flags are specific to CPython, and may not be defined in other Python"
" implementations.  Furthermore, the flags are an implementation detail, "
"and can be removed or deprecated in future Python releases. It's "
"recommended to use public APIs from the :mod:`inspect` module for any "
"introspection needs."
msgstr ""

#: ../../library/inspect.rst:1554
msgid "Command Line Interface"
msgstr "命令行界面"

#: ../../library/inspect.rst:1556
msgid ""
"The :mod:`inspect` module also provides a basic introspection capability "
"from the command line."
msgstr ""

#: ../../library/inspect.rst:1561
msgid ""
"By default, accepts the name of a module and prints the source of that "
"module. A class or function within the module can be printed instead by "
"appended a colon and the qualified name of the target object."
msgstr ""

#: ../../library/inspect.rst:1567
msgid "Print information about the specified object rather than the source code"
msgstr ""

#~ msgid ""
#~ "Get the names and default values "
#~ "of a Python function's parameters. A "
#~ ":term:`named tuple` ``ArgSpec(args, varargs, "
#~ "keywords, defaults)`` is returned. *args* "
#~ "is a list of the parameter names."
#~ " *varargs* and *keywords* are the "
#~ "names of the ``*`` and ``**`` "
#~ "parameters or ``None``. *defaults* is a"
#~ " tuple of default argument values or"
#~ " ``None`` if there are no default "
#~ "arguments; if this tuple has *n* "
#~ "elements, they correspond to the last"
#~ " *n* elements listed in *args*."
#~ msgstr ""

#~ msgid ""
#~ "Use :func:`getfullargspec` for an updated "
#~ "API that is usually a drop-in "
#~ "replacement, but also correctly handles "
#~ "function annotations and keyword-only "
#~ "parameters."
#~ msgstr ""

#~ msgid ""
#~ "Alternatively, use :func:`signature` and "
#~ ":ref:`Signature Object <inspect-signature-"
#~ "object>`, which provide a more "
#~ "structured introspection API for callables."
#~ msgstr ""

#~ msgid ""
#~ "Format a pretty argument spec from "
#~ "the values returned by :func:`getfullargspec`."
#~ msgstr ""

#~ msgid ""
#~ "The first seven arguments are (``args``,"
#~ " ``varargs``, ``varkw``, ``defaults``, "
#~ "``kwonlyargs``, ``kwonlydefaults``, ``annotations``)."
#~ msgstr ""

#~ msgid ""
#~ "The other six arguments are functions"
#~ " that are called to turn argument "
#~ "names, ``*`` argument name, ``**`` "
#~ "argument name, default values, return "
#~ "annotation and individual annotations into "
#~ "strings, respectively."
#~ msgstr ""

#~ msgid "For example:"
#~ msgstr "例如:"

#~ msgid ""
#~ "Use :func:`signature` and :ref:`Signature "
#~ "Object <inspect-signature-object>`, which "
#~ "provide a better introspecting API for"
#~ " callables."
#~ msgstr ""

#~ msgid "The flag is set if there are no free or cell variables."
#~ msgstr ""

#~ msgid "tuple of names of local variables"
#~ msgstr "局部变量名称的元组"

#~ msgid ""
#~ "When the following functions return "
#~ "\"frame records,\" each record is a "
#~ ":term:`named tuple` ``FrameInfo(frame, filename, "
#~ "lineno, function, code_context, index)``. The"
#~ " tuple contains the frame object, the"
#~ " filename, the line number of the "
#~ "current line, the function name, a "
#~ "list of lines of context from the"
#~ " source code, and the index of "
#~ "the current line within that list."
#~ msgstr ""

#~ msgid ""
#~ "Get information about a frame or "
#~ "traceback object.  A :term:`named tuple` "
#~ "``Traceback(filename, lineno, function, "
#~ "code_context, index)`` is returned."
#~ msgstr ""

#~ msgid ""
#~ "Get a list of frame records for"
#~ " a frame and all outer frames.  "
#~ "These frames represent the calls that"
#~ " lead to the creation of *frame*. "
#~ "The first entry in the returned "
#~ "list represents *frame*; the last entry"
#~ " represents the outermost call on "
#~ "*frame*'s stack."
#~ msgstr ""

#~ msgid ""
#~ "Get a list of frame records for"
#~ " a traceback's frame and all inner"
#~ " frames.  These frames represent calls "
#~ "made as a consequence of *frame*.  "
#~ "The first entry in the list "
#~ "represents *traceback*; the last entry "
#~ "represents where the exception was "
#~ "raised."
#~ msgstr ""

#~ msgid ""
#~ "Return a list of frame records for"
#~ " the caller's stack.  The first entry"
#~ " in the returned list represents the"
#~ " caller; the last entry represents "
#~ "the outermost call on the stack."
#~ msgstr ""

#~ msgid ""
#~ "Return a list of frame records for"
#~ " the stack between the current frame"
#~ " and the frame in which an "
#~ "exception currently being handled was "
#~ "raised in.  The first entry in the"
#~ " list represents the caller; the last"
#~ " entry represents where the exception "
#~ "was raised."
#~ msgstr ""

