# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2021, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2021.
#
# Translators:
# MuSheng Chen <sheng.2179@gmail.com>, 2021
# Dai Xu <daixu61@hotmail.com>, 2021
# ww song <sww4718168@gmail.com>, 2021
# Siyuan Xu, 2021
# JW H <hjwdhjwd@gmail.com>, 2021
# jaystone776 <1732865113@qq.com>, 2021
# Alpha Du <alphanow@gmail.com>, 2021
# Freesand Leo <yuqinju@163.com>, 2021
# xinetzone <735613050@qq.com>,2022
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.10\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-10-12 09:44+0800\n"
"PO-Revision-Date: 2021-06-28 01:16+0000\n"
"Last-Translator: xinetzone <735613050@qq.com>, 2022\n"
"Language: zh_CN\n"
"Language-Team: Chinese (China) (https://www.transifex.com/python-"
"doc/teams/5390/zh_CN/)\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.10.3\n"

#: ../../library/typing.rst:3
msgid ":mod:`typing` --- Support for type hints"
msgstr ":mod:`typing` --- 类型提示支持"

#: ../../library/typing.rst:10
msgid "**Source code:** :source:`Lib/typing.py`"
msgstr "**源码：** :source:`Lib/typing.py`"

#: ../../library/typing.rst:14
msgid ""
"The Python runtime does not enforce function and variable type "
"annotations. They can be used by third party tools such as type checkers,"
" IDEs, linters, etc."
msgstr "Python 运行时不强制执行函数和变量类型注解，但这些注解可用于类型检查器、IDE、静态检查器等第三方工具。"

#: ../../library/typing.rst:20
msgid ""
"This module provides runtime support for type hints. The most fundamental"
" support consists of the types :data:`Any`, :data:`Union`, "
":data:`Callable`, :class:`TypeVar`, and :class:`Generic`. For a full "
"specification, please see :pep:`484`. For a simplified introduction to "
"type hints, see :pep:`483`."
msgstr ""
"这个模块提供了对类型提示的运行时支持。最基本的支持包括 :data:`Any`, :data:`Union`, :data:`Callable`,"
" :class:`TypeVar`, 和 :class:`Generic`。关于完整的规范，请看 "
":pep:`484`。关于类型提示的简化介绍，请参见 :pep:`483`。"

#: ../../library/typing.rst:26
msgid ""
"The function below takes and returns a string and is annotated as "
"follows::"
msgstr "下面的函数接收与返回的都是字符串，注解方式如下："

#: ../../library/typing.rst:31
msgid ""
"In the function ``greeting``, the argument ``name`` is expected to be of "
"type :class:`str` and the return type :class:`str`. Subtypes are accepted"
" as arguments."
msgstr ""
"``greeting`` 函数中，参数 ``name`` 的类型是 :class:`str`，返回类型也是 "
":class:`str`。子类型也可以当作参数。"

#: ../../library/typing.rst:35
msgid ""
"New features are frequently added to the ``typing`` module. The "
"`typing_extensions <https://pypi.org/project/typing-extensions/>`_ "
"package provides backports of these new features to older versions of "
"Python."
msgstr ""

#: ../../library/typing.rst:39
msgid ""
"For a summary of deprecated features and a deprecation timeline, please "
"see `Deprecation Timeline of Major Features`_."
msgstr ""

#: ../../library/typing.rst:44
msgid ""
"The documentation at https://typing.readthedocs.io/ serves as useful "
"reference for type system features, useful typing related tools and "
"typing best practices."
msgstr ""

#: ../../library/typing.rst:51
msgid "Relevant PEPs"
msgstr ""

#: ../../library/typing.rst:53
msgid ""
"Since the initial introduction of type hints in :pep:`484` and "
":pep:`483`, a number of PEPs have modified and enhanced Python's "
"framework for type annotations. These include:"
msgstr ""

#: ../../library/typing.rst:58
msgid ":pep:`526`: Syntax for Variable Annotations"
msgstr "添加了对 :pep:`526` 中变量注解句法的支持"

#: ../../library/typing.rst:58
msgid ""
"*Introducing* syntax for annotating variables outside of function "
"definitions, and :data:`ClassVar`"
msgstr ""

#: ../../library/typing.rst:61
msgid ":pep:`544`: Protocols: Structural subtyping (static duck typing)"
msgstr ""

#: ../../library/typing.rst:61
msgid ""
"*Introducing* :class:`Protocol` and the "
":func:`@runtime_checkable<runtime_checkable>` decorator"
msgstr ""

#: ../../library/typing.rst:64
msgid ":pep:`585`: Type Hinting Generics In Standard Collections"
msgstr ""

#: ../../library/typing.rst:64
msgid ""
"*Introducing* :class:`types.GenericAlias` and the ability to use standard"
" library classes as :ref:`generic types<types-genericalias>`"
msgstr ""

#: ../../library/typing.rst:66
msgid ":pep:`586`: Literal Types"
msgstr ""

#: ../../library/typing.rst:67
msgid "*Introducing* :data:`Literal`"
msgstr ""

#: ../../library/typing.rst:68
msgid ""
":pep:`589`: TypedDict: Type Hints for Dictionaries with a Fixed Set of "
"Keys"
msgstr ""

#: ../../library/typing.rst:69
msgid "*Introducing* :class:`TypedDict`"
msgstr ""

#: ../../library/typing.rst:70
msgid ":pep:`591`: Adding a final qualifier to typing"
msgstr ""

#: ../../library/typing.rst:71
msgid "*Introducing* :data:`Final` and the :func:`@final<final>` decorator"
msgstr ""

#: ../../library/typing.rst:72
msgid ":pep:`593`: Flexible function and variable annotations"
msgstr ""

#: ../../library/typing.rst:73
msgid "*Introducing* :data:`Annotated`"
msgstr ""

#: ../../library/typing.rst:76
msgid ":pep:`604`: Allow writing union types as ``X | Y``"
msgstr ""

#: ../../library/typing.rst:75
msgid ""
"*Introducing* :data:`types.UnionType` and the ability to use the binary-"
"or operator ``|`` to signify a :ref:`union of types<types-union>`"
msgstr ""

#: ../../library/typing.rst:78
msgid ":pep:`612`: Parameter Specification Variables"
msgstr ""

#: ../../library/typing.rst:79
msgid "*Introducing* :class:`ParamSpec` and :data:`Concatenate`"
msgstr ""

#: ../../library/typing.rst:80
msgid ":pep:`613`: Explicit Type Aliases"
msgstr "关于显式类型别名的更多细节，请参见 :pep:`613`"

#: ../../library/typing.rst:81
msgid "*Introducing* :data:`TypeAlias`"
msgstr ""

#: ../../library/typing.rst:82
msgid ":pep:`646`: Variadic Generics"
msgstr ""

#: ../../library/typing.rst:83
msgid "*Introducing* :data:`TypeVarTuple`"
msgstr ""

#: ../../library/typing.rst:84
msgid ":pep:`647`: User-Defined Type Guards"
msgstr ""

#: ../../library/typing.rst:85
msgid "*Introducing* :data:`TypeGuard`"
msgstr ""

#: ../../library/typing.rst:86
msgid ""
":pep:`655`: Marking individual TypedDict items as required or potentially"
" missing"
msgstr ""

#: ../../library/typing.rst:87
msgid "*Introducing* :data:`Required` and :data:`NotRequired`"
msgstr ""

#: ../../library/typing.rst:88
msgid ":pep:`673`: Self type"
msgstr ""

#: ../../library/typing.rst:89
msgid "*Introducing* :data:`Self`"
msgstr ""

#: ../../library/typing.rst:90
msgid ":pep:`675`: Arbitrary Literal String Type"
msgstr ""

#: ../../library/typing.rst:91
msgid "*Introducing* :data:`LiteralString`"
msgstr ""

#: ../../library/typing.rst:93
msgid ":pep:`681`: Data Class Transforms"
msgstr ""

#: ../../library/typing.rst:93
msgid ""
"*Introducing* the :func:`@dataclass_transform<dataclass_transform>` "
"decorator"
msgstr ""

#: ../../library/typing.rst:98
msgid "Type aliases"
msgstr "类型别名"

#: ../../library/typing.rst:100
msgid ""
"A type alias is defined by assigning the type to the alias. In this "
"example, ``Vector`` and ``list[float]`` will be treated as "
"interchangeable synonyms::"
msgstr "把类型赋给别名，就可以定义类型别名。本例中，``Vector`` 和 ``list[float]`` 相同，可互换："

#: ../../library/typing.rst:111
msgid ""
"Type aliases are useful for simplifying complex type signatures. For "
"example::"
msgstr "类型别名适用于简化复杂的类型签名。例如："

#: ../../library/typing.rst:129
msgid ""
"Note that ``None`` as a type hint is a special case and is replaced by "
"``type(None)``."
msgstr "注意，``None`` 是一种类型提示特例，已被 ``type(None)`` 取代。"

#: ../../library/typing.rst:135
msgid "NewType"
msgstr "NewType"

#: ../../library/typing.rst:137
#, fuzzy
msgid "Use the :class:`NewType` helper to create distinct types::"
msgstr "使用 :class:`NewType` 辅助类来创建不同的类型 ::"

#: ../../library/typing.rst:144
msgid ""
"The static type checker will treat the new type as if it were a subclass "
"of the original type. This is useful in helping catch logical errors::"
msgstr "静态类型检查器把新类型当作原始类型的子类，这种方式适用于捕捉逻辑错误："

#: ../../library/typing.rst:156
msgid ""
"You may still perform all ``int`` operations on a variable of type "
"``UserId``, but the result will always be of type ``int``. This lets you "
"pass in a ``UserId`` wherever an ``int`` might be expected, but will "
"prevent you from accidentally creating a ``UserId`` in an invalid way::"
msgstr ""
"``UserId`` 类型的变量可执行所有 ``int`` 操作，但返回结果都是 ``int`` 类型。这种方式允许在预期 ``int`` 时传入"
" ``UserId``，还能防止意外创建无效的 ``UserId``："

#: ../../library/typing.rst:164
#, fuzzy
msgid ""
"Note that these checks are enforced only by the static type checker. At "
"runtime, the statement ``Derived = NewType('Derived', Base)`` will make "
"``Derived`` a callable that immediately returns whatever parameter you "
"pass it. That means the expression ``Derived(some_value)`` does not "
"create a new class or introduce much overhead beyond that of a regular "
"function call."
msgstr ""
"注意，这些检查只由静态类型检查器强制执行。在运行时，语句 ``Derived = NewType('Derived', Base)`` 将产生一个"
" ``Derived`` 类，该类立即返回你传递给它的任何参数。 这意味着语句 ``Derived(some_value)`` "
"不会创建一个新的类，也不会引入超出常规函数调用的很多开销。"

#: ../../library/typing.rst:170
msgid ""
"More precisely, the expression ``some_value is Derived(some_value)`` is "
"always true at runtime."
msgstr "更确切地说，在运行时，``some_value is Derived(some_value)`` 表达式总为 True。"

#: ../../library/typing.rst:173
msgid "It is invalid to create a subtype of ``Derived``::"
msgstr "创建 ``Derived`` 的子类型是无效的::"

#: ../../library/typing.rst:182
msgid ""
"However, it is possible to create a :class:`NewType` based on a 'derived'"
" ``NewType``::"
msgstr "然而，我们可以在 \"派生的\" ``NewType`` 的基础上创建一个 :class:`NewType`。"

#: ../../library/typing.rst:190
msgid "and typechecking for ``ProUserId`` will work as expected."
msgstr "同时，``ProUserId`` 的类型检查也可以按预期执行。"

#: ../../library/typing.rst:192
msgid "See :pep:`484` for more details."
msgstr "详见 :pep:`484`。"

#: ../../library/typing.rst:196
msgid ""
"Recall that the use of a type alias declares two types to be *equivalent*"
" to one another. Doing ``Alias = Original`` will make the static type "
"checker treat ``Alias`` as being *exactly equivalent* to ``Original`` in "
"all cases. This is useful when you want to simplify complex type "
"signatures."
msgstr ""
"回顾上文，类型别名声明了两种彼此 *等价* 的类型。 ``Alias = Original`` 时，静态类型检查器认为 ``Alias`` 与 "
"``Original`` *完全等价*。这种方式适用于简化复杂类型签名。"

#: ../../library/typing.rst:201
msgid ""
"In contrast, ``NewType`` declares one type to be a *subtype* of another. "
"Doing ``Derived = NewType('Derived', Original)`` will make the static "
"type checker treat ``Derived`` as a *subclass* of ``Original``, which "
"means a value of type ``Original`` cannot be used in places where a value"
" of type ``Derived`` is expected. This is useful when you want to prevent"
" logic errors with minimal runtime cost."
msgstr ""
"反之，``NewType`` 声明把一种类型当作另一种类型的 *子类型*。``Derived = NewType('Derived', "
"Original)`` 时，静态类型检查器把 ``Derived`` 当作 ``Original`` 的 *子类* ，即，``Original``"
" 类型的值不能用在预期 ``Derived`` 类型的位置。这种方式适用于以最小运行时成本防止逻辑错误。"

#: ../../library/typing.rst:210
msgid ""
"``NewType`` is now a class rather than a function.  There is some "
"additional runtime cost when calling ``NewType`` over a regular function."
"  However, this cost will be reduced in 3.11.0."
msgstr ""
"``NewType`` 现在是一个类而不是一个函数。 在调用 ``NewType`` 而不是普通的函数时，会有一些额外的运行时间成本。 "
"然而，这种开销将在 3.11.0 中减少。"

#: ../../library/typing.rst:217
msgid "Callable"
msgstr "可调对象（Callable）"

#: ../../library/typing.rst:219
msgid ""
"Frameworks expecting callback functions of specific signatures might be "
"type hinted using ``Callable[[Arg1Type, Arg2Type], ReturnType]``."
msgstr "预期特定签名回调函数的框架可以用 ``Callable[[Arg1Type, Arg2Type], ReturnType]`` 实现类型提示。"

#: ../../library/typing.rst:222 ../../library/typing.rst:1165
#: ../../library/typing.rst:2803
msgid "For example::"
msgstr "例如："

#: ../../library/typing.rst:237
msgid ""
"It is possible to declare the return type of a callable without "
"specifying the call signature by substituting a literal ellipsis for the "
"list of arguments in the type hint: ``Callable[..., ReturnType]``."
msgstr ""
"无需指定调用签名，用省略号字面量替换类型提示里的参数列表： ``Callable[..., "
"ReturnType]``，就可以声明可调对象的返回类型。"

#: ../../library/typing.rst:241 ../../library/typing.rst:843
msgid ""
"Callables which take other callables as arguments may indicate that their"
" parameter types are dependent on each other using :class:`ParamSpec`. "
"Additionally, if that callable adds or removes arguments from other "
"callables, the :data:`Concatenate` operator may be used.  They take the "
"form ``Callable[ParamSpecVariable, ReturnType]`` and "
"``Callable[Concatenate[Arg1Type, Arg2Type, ..., ParamSpecVariable], "
"ReturnType]`` respectively."
msgstr ""
"以其他可调用对象为参数的可调用对象可以使用 :class:`ParamSpec` "
"来表明其参数类型是相互依赖的。此外，如果该可调用对象增加或删除了其他可调用对象的参数，可以使用 :data:`Concatenate` 操作符。 "
"它们分别采取 ``Callable[ParamSpecVariable, ReturnType]`` 和 "
"``Callable[Concatenate[Arg1Type, Arg2Type, ..., ParamSpecVariable], "
"ReturnType]`` 的形式。"

#: ../../library/typing.rst:249 ../../library/typing.rst:855
msgid ""
"``Callable`` now supports :class:`ParamSpec` and :data:`Concatenate`. See"
" :pep:`612` for more information."
msgstr ""
"``Callable`` 现在支持 :class:`ParamSpec` 和 :data:`Concatenate`。更多信息见 "
":pep:`612`。"

#: ../../library/typing.rst:254
#, fuzzy
msgid ""
"The documentation for :class:`ParamSpec` and :class:`Concatenate` "
"provides examples of usage in ``Callable``."
msgstr ":class:`ParamSpec` 和 :class:`Concatenate` 的文档提供了在 ``Callable`` 中使用的例子。"

#: ../../library/typing.rst:260
msgid "Generics"
msgstr "泛型（Generic）"

#: ../../library/typing.rst:262
msgid ""
"Since type information about objects kept in containers cannot be "
"statically inferred in a generic way, abstract base classes have been "
"extended to support subscription to denote expected types for container "
"elements."
msgstr "容器中，对象的类型信息不能以泛型方式静态推断，因此，抽象基类被扩展支持下标，用于表示容器元素的预期类型。"

#: ../../library/typing.rst:273
#, fuzzy
msgid ""
"Generics can be parameterized by using a factory available in typing "
"called :class:`TypeVar`."
msgstr "typing 模块中新推出的 :class:`TypeVar` 工厂函数实现泛型参数化。"

#: ../../library/typing.rst:289
msgid "User-defined generic types"
msgstr "用户定义的泛型类型"

#: ../../library/typing.rst:291
msgid "A user-defined class can be defined as a generic class."
msgstr "用户定义的类可以定义为泛型类。"

#: ../../library/typing.rst:317
msgid ""
"``Generic[T]`` as a base class defines that the class ``LoggedVar`` takes"
" a single type parameter ``T`` . This also makes ``T`` valid as a type "
"within the class body."
msgstr "``Generic[T]`` 是定义类 ``LoggedVar`` 的基类，该类使用单类型参数 ``T``。在该类体内，``T`` 是有效的类型。"

#: ../../library/typing.rst:321
msgid ""
"The :class:`Generic` base class defines :meth:`~object.__class_getitem__`"
" so that ``LoggedVar[t]`` is valid as a type::"
msgstr ""
":class:`Generic` 基类定义了 "
":meth:`~object.__class_getitem__`，因此，``LoggedVar[t]`` 也是有效类型："

#: ../../library/typing.rst:330
msgid ""
"A generic type can have any number of type variables. All varieties of "
":class:`TypeVar` are permissible as parameters for a generic type::"
msgstr ""

#: ../../library/typing.rst:342
msgid ""
"Each type variable argument to :class:`Generic` must be distinct. This is"
" thus invalid::"
msgstr ":class:`Generic` 类型变量的参数应各不相同。下列代码就是无效的："

#: ../../library/typing.rst:353
msgid "You can use multiple inheritance with :class:`Generic`::"
msgstr ":class:`Generic` 支持多重继承："

#: ../../library/typing.rst:363
msgid "When inheriting from generic classes, some type variables could be fixed::"
msgstr "继承自泛型类时，可以修正某些类型变量："

#: ../../library/typing.rst:373
msgid "In this case ``MyDict`` has a single parameter, ``T``."
msgstr "比如，本例中 ``MyDict`` 调用的单参数，``T``。"

#: ../../library/typing.rst:375
msgid ""
"Using a generic class without specifying type parameters assumes "
":data:`Any` for each position. In the following example, ``MyIterable`` "
"is not generic but implicitly inherits from ``Iterable[Any]``::"
msgstr ""
"未指定泛型类的类型参数时，每个位置的类型都预设为 :data:`Any`。下例中，``MyIterable`` 不是泛型，但却隐式继承了 "
"``Iterable[Any]``："

#: ../../library/typing.rst:383
msgid "User defined generic type aliases are also supported. Examples::"
msgstr "还支持用户定义的泛型类型别名。例如："

#: ../../library/typing.rst:400
msgid ":class:`Generic` no longer has a custom metaclass."
msgstr ":class:`Generic` 不再支持自定义元类。"

#: ../../library/typing.rst:403
msgid ""
"User-defined generics for parameter expressions are also supported via "
"parameter specification variables in the form ``Generic[P]``.  The "
"behavior is consistent with type variables' described above as parameter "
"specification variables are treated by the typing module as a specialized"
" type variable.  The one exception to this is that a list of types can be"
" used to substitute a :class:`ParamSpec`::"
msgstr ""
"用户定义的参数表达式的泛型也通过 ``Generic[P]`` "
"形式的参数规范变量来支持。该行为与上面描述的类型变量一致，因为参数规范变量被类型化模块视为一个专门的类型变量。 "
"这方面的一个例外是，一个类型列表可以用来替代 :class:`ParamSpec`::"

#: ../../library/typing.rst:420
#, fuzzy
msgid ""
"Furthermore, a generic with only one parameter specification variable "
"will accept parameter lists in the forms ``X[[Type1, Type2, ...]]`` and "
"also ``X[Type1, Type2, ...]`` for aesthetic reasons.  Internally, the "
"latter is converted to the former, so the following are equivalent::"
msgstr ""
"此外，一个只有一个参数规格变量的泛型将接受形式为 ``X[[Type1, Type2, ...]]`` 的参数列表，同时为了美观，也接受 "
"``X[Type1, Type2, ...]``。 在内部，后者被转换为前者，因此是等价的::"

#: ../../library/typing.rst:432
msgid ""
"Do note that generics with :class:`ParamSpec` may not have correct "
"``__parameters__`` after substitution in some cases because they are "
"intended primarily for static type checking."
msgstr ""
"请注意，带有 :class:`ParamSpec` 的泛型在某些情况下可能不会有正确的 "
"``__parameters__``，因为它们主要用于静态类型检查。"

#: ../../library/typing.rst:436
msgid ""
":class:`Generic` can now be parameterized over parameter expressions. See"
" :class:`ParamSpec` and :pep:`612` for more details."
msgstr ""
":class:`Generic` 现在可以通过参数表达式进行参数化。参见 :class:`ParamSpec` 和 :pep:`612` "
"以了解更多细节。"

#: ../../library/typing.rst:440
msgid ""
"A user-defined generic class can have ABCs as base classes without a "
"metaclass conflict. Generic metaclasses are not supported. The outcome of"
" parameterizing generics is cached, and most types in the typing module "
"are hashable and comparable for equality."
msgstr ""
"抽象基类可作为用户定义的泛型类的基类，且不会与元类冲突。现已不再支持泛型元类。参数化泛型的输出结果会被缓存，typing "
"模块的大多数类型都可哈希、可进行等价对比。"

#: ../../library/typing.rst:447
msgid "The :data:`Any` type"
msgstr ":data:`Any` 类型"

#: ../../library/typing.rst:449
msgid ""
"A special kind of type is :data:`Any`. A static type checker will treat "
"every type as being compatible with :data:`Any` and :data:`Any` as being "
"compatible with every type."
msgstr ""
":data:`Any` 是一种特殊的类型。静态类型检查器认为所有类型均与 :data:`Any` 兼容，同样，:data:`Any` "
"也与所有类型兼容。"

#: ../../library/typing.rst:453
msgid ""
"This means that it is possible to perform any operation or method call on"
" a value of type :data:`Any` and assign it to any variable::"
msgstr "也就是说，可对 :data:`Any` 类型的值执行任何操作或方法调用，并赋值给任意变量："

#: ../../library/typing.rst:471
msgid ""
"Notice that no typechecking is performed when assigning a value of type "
":data:`Any` to a more precise type. For example, the static type checker "
"did not report an error when assigning ``a`` to ``s`` even though ``s`` "
"was declared to be of type :class:`str` and receives an :class:`int` "
"value at runtime!"
msgstr ""
"注意，:data:`Any` 类型的值赋给更精确的类型时，不执行类型检查。例如，把 ``a`` 赋给 ``s``，在运行时，即便 ``s`` "
"已声明为 :class:`str` 类型，但接收 :class:`int` 值时，静态类型检查器也不会报错。"

#: ../../library/typing.rst:477
msgid ""
"Furthermore, all functions without a return type or parameter types will "
"implicitly default to using :data:`Any`::"
msgstr "此外，未指定返回值与参数类型的函数，都隐式地默认使用 :data:`Any`："

#: ../../library/typing.rst:490
msgid ""
"This behavior allows :data:`Any` to be used as an *escape hatch* when you"
" need to mix dynamically and statically typed code."
msgstr "需要混用动态与静态类型代码时，此操作把 :data:`Any` 当作 *应急出口*。"

#: ../../library/typing.rst:493
msgid ""
"Contrast the behavior of :data:`Any` with the behavior of "
":class:`object`. Similar to :data:`Any`, every type is a subtype of "
":class:`object`. However, unlike :data:`Any`, the reverse is not true: "
":class:`object` is *not* a subtype of every other type."
msgstr ""
":data:`Any` 和 :class:`object` 的区别。与 :data:`Any` 相似，所有类型都是 :class:`object`"
" 的子类型。然而，与 :data:`Any` 不同，object 不可逆：:class:`object` *不是* 其它类型的子类型。"

#: ../../library/typing.rst:498
msgid ""
"That means when the type of a value is :class:`object`, a type checker "
"will reject almost all operations on it, and assigning it to a variable "
"(or using it as a return value) of a more specialized type is a type "
"error. For example::"
msgstr ""
"就是说，值的类型是 :class:`object` "
"时，类型检查器几乎会拒绝所有对它的操作，并且，把它赋给更精确的类型变量（或返回值）属于类型错误。例如："

#: ../../library/typing.rst:520
msgid ""
"Use :class:`object` to indicate that a value could be any type in a "
"typesafe manner. Use :data:`Any` to indicate that a value is dynamically "
"typed."
msgstr "使用 :class:`object`，说明值能以类型安全的方式转为任何类型。使用 :data:`Any`，说明值是动态类型。"

#: ../../library/typing.rst:525
msgid "Nominal vs structural subtyping"
msgstr "名义子类型 vs 结构子类型"

#: ../../library/typing.rst:527
#, fuzzy
msgid ""
"Initially :pep:`484` defined the Python static type system as using "
"*nominal subtyping*. This means that a class ``A`` is allowed where a "
"class ``B`` is expected if and only if ``A`` is a subclass of ``B``."
msgstr ""
":pep:`484` 最初只是把 Python 静态类型系统定义为应用 *名义子类型*。即，当且仅当 ``A`` 是 ``B`` "
"的子类时，才能在预期 ``B`` 类时应用 ``A`` 类。"

#: ../../library/typing.rst:531
msgid ""
"This requirement previously also applied to abstract base classes, such "
"as :class:`~collections.abc.Iterable`. The problem with this approach is "
"that a class had to be explicitly marked to support them, which is "
"unpythonic and unlike what one would normally do in idiomatic dynamically"
" typed Python code. For example, this conforms to :pep:`484`::"
msgstr ""
"此项要求以前也适用于抽象基类，例如，:class:`~collections.abc.Iterable` "
"。这种方式的问题在于，定义类时必须显式说明，既不 Pythonic，也不是动态类型式 Python 代码的惯用写法。例如，下列代码就遵从了 "
":pep:`484` 的规范："

#: ../../library/typing.rst:544
msgid ""
":pep:`544` allows to solve this problem by allowing users to write the "
"above code without explicit base classes in the class definition, "
"allowing ``Bucket`` to be implicitly considered a subtype of both "
"``Sized`` and ``Iterable[int]`` by static type checkers. This is known as"
" *structural subtyping* (or static duck-typing)::"
msgstr ""
":pep:`544` 允许用户在类定义时不显式说明基类，从而解决了这一问题，静态类型检查器隐式认为 ``Bucket`` 既是 ``Sized``"
" 的子类型，又是 ``Iterable[int]`` 的子类型。这就是 *结构子类型* （又称为静态鸭子类型）："

#: ../../library/typing.rst:560
msgid ""
"Moreover, by subclassing a special class :class:`Protocol`, a user can "
"define new custom protocols to fully enjoy structural subtyping (see "
"examples below)."
msgstr "此外，结构子类型的优势在于，通过继承特殊类 :class:`Protocol` ，用户可以定义新的自定义协议（见下文中的例子）。"

#: ../../library/typing.rst:565
msgid "Module contents"
msgstr "模块内容"

#: ../../library/typing.rst:567
msgid "The module defines the following classes, functions and decorators."
msgstr "本模块定义了下列类、函数和修饰器。"

#: ../../library/typing.rst:571
msgid ""
"This module defines several types that are subclasses of pre-existing "
"standard library classes which also extend :class:`Generic` to support "
"type variables inside ``[]``. These types became redundant in Python 3.9 "
"when the corresponding pre-existing classes were enhanced to support "
"``[]``."
msgstr ""
"本模块定义了一些类型，作为标准库中已有的类的子类，从而可以让 :class:`Generic` 支持 ``[]`` 中的类型变量。Python "
"3.9 中，这些标准库的类已支持 ``[]`` ，因此，这些类型就变得冗余了。"

#: ../../library/typing.rst:577
msgid ""
"The redundant types are deprecated as of Python 3.9 but no deprecation "
"warnings will be issued by the interpreter. It is expected that type "
"checkers will flag the deprecated types when the checked program targets "
"Python 3.9 or newer."
msgstr ""
"Python 3.9 弃用了这些冗余类型，但解释器并未提供相应的弃用警告。标记弃用类型的工作留待支持 Python 3.9 "
"及以上版本的类型检查器实现。"

#: ../../library/typing.rst:582
msgid ""
"The deprecated types will be removed from the :mod:`typing` module in the"
" first Python version released 5 years after the release of Python 3.9.0."
" See details in :pep:`585`—*Type Hinting Generics In Standard "
"Collections*."
msgstr ""
"Python 3.9.0 发布五年后的首个 Python 发行版将从 :mod:`typing` 模块中移除这些弃用类型。详见 "
":pep:`585` 《*标准集合的类型提示泛型*》。"

#: ../../library/typing.rst:588
msgid "Special typing primitives"
msgstr "特殊类型原语"

#: ../../library/typing.rst:591
msgid "Special types"
msgstr "特殊类型"

#: ../../library/typing.rst:593
msgid "These can be used as types in annotations and do not support ``[]``."
msgstr "这些类型可用于类型注解，但不支持 ``[]``。"

#: ../../library/typing.rst:597
msgid "Special type indicating an unconstrained type."
msgstr "不受限的特殊类型。"

#: ../../library/typing.rst:599
msgid "Every type is compatible with :data:`Any`."
msgstr "所有类型都与 :data:`Any` 兼容。"

#: ../../library/typing.rst:600
msgid ":data:`Any` is compatible with every type."
msgstr ":data:`Any` 与所有类型都兼容。"

#: ../../library/typing.rst:602
msgid ""
":data:`Any` can now be used as a base class. This can be useful for "
"avoiding type checker errors with classes that can duck type anywhere or "
"are highly dynamic."
msgstr ""

#: ../../library/typing.rst:609
msgid ""
"Special type that includes only literal strings. A string literal is "
"compatible with ``LiteralString``, as is another ``LiteralString``, but "
"an object typed as just ``str`` is not. A string created by composing "
"``LiteralString``-typed objects is also acceptable as a "
"``LiteralString``."
msgstr ""

#: ../../library/typing.rst:615 ../../library/typing.rst:2445
#, fuzzy
msgid "Example::"
msgstr "例如："

#: ../../library/typing.rst:629
msgid ""
"This is useful for sensitive APIs where arbitrary user-generated strings "
"could generate problems. For example, the two cases above that generate "
"type checker errors could be vulnerable to an SQL injection attack."
msgstr ""

#: ../../library/typing.rst:634
#, fuzzy
msgid "See :pep:`675` for more details."
msgstr "详见 :pep:`484`。"

#: ../../library/typing.rst:640
msgid ""
"The `bottom type <https://en.wikipedia.org/wiki/Bottom_type>`_, a type "
"that has no members."
msgstr ""

#: ../../library/typing.rst:643
msgid ""
"This can be used to define a function that should never be called, or a "
"function that never returns::"
msgstr ""

#: ../../library/typing.rst:663
msgid ""
"On older Python versions, :data:`NoReturn` may be used to express the "
"same concept. ``Never`` was added to make the intended meaning more "
"explicit."
msgstr ""

#: ../../library/typing.rst:668
msgid "Special type indicating that a function never returns. For example::"
msgstr "标记没有返回值的函数的特殊类型。例如："

#: ../../library/typing.rst:676
msgid ""
"``NoReturn`` can also be used as a `bottom type "
"<https://en.wikipedia.org/wiki/Bottom_type>`_, a type that has no values."
" Starting in Python 3.11, the :data:`Never` type should be used for this "
"concept instead. Type checkers should treat the two equivalently."
msgstr ""

#: ../../library/typing.rst:687
msgid "Special type to represent the current enclosed class. For example::"
msgstr ""

#: ../../library/typing.rst:698
msgid ""
"This annotation is semantically equivalent to the following, albeit in a "
"more succinct fashion::"
msgstr ""

#: ../../library/typing.rst:710
msgid "In general if something currently follows the pattern of::"
msgstr ""

#: ../../library/typing.rst:717
msgid ""
"You should use :data:`Self` as calls to ``SubclassOfFoo.return_self`` "
"would have ``Foo`` as the return type and not ``SubclassOfFoo``."
msgstr ""

#: ../../library/typing.rst:720
msgid "Other common use cases include:"
msgstr ""

#: ../../library/typing.rst:722
msgid ""
":class:`classmethod`\\s that are used as alternative constructors and "
"return instances of the ``cls`` parameter."
msgstr ""

#: ../../library/typing.rst:724
msgid "Annotating an :meth:`~object.__enter__` method which returns self."
msgstr ""

#: ../../library/typing.rst:726
msgid "For more information, see :pep:`673`."
msgstr ""

#: ../../library/typing.rst:732
msgid ""
"Special annotation for explicitly declaring a :ref:`type alias <type-"
"aliases>`. For example::"
msgstr "用于显式声明 :ref:`类型别名 <type-aliases>` 的特殊标注。 例如::"

#: ../../library/typing.rst:739
msgid "See :pep:`613` for more details about explicit type aliases."
msgstr "关于显式类型别名的更多细节，请参见 :pep:`613`。"

#: ../../library/typing.rst:744
msgid "Special forms"
msgstr "特殊形式"

#: ../../library/typing.rst:746
msgid ""
"These can be used as types in annotations using ``[]``, each having a "
"unique syntax."
msgstr "可用于类型注解，且支持 ``[]`` ，每种形式都有其独特的句法。"

#: ../../library/typing.rst:750
msgid ""
"Tuple type; ``Tuple[X, Y]`` is the type of a tuple of two items with the "
"first item of type X and the second of type Y. The type of the empty "
"tuple can be written as ``Tuple[()]``."
msgstr ""
"元组类型； ``Tuple[X, Y]`` 是二项元组类型，第一个元素的类型是 X，第二个元素的类型是 Y。空元组的类型可写为 "
"``Tuple[()]``。"

#: ../../library/typing.rst:754
msgid ""
"Example: ``Tuple[T1, T2]`` is a tuple of two elements corresponding to "
"type variables T1 and T2.  ``Tuple[int, float, str]`` is a tuple of an "
"int, a float and a string."
msgstr ""
"例：``Tuple[T1, T2]`` 是二项元组，类型变量分别为 T1 和 T2。``Tuple[int, float, str]`` "
"是由整数、浮点数、字符串组成的三项元组。"

#: ../../library/typing.rst:758
msgid ""
"To specify a variable-length tuple of homogeneous type, use literal "
"ellipsis, e.g. ``Tuple[int, ...]``. A plain :data:`Tuple` is equivalent "
"to ``Tuple[Any, ...]``, and in turn to :class:`tuple`."
msgstr ""
"可用省略号字面量指定同质变长元组，例如，``Tuple[int, ...]`` 。:data:`Tuple` 与 ``Tuple[Any, "
"...]`` 等价，也与 :class:`tuple` 等价。"

#: ../../library/typing.rst:762
msgid ""
":class:`builtins.tuple <tuple>` now supports ``[]``. See :pep:`585` and "
":ref:`types-genericalias`."
msgstr ""
":class:`builtins.tuple <tuple>` 现已支持 ``[]``。详见 :pep:`585` 与 :ref:`types-"
"genericalias`。"

#: ../../library/typing.rst:768
msgid ""
"Union type; ``Union[X, Y]`` is equivalent to ``X | Y`` and means either X"
" or Y."
msgstr "``Union[X, Y]`` 等同于 ``X | Y``，意味着 X 或 Y。"

#: ../../library/typing.rst:770
msgid ""
"To define a union, use e.g. ``Union[int, str]`` or the shorthand ``int | "
"str``. Using that shorthand is recommended. Details:"
msgstr "要定义一个 union，可以使用例如 ``Union[int, str]`` 或者速记 ``int | str``。建议使用这种速记方法。细节："

#: ../../library/typing.rst:772
msgid "The arguments must be types and there must be at least one."
msgstr "参数必须是某种类型，且至少有一个。"

#: ../../library/typing.rst:774
msgid "Unions of unions are flattened, e.g.::"
msgstr "联合类型之联合类型会被展平，例如："

#: ../../library/typing.rst:778
msgid "Unions of a single argument vanish, e.g.::"
msgstr "单参数之联合类型就是该参数自身，例如："

#: ../../library/typing.rst:782
msgid "Redundant arguments are skipped, e.g.::"
msgstr "冗余的参数会被跳过，例如："

#: ../../library/typing.rst:786
msgid "When comparing unions, the argument order is ignored, e.g.::"
msgstr "比较联合类型，不涉及参数顺序，例如："

#: ../../library/typing.rst:790
msgid "You cannot subclass or instantiate a ``Union``."
msgstr "``Union`` 不能作为子类，也不能实例化。"

#: ../../library/typing.rst:792
msgid "You cannot write ``Union[X][Y]``."
msgstr "不支持 ``Union[X][Y]`` 这种写法。"

#: ../../library/typing.rst:794
msgid "Don't remove explicit subclasses from unions at runtime."
msgstr "在运行时，不要移除联合类型中的显式子类。"

#: ../../library/typing.rst:797
msgid ""
"Unions can now be written as ``X | Y``. See :ref:`union type expressions"
"<types-union>`."
msgstr "联合类型现在可以写成 ``X | Y``。 参见 :ref:`联合类型表达式 <types-union>`。"

#: ../../library/typing.rst:803
msgid "Optional type."
msgstr "可选类型。"

#: ../../library/typing.rst:805
msgid "``Optional[X]`` is equivalent to ``X | None`` (or ``Union[X, None]``)."
msgstr " ``Optional[X]`` 等同于 ``X | None`` （或 ``Union[X, None]``）。"

#: ../../library/typing.rst:807
msgid ""
"Note that this is not the same concept as an optional argument, which is "
"one that has a default.  An optional argument with a default does not "
"require the ``Optional`` qualifier on its type annotation just because it"
" is optional. For example::"
msgstr "注意，可选类型与含默认值的可选参数不同。含默认值的可选参数不需要在类型注解上添加 ``Optional`` 限定符，因为它仅是可选的。例如："

#: ../../library/typing.rst:815
msgid ""
"On the other hand, if an explicit value of ``None`` is allowed, the use "
"of ``Optional`` is appropriate, whether the argument is optional or not. "
"For example::"
msgstr "另一方面，显式应用 ``None`` 值时，不管该参数是否可选， ``Optional`` 都适用。例如："

#: ../../library/typing.rst:822
msgid ""
"Optional can now be written as ``X | None``. See :ref:`union type "
"expressions<types-union>`."
msgstr "Optional 现在可以写成 ``X | None``。参见 :ref:`union 类型表达式 <types-union>`。"

#: ../../library/typing.rst:828
msgid "Callable type; ``Callable[[int], str]`` is a function of (int) -> str."
msgstr "可调类型； ``Callable[[int], str]`` 是把（int）转为 str 的函数。"

#: ../../library/typing.rst:830
msgid ""
"The subscription syntax must always be used with exactly two values: the "
"argument list and the return type.  The argument list must be a list of "
"types or an ellipsis; the return type must be a single type."
msgstr "下标句法必须与参数列表和返回类型这两个值一起使用。参数列表只能是类型列表或省略号；返回类型只能是单一类型。"

#: ../../library/typing.rst:835
msgid ""
"There is no syntax to indicate optional or keyword arguments; such "
"function types are rarely used as callback types. ``Callable[..., "
"ReturnType]`` (literal ellipsis) can be used to type hint a callable "
"taking any number of arguments and returning ``ReturnType``.  A plain "
":data:`Callable` is equivalent to ``Callable[..., Any]``, and in turn to "
":class:`collections.abc.Callable`."
msgstr ""
"没有说明可选参数或关键字参数的句法；这类函数类型很少用作回调类型。``Callable[..., ReturnType]`` "
"（省略号字面量）可用于为接受任意数量参数，并返回 ``ReturnType`` 的可调对象提供类型提示。纯 :data:`Callable` "
"等价于 ``Callable[..., Any]``，进而等价于 :class:`collections.abc.Callable` 。"

#: ../../library/typing.rst:851
msgid ""
":class:`collections.abc.Callable` now supports ``[]``. See :pep:`585` and"
" :ref:`types-genericalias`."
msgstr ""
":class:`collections.abc.Callable` 现已支持 ``[]``。 详见 :pep:`585` 与 :ref"
":`types-genericalias`。"

#: ../../library/typing.rst:860
msgid ""
"The documentation for :class:`ParamSpec` and :class:`Concatenate` provide"
" examples of usage with ``Callable``."
msgstr ":class:`ParamSpec` 和 :class:`Concatenate` 的文档提供了使用 ``Callable`` 的例子。"

#: ../../library/typing.rst:865
#, fuzzy
msgid ""
"Used with :data:`Callable` and :class:`ParamSpec` to type annotate a "
"higher order callable which adds, removes, or transforms parameters of "
"another callable.  Usage is in the form ``Concatenate[Arg1Type, Arg2Type,"
" ..., ParamSpecVariable]``. ``Concatenate`` is currently only valid when "
"used as the first argument to a :data:`Callable`. The last parameter to "
"``Concatenate`` must be a :class:`ParamSpec` or ellipsis (``...``)."
msgstr ""
"与 :data:`Callable` 和 :class:`ParamSpec` "
"一起使用，对一个高阶可调用对象进行类型注释，该对象可以增加、删除或转换另一个可调用对象的参数。使用形式为 "
"``Concatenate[Arg1Type, Arg2Type, ..., "
"ParamSpecVariable]``。``Concatenate`` 目前只在作为 :data:`Callable` "
"的第一个参数时有效。``Concatenate`` 的最后一个参数必须是一个 :class:`ParamSpec`。"

#: ../../library/typing.rst:873
msgid ""
"For example, to annotate a decorator ``with_lock`` which provides a "
":class:`threading.Lock` to the decorated function,  ``Concatenate`` can "
"be used to indicate that ``with_lock`` expects a callable which takes in "
"a ``Lock`` as the first argument, and returns a callable with a different"
" type signature.  In this case, the :class:`ParamSpec` indicates that the"
" returned callable's parameter types are dependent on the parameter types"
" of the callable being passed in::"
msgstr ""
"例如，为了注释一个装饰器 ``with_lock``，它为被装饰的函数提供了 "
":class:`threading.Lock`，``Concatenate`` 可以用来表示 ``with_lock`` "
"期望一个可调用对象，该对象接收一个 ``Lock`` 作为第一个参数，并返回一个具有不同类型签名的可调用对象。 "
"在这种情况下，:class:`ParamSpec` 表示返回的可调用对象的参数类型取决于被传入的可调用程序的参数类型::"

#: ../../library/typing.rst:912 ../../library/typing.rst:1502
msgid ""
":pep:`612` -- Parameter Specification Variables (the PEP which introduced"
" ``ParamSpec`` and ``Concatenate``)."
msgstr ":pep:`612` -- 参数规范变量（引入 ``ParamSpec`` 和 ``Concatenate`` 的 PEP）。"

#: ../../library/typing.rst:914
msgid ":class:`ParamSpec` and :class:`Callable`."
msgstr ":class:`ParamSpec` 和 :class:`Callable`。"

#: ../../library/typing.rst:919
msgid ""
"A variable annotated with ``C`` may accept a value of type ``C``. In "
"contrast, a variable annotated with ``Type[C]`` may accept values that "
"are classes themselves -- specifically, it will accept the *class object*"
" of ``C``. For example::"
msgstr ""
"用 ``C`` 注解的变量可以接受类型 ``C`` 的值。反之，用 ``Type[C]`` 注解的变量可以接受类自身的值 — 准确地说，是接受 "
"``C`` 的 *类对象*，例如："

#: ../../library/typing.rst:928
msgid "Note that ``Type[C]`` is covariant::"
msgstr "注意，``Type[C]`` 为协变量："

#: ../../library/typing.rst:940
msgid ""
"The fact that ``Type[C]`` is covariant implies that all subclasses of "
"``C`` should implement the same constructor signature and class method "
"signatures as ``C``. The type checker should flag violations of this, but"
" should also allow constructor calls in subclasses that match the "
"constructor calls in the indicated base class. How the type checker is "
"required to handle this particular case may change in future revisions of"
" :pep:`484`."
msgstr ""
"``Type[C]`` 为协变量的意思是指， ``C`` 的所有子类都应使用与 ``C`` "
"相同的构造器签名及类方法签名。类型检查器应标记违反此项规定的内容，但也应允许符合指定基类构造器调用的子类进行构造器调用。:pep:`484`  "
"修订版将来可能会调整类型检查器对这种特例的处理方式。"

#: ../../library/typing.rst:948
msgid ""
"The only legal parameters for :class:`Type` are classes, :data:`Any`, "
":ref:`type variables <generics>`, and unions of any of these types. For "
"example::"
msgstr " :class:`Type` 合法的参数仅有类、:data:`Any` 、:ref:`类型变量<generics>` 以及上述类型的联合类型。例如："

#: ../../library/typing.rst:954
msgid ""
"``Type[Any]`` is equivalent to ``Type`` which in turn is equivalent to "
"``type``, which is the root of Python's metaclass hierarchy."
msgstr " ``Type[Any]`` 等价于 ``Type``，进而等价于 Python 元类架构的根基，``type``。"

#: ../../library/typing.rst:959
msgid ""
":class:`builtins.type <type>` now supports ``[]``. See :pep:`585` and "
":ref:`types-genericalias`."
msgstr ""
":class:`builtins.type <type>` 现已支持 ``[]``。详见 :pep:`585` 与 :ref:`types-"
"genericalias`。"

#: ../../library/typing.rst:965
msgid ""
"A type that can be used to indicate to type checkers that the "
"corresponding variable or function parameter has a value equivalent to "
"the provided literal (or one of several literals). For example::"
msgstr "表示类型检查器对应变量或函数参数的值等价于给定字面量（或多个字面量之一）的类型。例如："

#: ../../library/typing.rst:979
msgid ""
"``Literal[...]`` cannot be subclassed. At runtime, an arbitrary value is "
"allowed as type argument to ``Literal[...]``, but type checkers may "
"impose restrictions. See :pep:`586` for more details about literal types."
msgstr ""
"``Literal[...]`` 不能创建子类。在运行时，任意值均可作为 ``Literal[...]`` "
"的类型参数，但类型检查器可以对此加以限制。字面量类型详见 :pep:`586` 。"

#: ../../library/typing.rst:985
msgid ""
"``Literal`` now de-duplicates parameters.  Equality comparisons of "
"``Literal`` objects are no longer order dependent. ``Literal`` objects "
"will now raise a :exc:`TypeError` exception during equality comparisons "
"if one of their parameters are not :term:`hashable`."
msgstr ""
"``Literal`` 现在能去除形参的重复。 ``Literal`` 对象的相等性比较不再依赖顺序。 现在如果有某个参数不为 "
":term:`hashable`，``Literal`` 对象在相等性比较期间将引发 :exc:`TypeError`。"

#: ../../library/typing.rst:993
msgid "Special type construct to mark class variables."
msgstr "标记类变量的特殊类型构造器。"

#: ../../library/typing.rst:995
msgid ""
"As introduced in :pep:`526`, a variable annotation wrapped in ClassVar "
"indicates that a given attribute is intended to be used as a class "
"variable and should not be set on instances of that class. Usage::"
msgstr "如 :pep:`526` 所述，打包在 ClassVar 内的变量注解是指，给定属性应当用作类变量，而不应设置在类实例上。用法如下："

#: ../../library/typing.rst:1003
msgid ":data:`ClassVar` accepts only types and cannot be further subscribed."
msgstr ":data:`ClassVar` 仅接受类型，也不能使用下标。"

#: ../../library/typing.rst:1005
msgid ""
":data:`ClassVar` is not a class itself, and should not be used with "
":func:`isinstance` or :func:`issubclass`. :data:`ClassVar` does not "
"change Python runtime behavior, but it can be used by third-party type "
"checkers. For example, a type checker might flag the following code as an"
" error::"
msgstr ""
":data:`ClassVar` 本身不是类，不应用于 :func:`isinstance` 或 "
":func:`issubclass`。:data:`ClassVar` 不改变 Python "
"运行时行为，但可以用于第三方类型检查器。例如，类型检查器会认为以下代码有错："

#: ../../library/typing.rst:1019
msgid ""
"A special typing construct to indicate to type checkers that a name "
"cannot be re-assigned or overridden in a subclass. For example::"
msgstr "告知类型检查器某名称不能再次赋值或在子类中重写的特殊类型构造器。例如："

#: ../../library/typing.rst:1031 ../../library/typing.rst:2686
msgid ""
"There is no runtime checking of these properties. See :pep:`591` for more"
" details."
msgstr "这些属性没有运行时检查。详见 :pep:`591`。"

#: ../../library/typing.rst:1040
msgid ""
"Special typing constructs that mark individual keys of a "
":class:`TypedDict` as either required or non-required respectively."
msgstr ""

#: ../../library/typing.rst:1043
msgid ""
"For more information, see :class:`TypedDict` and :pep:`655` (\"Marking "
"individual TypedDict items as required or potentially missing\")."
msgstr ""

#: ../../library/typing.rst:1050
#, fuzzy
msgid ""
"A type, introduced in :pep:`593` (``Flexible function and variable "
"annotations``), to decorate existing types with context-specific metadata"
" (possibly multiple pieces of it, as ``Annotated`` is variadic). "
"Specifically, a type ``T`` can be annotated with metadata ``x`` via the "
"typehint ``Annotated[T, x]``. This metadata can be used for either static"
" analysis or at runtime. If a library (or tool) encounters a typehint "
"``Annotated[T, x]`` and has no special logic for metadata ``x``, it "
"should ignore it and simply treat the type as ``T``. Unlike the "
"``no_type_check`` functionality that currently exists in the ``typing`` "
"module which completely disables typechecking annotations on a function "
"or a class, the ``Annotated`` type allows for both static typechecking of"
" ``T`` (which can safely ignore ``x``) together with runtime access to "
"``x`` within a specific application."
msgstr ""
":pep:`593` （``灵活函数和变量注解``）里引入的类型，可以用上下文特定元数据（``Annotated`` "
"的参数可变，也可能用它的多个组成部分）装饰现有的类型。具体来说，就是类型提示 ``Annotated[T, x]`` 用元数据 ``x`` "
"注解类型 ``T``。静态分析或运行时都能使用该元数据。库（或工具）处理类型提示 ``Annotated[T, x]`` 时，在元数据 ``x``"
" 不涉及特殊逻辑的情况下，可忽略该类型提示，仅把它当作类型 ``T``。与 ``typing`` 模块中现有的 ``no_type_check``"
" 功能不同，该功能完全禁用了函数或类的类型检查注解，而 ``Annotated`` 类型则允许对 ``T`` 进行静态类型检查（例如，通过 "
"mypy 或 Pyre，可安全地忽略 ``x``），也可以在特定应用程序中实现 ``x`` 的运行时访问。"

#: ../../library/typing.rst:1064
msgid ""
"Ultimately, the responsibility of how to interpret the annotations (if at"
" all) is the responsibility of the tool or library encountering the "
"``Annotated`` type. A tool or library encountering an ``Annotated`` type "
"can scan through the annotations to determine if they are of interest "
"(e.g., using ``isinstance()``)."
msgstr ""
"毕竟，如何解释注解（如有）由处理 ``Annotated`` 类型的工具/库负责。工具/库处理 ``Annotated`` "
"类型时，扫描所有注解以确定是否需要进行处理（例如，使用 ``isinstance()``）。"

#: ../../library/typing.rst:1070
msgid ""
"When a tool or a library does not support annotations or encounters an "
"unknown annotation it should just ignore it and treat annotated type as "
"the underlying type."
msgstr "工具/库不支持注解，或遇到未知注解时，应忽略注解，并把注解类型当作底层类型。"

#: ../../library/typing.rst:1074
msgid ""
"It's up to the tool consuming the annotations to decide whether the "
"client is allowed to have several annotations on one type and how to "
"merge those annotations."
msgstr "是否允许客户端在一个类型上使用多个注解，以及如何合并这些注解，由处理注解的工具决定。"

#: ../../library/typing.rst:1078
msgid ""
"Since the ``Annotated`` type allows you to put several annotations of the"
" same (or different) type(s) on any node, the tools or libraries "
"consuming those annotations are in charge of dealing with potential "
"duplicates. For example, if you are doing value range analysis you might "
"allow this::"
msgstr ""
"``Annotated`` "
"类型支持把多个相同（或不同）的单个（或多个）类型注解置于任意节点。因此，使用这些注解的工具/库要负责处理潜在的重复项。例如，执行值范围分析时，应允许以下操作："

#: ../../library/typing.rst:1087
msgid ""
"Passing ``include_extras=True`` to :func:`get_type_hints` lets one access"
" the extra annotations at runtime."
msgstr "传递 ``include_extras=True`` 至 :func:`get_type_hints` ，即可在运行时访问额外的注解。"

#: ../../library/typing.rst:1090
msgid "The details of the syntax:"
msgstr "语义详情："

#: ../../library/typing.rst:1092
msgid "The first argument to ``Annotated`` must be a valid type"
msgstr "``Annotated`` 的第一个参数必须是有效类型。"

#: ../../library/typing.rst:1094
msgid ""
"Multiple type annotations are supported (``Annotated`` supports variadic "
"arguments)::"
msgstr "支持多个类型标注（``Annotated`` 支持可变参数）："

#: ../../library/typing.rst:1099
msgid ""
"``Annotated`` must be called with at least two arguments ( "
"``Annotated[int]`` is not valid)"
msgstr "调用 ``Annotated`` 至少要有两个参数（``Annotated[int]`` 是无效的）"

#: ../../library/typing.rst:1102
msgid ""
"The order of the annotations is preserved and matters for equality "
"checks::"
msgstr "注解的顺序会被保留，且影响等价检查："

#: ../../library/typing.rst:1109
msgid ""
"Nested ``Annotated`` types are flattened, with metadata ordered starting "
"with the innermost annotation::"
msgstr "嵌套 ``Annotated`` 类型会被展平，元数据从最内层注解依序展开："

#: ../../library/typing.rst:1116
msgid "Duplicated annotations are not removed::"
msgstr "不移除注解重复项："

#: ../../library/typing.rst:1122
msgid "``Annotated`` can be used with nested and generic aliases::"
msgstr "``Annotated`` 可用于嵌套或泛型别名："

#: ../../library/typing.rst:1135
msgid ""
"Special typing form used to annotate the return type of a user-defined "
"type guard function.  ``TypeGuard`` only accepts a single type argument. "
"At runtime, functions marked this way should return a boolean."
msgstr ""
"用于注释用户定义的类型保护函数的返回类型的特殊类型化形式。 ``TypeGuard`` 只接受一个单一的类型参数。 "
"在运行时，以这种方式标记的函数应该返回一个布尔值。"

#: ../../library/typing.rst:1139
msgid ""
"``TypeGuard`` aims to benefit *type narrowing* -- a technique used by "
"static type checkers to determine a more precise type of an expression "
"within a program's code flow.  Usually type narrowing is done by "
"analyzing conditional code flow and applying the narrowing to a block of "
"code.  The conditional expression here is sometimes referred to as a "
"\"type guard\"::"
msgstr ""
"``TypeGuard`` 旨在使 *type narrowing* "
"受益——这是静态类型检查器用来确定程序代码流中表达式的更精确类型的一种技术。通常，类型窄化是通过分析条件性代码流并将窄化的结果应用于一个代码块来完成的。"
" 这里的条件表达式有时被称为 \"类型保护\"::"

#: ../../library/typing.rst:1154
msgid ""
"Sometimes it would be convenient to use a user-defined boolean function "
"as a type guard.  Such a function should use ``TypeGuard[...]`` as its "
"return type to alert static type checkers to this intention."
msgstr ""
"有时，使用一个用户定义的布尔函数作为类型保护会很方便。这样的函数应该使用 ``TypeGuard[...]`` "
"作为其返回类型，以提醒静态类型检查器注意这一意图。"

#: ../../library/typing.rst:1158
msgid ""
"Using  ``-> TypeGuard`` tells the static type checker that for a given "
"function:"
msgstr "对于一个给定的函数，使用 ``-> TypeGuard`` 告诉静态类型检查器："

#: ../../library/typing.rst:1161
msgid "The return value is a boolean."
msgstr "返回值是一个布尔值。"

#: ../../library/typing.rst:1162
msgid ""
"If the return value is ``True``, the type of its argument is the type "
"inside ``TypeGuard``."
msgstr "如果返回值是 ``True``，其参数的类型是 ``TypeGuard`` 里面的类型。"

#: ../../library/typing.rst:1179
msgid ""
"If ``is_str_list`` is a class or instance method, then the type in "
"``TypeGuard`` maps to the type of the second parameter after ``cls`` or "
"``self``."
msgstr ""
"如果 ``is_str_list`` 是一个类或实例方法，那么 ``TypeGuard`` 中的类型映射到 ``cls`` 或 ``self`` "
"之后的第二个参数的类型。"

#: ../../library/typing.rst:1183
msgid ""
"In short, the form ``def foo(arg: TypeA) -> TypeGuard[TypeB]: ...``, "
"means that if ``foo(arg)`` returns ``True``, then ``arg`` narrows from "
"``TypeA`` to ``TypeB``."
msgstr ""
"简而言之，``def foo(arg: TypeA) -> TypeGuard[TypeB]: ...`` 形式的意思是：如果 "
"``foo(arg)`` 返回 ``True``，那么 ``arg`` 将把 ``TypeA`` 窄化为 ``TypeB``。"

#: ../../library/typing.rst:1189
msgid ""
"``TypeB`` need not be a narrower form of ``TypeA`` -- it can even be a "
"wider form. The main reason is to allow for things like narrowing "
"``list[object]`` to ``list[str]`` even though the latter is not a subtype"
" of the former, since ``list`` is invariant. The responsibility of "
"writing type-safe type guards is left to the user."
msgstr ""
"``TypeB`` 不必是 ``TypeA`` 的窄化形式，它甚至可以是扩大形式。主要原因是允许像把 ``List[object]`` 窄化到 "
"``List[str]`` 这样的事情，即使后者不是前者的一个子类型，因为 ``List`` 是不变量。编写类型安全的类型防护的责任留给了用户。"

#: ../../library/typing.rst:1195
msgid ""
"``TypeGuard`` also works with type variables.  For more information, see "
":pep:`647` (User-Defined Type Guards)."
msgstr " ``TypeGuard`` 也适用于类型变量。更多信息，请参见 :pep:`647` (用户定义的类型保护)。"

#: ../../library/typing.rst:1202
msgid "Building generic types"
msgstr "构建泛型类型"

#: ../../library/typing.rst:1204
msgid ""
"These are not used in annotations. They are building blocks for creating "
"generic types."
msgstr "以下内容是创建泛型类型的基石，但不在注解内使用。"

#: ../../library/typing.rst:1208
msgid "Abstract base class for generic types."
msgstr "用于泛型类型的抽象基类。"

#: ../../library/typing.rst:1210
msgid ""
"A generic type is typically declared by inheriting from an instantiation "
"of this class with one or more type variables. For example, a generic "
"mapping type might be defined as::"
msgstr "泛型类型一般通过继承含一个或多个类型变量的类实例进行声明。例如，泛型映射类型定义如下："

#: ../../library/typing.rst:1219
msgid "This class can then be used as follows::"
msgstr "该类的用法如下："

#: ../../library/typing.rst:1232
msgid "Type variable."
msgstr "类型变量。"

#: ../../library/typing.rst:1234 ../../library/typing.rst:1431
#: ../../library/typing.rst:1608
msgid "Usage::"
msgstr "用法："

#: ../../library/typing.rst:1240
msgid ""
"Type variables exist primarily for the benefit of static type checkers.  "
"They serve as the parameters for generic types as well as for generic "
"function definitions.  See :class:`Generic` for more information on "
"generic types.  Generic functions work as follows::"
msgstr "类型变量主要是为静态类型检查器提供支持，用于泛型类型与泛型函数定义的参数。有关泛型类型，详见 :class:`Generic`。泛型函数的写法如下："

#: ../../library/typing.rst:1260
msgid ""
"Note that type variables can be *bound*, *constrained*, or neither, but "
"cannot be both bound *and* constrained."
msgstr ""

#: ../../library/typing.rst:1263
msgid ""
"Bound type variables and constrained type variables have different "
"semantics in several important ways. Using a *bound* type variable means "
"that the ``TypeVar`` will be solved using the most specific type "
"possible::"
msgstr ""

#: ../../library/typing.rst:1278
msgid ""
"Type variables can be bound to concrete types, abstract types (ABCs or "
"protocols), and even unions of types::"
msgstr ""

#: ../../library/typing.rst:1284
msgid ""
"Using a *constrained* type variable, however, means that the ``TypeVar`` "
"can only ever be solved as being exactly one of the constraints given::"
msgstr ""

#: ../../library/typing.rst:1295
msgid ""
"At runtime, ``isinstance(x, T)`` will raise :exc:`TypeError`.  In "
"general, :func:`isinstance` and :func:`issubclass` should not be used "
"with types."
msgstr ""
"在运行时，``isinstance(x, T)`` 会触发 :exc:`TypeError` 异常。一般而言，:func:`isinstance`"
" 和 :func:`issubclass` 不应与类型搭配使用。"

#: ../../library/typing.rst:1298
#, fuzzy
msgid ""
"Type variables may be marked covariant or contravariant by passing "
"``covariant=True`` or ``contravariant=True``.  See :pep:`484` for more "
"details.  By default, type variables are invariant."
msgstr ""
"通过 ``covariant=True`` 或 ``contravariant=True`` 可以把类型变量标记为协变量或逆变量。详见 "
":pep:`484`。默认情况下，类型变量是不变量。类型变量还可以用 ``bound=<type>`` "
"指定上限。这里的意思是，（显式或隐式地）取代类型变量的实际类型必须是限定类型的子类，详见 :pep:`484`。"

#: ../../library/typing.rst:1304
#, fuzzy
msgid ""
"Type variable tuple. A specialized form of :class:`type variable "
"<TypeVar>` that enables *variadic* generics."
msgstr "参数规范变量。 :class:`类型变量 <TypeVar>` 的一个专门版本。"

#: ../../library/typing.rst:1307
msgid ""
"A normal type variable enables parameterization with a single type. A "
"type variable tuple, in contrast, allows parameterization with an "
"*arbitrary* number of types by acting like an *arbitrary* number of type "
"variables wrapped in a tuple. For example::"
msgstr ""

#: ../../library/typing.rst:1335
msgid ""
"Note the use of the unpacking operator ``*`` in ``tuple[T, *Ts]``. "
"Conceptually, you can think of ``Ts`` as a tuple of type variables ``(T1,"
" T2, ...)``. ``tuple[T, *Ts]`` would then become ``tuple[T, *(T1, T2, "
"...)]``, which is equivalent to ``tuple[T, T1, T2, ...]``. (Note that in "
"older versions of Python, you might see this written using :data:`Unpack "
"<Unpack>` instead, as ``Unpack[Ts]``.)"
msgstr ""

#: ../../library/typing.rst:1343
msgid ""
"Type variable tuples must *always* be unpacked. This helps distinguish "
"type variable types from normal type variables::"
msgstr ""

#: ../../library/typing.rst:1350
msgid ""
"Type variable tuples can be used in the same contexts as normal type "
"variables. For example, in class definitions, arguments, and return "
"types::"
msgstr ""

#: ../../library/typing.rst:1359
msgid "Type variable tuples can be happily combined with normal type variables::"
msgstr ""

#: ../../library/typing.rst:1372
msgid ""
"However, note that at most one type variable tuple may appear in a single"
" list of type arguments or type parameters::"
msgstr ""

#: ../../library/typing.rst:1379
msgid ""
"Finally, an unpacked type variable tuple can be used as the type "
"annotation of ``*args``::"
msgstr ""

#: ../../library/typing.rst:1389
msgid ""
"In contrast to non-unpacked annotations of ``*args`` - e.g. ``*args: "
"int``, which would specify that *all* arguments are ``int`` - ``*args: "
"*Ts`` enables reference to the types of the *individual* arguments in "
"``*args``. Here, this allows us to ensure the types of the ``*args`` "
"passed to ``call_soon`` match the types of the (positional) arguments of "
"``callback``."
msgstr ""

#: ../../library/typing.rst:1396
msgid "For more details on type variable tuples, see :pep:`646`."
msgstr ""

#: ../../library/typing.rst:1402
msgid ""
"A typing operator that conceptually marks an object as having been "
"unpacked. For example, using the unpack operator ``*`` on a :class:`type "
"variable tuple <TypeVarTuple>` is equivalent to using ``Unpack`` to mark "
"the type variable tuple as having been unpacked::"
msgstr ""

#: ../../library/typing.rst:1412
msgid ""
"In fact, ``Unpack`` can be used interchangeably with ``*`` in the context"
" of types. You might see ``Unpack`` being used explicitly in older "
"versions of Python, where ``*`` couldn't be used in certain places::"
msgstr ""

#: ../../library/typing.rst:1428
msgid ""
"Parameter specification variable.  A specialized version of :class:`type "
"variables <TypeVar>`."
msgstr "参数规范变量。 :class:`类型变量 <TypeVar>` 的一个专门版本。"

#: ../../library/typing.rst:1435
msgid ""
"Parameter specification variables exist primarily for the benefit of "
"static type checkers.  They are used to forward the parameter types of "
"one callable to another callable -- a pattern commonly found in higher "
"order functions and decorators.  They are only valid when used in "
"``Concatenate``, or as the first argument to ``Callable``, or as "
"parameters for user-defined Generics.  See :class:`Generic` for more "
"information on generic types."
msgstr ""
"参数规范变量的存在主要是为了使静态类型检查器受益。 "
"它们被用来将一个可调用对象的参数类型转发给另一个可调用对象的参数类型——这种模式通常出现在高阶函数和装饰器中。 它们只有在 "
"``Concatenate`` 中使用时才有效，或者作为 ``Callable`` 的第一个参数，或者作为用户定义的泛型的参数。 参见 "
":class:`Generic` 以了解更多关于泛型的信息。"

#: ../../library/typing.rst:1442
msgid ""
"For example, to add basic logging to a function, one can create a "
"decorator ``add_logging`` to log function calls.  The parameter "
"specification variable tells the type checker that the callable passed "
"into the decorator and the new callable returned by it have inter-"
"dependent type parameters::"
msgstr ""
"例如，为了给一个函数添加基本的日志记录，我们可以创建一个装饰器 ``add_logging`` 来记录函数调用。 "
"参数规范变量告诉类型检查器，传入装饰器的可调用对象和由其返回的新可调用对象有相互依赖的类型参数::"

#: ../../library/typing.rst:1466
msgid ""
"Without ``ParamSpec``, the simplest way to annotate this previously was "
"to use a :class:`TypeVar` with bound ``Callable[..., Any]``.  However "
"this causes two problems:"
msgstr ""
"如果没有 ``ParamSpec``，以前注释这个的最简单的方法是使用一个 :class:`TypeVar` 与绑定 "
"``Callable[..., Any]``。"

#: ../../library/typing.rst:1470
msgid ""
"The type checker can't type check the ``inner`` function because "
"``*args`` and ``**kwargs`` have to be typed :data:`Any`."
msgstr ""
"类型检查器不能对 ``inner`` 函数进行类型检查，因为 ``*args`` 和 ``**kwargs`` 的类型必须是 "
":data:`Any`。"

#: ../../library/typing.rst:1472
msgid ""
":func:`~cast` may be required in the body of the ``add_logging`` "
"decorator when returning the ``inner`` function, or the static type "
"checker must be told to ignore the ``return inner``."
msgstr ""
":func:`~cast` 在返回 ``inner`` 函数时，可能需要在 ``add_logging`` "
"装饰器的主体中进行，或者必须告诉静态类型检查器忽略 ``return inner``。"

#: ../../library/typing.rst:1479
msgid ""
"Since ``ParamSpec`` captures both positional and keyword parameters, "
"``P.args`` and ``P.kwargs`` can be used to split a ``ParamSpec`` into its"
" components.  ``P.args`` represents the tuple of positional parameters in"
" a given call and should only be used to annotate ``*args``.  "
"``P.kwargs`` represents the mapping of keyword parameters to their values"
" in a given call, and should be only be used to annotate ``**kwargs``.  "
"Both attributes require the annotated parameter to be in scope. At "
"runtime, ``P.args`` and ``P.kwargs`` are instances respectively of "
":class:`ParamSpecArgs` and :class:`ParamSpecKwargs`."
msgstr ""
"由于 ``ParamSpec`` 同时捕获了位置参数和关键字参数，``P.args`` 和 ``P.kwargs`` 可以用来将 "
"``ParamSpec`` 分割成其组成部分。 ``P.args`` 代表给定调用中的位置参数的元组，只能用于注释 ``*args``。 "
"``P.kwargs`` 代表给定调用中的关键字参数到其值的映射，只能用于注释 ``**kwargs``。在运行时，``P.args`` 和 "
"``P.kwargs`` 分别是 :class:`ParamSpecArgs` 和 :class:`ParamSpecKwargs` 的实例。"

#: ../../library/typing.rst:1489
msgid ""
"Parameter specification variables created with ``covariant=True`` or "
"``contravariant=True`` can be used to declare covariant or contravariant "
"generic types.  The ``bound`` argument is also accepted, similar to "
":class:`TypeVar`.  However the actual semantics of these keywords are yet"
" to be decided."
msgstr ""
"用 ``covariant=True`` 或 ``contravariant=True`` 创建的参数规范变量可以用来声明协变或禁变的通用类型。 "
"参数 ``bound`` 也被接受，类似于 :class:`TypeVar`。 然而这些关键字的实际语义还有待决定。"

#: ../../library/typing.rst:1498
msgid ""
"Only parameter specification variables defined in global scope can be "
"pickled."
msgstr "只有在全局范围内定义的参数规范变量可以被 pickle。"

#: ../../library/typing.rst:1504
msgid ":class:`Callable` and :class:`Concatenate`."
msgstr ":class:`Callable` 和 :class:`Concatenate`。"

#: ../../library/typing.rst:1509
msgid ""
"Arguments and keyword arguments attributes of a :class:`ParamSpec`. The "
"``P.args`` attribute of a ``ParamSpec`` is an instance of "
"``ParamSpecArgs``, and ``P.kwargs`` is an instance of "
"``ParamSpecKwargs``. They are intended for runtime introspection and have"
" no special meaning to static type checkers."
msgstr ""
":class:`ParamSpec` 的参数和关键字参数属性。``ParamSpec`` 的 ``P.args`` 属性是 "
"``ParamSpecArgs`` 的一个实例，``P.kwargs`` 是 ``ParamSpecKwargs`` 的一个实例。 "
"它们的目的是用于运行时内部检查的，对静态类型检查器没有特殊意义。"

#: ../../library/typing.rst:1514
msgid ""
"Calling :func:`get_origin` on either of these objects will return the "
"original ``ParamSpec``::"
msgstr "在这些对象中的任何一个上调用 :func:`get_origin`，都会返回原始的 ``ParamSpec``::"

#: ../../library/typing.rst:1526
#, fuzzy
msgid ""
"``AnyStr`` is a :class:`constrained type variable <TypeVar>` defined as "
"``AnyStr = TypeVar('AnyStr', str, bytes)``."
msgstr "``AnyStr`` 类型变量的定义为 ``AnyStr = TypeVar('AnyStr', str, bytes)``。"

#: ../../library/typing.rst:1529
msgid ""
"It is meant to be used for functions that may accept any kind of string "
"without allowing different kinds of strings to mix. For example::"
msgstr "这里指的是，它可以接受任意同类字符串，但不支持混用不同类别的字符串。例如："

#: ../../library/typing.rst:1541
msgid "Base class for protocol classes. Protocol classes are defined like this::"
msgstr "Protocol 类的基类。Protocol 类的定义如下："

#: ../../library/typing.rst:1547
msgid ""
"Such classes are primarily used with static type checkers that recognize "
"structural subtyping (static duck-typing), for example::"
msgstr "这些类主要与静态类型检查器搭配使用，用来识别结构子类型（静态鸭子类型），例如："

#: ../../library/typing.rst:1559
msgid ""
"See :pep:`544` for details. Protocol classes decorated with "
":func:`runtime_checkable` (described later) act as simple-minded runtime "
"protocols that check only the presence of given attributes, ignoring "
"their type signatures."
msgstr ""
"详见 :pep:`544`。Protocol 类用 :func:`runtime_checkable` "
"（见下文）装饰，忽略类型签名，仅检查给定属性是否存在，充当简要的运行时协议。"

#: ../../library/typing.rst:1564
msgid "Protocol classes can be generic, for example::"
msgstr "Protocol 类可以是泛型，例如："

#: ../../library/typing.rst:1574
msgid "Mark a protocol class as a runtime protocol."
msgstr "用于把 Protocol 类标记为运行时协议。"

#: ../../library/typing.rst:1576
msgid ""
"Such a protocol can be used with :func:`isinstance` and "
":func:`issubclass`. This raises :exc:`TypeError` when applied to a non-"
"protocol class.  This allows a simple-minded structural check, very "
"similar to \"one trick ponies\" in :mod:`collections.abc` such as "
":class:`~collections.abc.Iterable`.  For example::"
msgstr ""
"该协议可以与 :func:`isinstance` 和 :func:`issubclass` 一起使用。应用于非协议的类时，会触发 "
":exc:`TypeError`。该指令支持简易结构检查，与 :mod:`collections.abc` 的 "
":class:`~collections.abc.Iterable` 非常类似，只擅长做一件事。  例如："

#: ../../library/typing.rst:1589
msgid ""
":func:`runtime_checkable` will check only the presence of the required "
"methods, not their type signatures. For example, :class:`ssl.SSLObject` "
"is a class, therefore it passes an :func:`issubclass` check against "
":data:`Callable`.  However, the :meth:`ssl.SSLObject.__init__` method "
"exists only to raise a :exc:`TypeError` with a more informative message, "
"therefore making it impossible to call (instantiate) "
":class:`ssl.SSLObject`."
msgstr ""
":func:`runtime_checkable` 将只检查所需方法的存在，而不是其类型签名。 例如， "
":class:`ssl.SSLObject` 是一个类，因此它通过了 :func:`issubclass` 对 :data:`Callable` "
"的检查。 然而， :meth:`ssl.SSLObject.__init__` 方法的存在只是为了引发一个 :exc:`TypeError` "
"的更多信息，因此使它无法调用（实例化） :class:`ssl.SSLObject`。"

#: ../../library/typing.rst:1600
msgid "Other special directives"
msgstr "其他特殊指令"

#: ../../library/typing.rst:1602
msgid ""
"These are not used in annotations. They are building blocks for declaring"
" types."
msgstr "这些特殊指令是声明类型的基石，但不在注解内使用。"

#: ../../library/typing.rst:1606
msgid "Typed version of :func:`collections.namedtuple`."
msgstr ":func:`collections.namedtuple` 的类型版本。"

#: ../../library/typing.rst:1614
msgid "This is equivalent to::"
msgstr "这相当于："

#: ../../library/typing.rst:1618
msgid "To give a field a default value, you can assign to it in the class body::"
msgstr "为字段提供默认值，要在类体内赋值："

#: ../../library/typing.rst:1627
msgid "Fields with a default value must come after any fields without a default."
msgstr "带默认值的字段必须在不带默认值的字段后面。"

#: ../../library/typing.rst:1629
#, fuzzy
msgid ""
"The resulting class has an extra attribute ``__annotations__`` giving a "
"dict that maps the field names to the field types.  (The field names are "
"in the ``_fields`` attribute and the default values are in the "
"``_field_defaults`` attribute, both of which are part of the "
":func:`~collections.namedtuple` API.)"
msgstr ""
"生成的类具有 ``__annotations__`` 这个附加属性，提供了映射字段名与字段类型的字典。（字段名在 ``_fields`` "
"属性内，默认值在 ``_field_defaults`` 属性内，这两项都是命名元组 API 的组成部分。）"

#: ../../library/typing.rst:1635
msgid "``NamedTuple`` subclasses can also have docstrings and methods::"
msgstr "``NamedTuple`` 子类也支持文档字符串与方法："

#: ../../library/typing.rst:1645
#, fuzzy
msgid "``NamedTuple`` subclasses can be generic::"
msgstr "``NamedTuple`` 子类也支持文档字符串与方法："

#: ../../library/typing.rst:1651
msgid "Backward-compatible usage::"
msgstr "反向兼容用法："

#: ../../library/typing.rst:1655
msgid "Added support for :pep:`526` variable annotation syntax."
msgstr "添加了对 :pep:`526` 中变量注解句法的支持。"

#: ../../library/typing.rst:1658
msgid "Added support for default values, methods, and docstrings."
msgstr "添加了对默认值、方法、文档字符串的支持。"

#: ../../library/typing.rst:1661
msgid ""
"The ``_field_types`` and ``__annotations__`` attributes are now regular "
"dictionaries instead of instances of ``OrderedDict``."
msgstr "``_field_types`` 和 ``__annotations__`` 属性现已使用常规字典，不再使用 ``OrderedDict`` 实例。"

#: ../../library/typing.rst:1665
msgid ""
"Removed the ``_field_types`` attribute in favor of the more standard "
"``__annotations__`` attribute which has the same information."
msgstr "移除了 ``_field_types`` 属性， 改用具有相同信息，但更标准的  ``__annotations__`` 属性。"

#: ../../library/typing.rst:1669
msgid "Added support for generic namedtuples."
msgstr ""

#: ../../library/typing.rst:1674
msgid ""
"A helper class to indicate a distinct type to a typechecker, see "
":ref:`distinct`. At runtime it returns an object that returns its "
"argument when called. Usage::"
msgstr "一个辅助类，用于向类型检查器指示一个不同的类型，见 :ref:`distinct`。在运行时，它返回一个对象，在调用时返回其参数。用法::"

#: ../../library/typing.rst:1684
msgid "``NewType`` is now a class rather than a function."
msgstr "``NewType`` 现在是一个类而不是函数。"

#: ../../library/typing.rst:1689
msgid ""
"Special construct to add type hints to a dictionary. At runtime it is a "
"plain :class:`dict`."
msgstr "把类型提示添加至字典的特殊构造器。在运行时，它是纯 :class:`dict`。"

#: ../../library/typing.rst:1692
msgid ""
"``TypedDict`` declares a dictionary type that expects all of its "
"instances to have a certain set of keys, where each key is associated "
"with a value of a consistent type. This expectation is not checked at "
"runtime but is only enforced by type checkers. Usage::"
msgstr ""
"``TypedDict`` "
"声明一个字典类型，该类型预期所有实例都具有一组键集，其中，每个键都与对应类型的值关联。运行时不检查此预期，而是由类型检查器强制执行。用法如下："

#: ../../library/typing.rst:1708
#, fuzzy
msgid ""
"To allow using this feature with older versions of Python that do not "
"support :pep:`526`, ``TypedDict`` supports two additional equivalent "
"syntactic forms:"
msgstr ""
"用于自省的类型信息可以通过 ``Point2D.__annotations__``、``Point2D.__total__`` "
"、``Point2D.__required_keys__`` 和``Point2D.__optional_keys__`` 访问。为了允许在不支持"
" :pep:`526` 的旧版本的Python中使用这个特性，``TypedDict`` 支持另外两种等价的语法形式::"

#: ../../library/typing.rst:1712
msgid "Using a literal :class:`dict` as the second argument::"
msgstr ""

#: ../../library/typing.rst:1716
msgid "Using keyword arguments::"
msgstr ""

#: ../../library/typing.rst:1723
msgid ""
"The keyword-argument syntax is deprecated in 3.11 and will be removed in "
"3.13. It may also be unsupported by static type checkers."
msgstr ""

#: ../../library/typing.rst:1724
msgid ""
"The functional syntax should also be used when any of the keys are not "
"valid :ref:`identifiers <identifiers>`, for example because they are "
"keywords or contain hyphens. Example::"
msgstr ""

#: ../../library/typing.rst:1736
#, fuzzy
msgid ""
"By default, all keys must be present in a ``TypedDict``. It is possible "
"to mark individual keys as non-required using :data:`NotRequired`::"
msgstr "默认情况下，所有的键都必须出现在一个 ``TypedDict`` 中。 可以通过指定总数来重写这一点。用法::"

#: ../../library/typing.rst:1747
msgid ""
"This means that a ``Point2D`` ``TypedDict`` can have the ``label`` key "
"omitted."
msgstr ""

#: ../../library/typing.rst:1750
msgid ""
"It is also possible to mark all keys as non-required by default by "
"specifying a totality of ``False``::"
msgstr ""

#: ../../library/typing.rst:1760
msgid ""
"This means that a ``Point2D`` ``TypedDict`` can have any of the keys "
"omitted. A type checker is only expected to support a literal ``False`` "
"or ``True`` as the value of the ``total`` argument. ``True`` is the "
"default, and makes all items defined in the class body required."
msgstr ""
"这意味着一个 ``Point2D`` ``TypedDict`` 可以省略任何一个键。 类型检查器只需要支持一个字面的 ``False`` 或 "
"``True`` 作为 ``total`` 参数的值。 ``True`` 是默认的，它使类主体中定义的所有项目都是必需的。"

#: ../../library/typing.rst:1765
msgid ""
"Individual keys of a ``total=False`` ``TypedDict`` can be marked as "
"required using :data:`Required`::"
msgstr ""

#: ../../library/typing.rst:1780
msgid ""
"It is possible for a ``TypedDict`` type to inherit from one or more other"
" ``TypedDict`` types using the class-based syntax. Usage::"
msgstr ""

#: ../../library/typing.rst:1787
msgid ""
"``Point3D`` has three items: ``x``, ``y`` and ``z``. It is equivalent to "
"this definition::"
msgstr ""

#: ../../library/typing.rst:1795
msgid ""
"A ``TypedDict`` cannot inherit from a non-\\ ``TypedDict`` class, except "
"for :class:`Generic`. For example::"
msgstr ""

#: ../../library/typing.rst:1813
msgid "A ``TypedDict`` can be generic::"
msgstr ""

#: ../../library/typing.rst:1819
msgid ""
"A ``TypedDict`` can be introspected via annotations dicts (see :ref"
":`annotations-howto` for more information on annotations best practices),"
" :attr:`__total__`, :attr:`__required_keys__`, and "
":attr:`__optional_keys__`."
msgstr ""

#: ../../library/typing.rst:1825
msgid "``Point2D.__total__`` gives the value of the ``total`` argument. Example::"
msgstr ""

#: ../../library/typing.rst:1845
msgid ""
"``Point2D.__required_keys__`` and ``Point2D.__optional_keys__`` return "
":class:`frozenset` objects containing required and non-required keys, "
"respectively."
msgstr ""

#: ../../library/typing.rst:1848
msgid ""
"Keys marked with :data:`Required` will always appear in "
"``__required_keys__`` and keys marked with :data:`NotRequired` will "
"always appear in ``__optional_keys__``."
msgstr ""

#: ../../library/typing.rst:1851
msgid ""
"For backwards compatibility with Python 3.10 and below, it is also "
"possible to use inheritance to declare both required and non-required "
"keys in the same ``TypedDict`` . This is done by declaring a "
"``TypedDict`` with one value for the ``total`` argument and then "
"inheriting from it in another ``TypedDict`` with a different value for "
"``total``::"
msgstr ""

#: ../../library/typing.rst:1872
msgid ""
"See :pep:`589` for more examples and detailed rules of using "
"``TypedDict``."
msgstr "更多示例与 ``TypedDict`` 的详细规则，详见 :pep:`589`。"

#: ../../library/typing.rst:1876
msgid ""
"Added support for marking individual keys as :data:`Required` or "
":data:`NotRequired`. See :pep:`655`."
msgstr ""

#: ../../library/typing.rst:1880
msgid "Added support for generic ``TypedDict``\\ s."
msgstr ""

#: ../../library/typing.rst:1884
msgid "Generic concrete collections"
msgstr "泛型具象容器"

#: ../../library/typing.rst:1887
msgid "Corresponding to built-in types"
msgstr "对应的内置类型"

#: ../../library/typing.rst:1891
msgid ""
"A generic version of :class:`dict`. Useful for annotating return types. "
"To annotate arguments it is preferred to use an abstract collection type "
"such as :class:`Mapping`."
msgstr ":class:`dict` 的泛型版本。适用于注解返回类型。注解参数时，最好使用 :class:`Mapping` 等抽象容器类型。"

#: ../../library/typing.rst:1895
msgid "This type can be used as follows::"
msgstr "该类型用法如下："

#: ../../library/typing.rst:1900
msgid ""
":class:`builtins.dict <dict>` now supports ``[]``. See :pep:`585` and "
":ref:`types-genericalias`."
msgstr ""
":class:`builtins.dict <dict>` 现已支持 ``[]``。详见 :pep:`585` 和 :ref:`types-"
"genericalias`。"

#: ../../library/typing.rst:1906
msgid ""
"Generic version of :class:`list`. Useful for annotating return types. To "
"annotate arguments it is preferred to use an abstract collection type "
"such as :class:`Sequence` or :class:`Iterable`."
msgstr ""
":class:`list` 的泛型版本。适用于注解返回类型。注解参数时，最好使用 :class:`Sequence` 或 "
":class:`Iterable` 等抽象容器类型。"

#: ../../library/typing.rst:1911
msgid "This type may be used as follows::"
msgstr "该类型用法如下："

#: ../../library/typing.rst:1921
msgid ""
":class:`builtins.list <list>` now supports ``[]``. See :pep:`585` and "
":ref:`types-genericalias`."
msgstr ""
":class:`builtins.list <list>` 现已支持 ``[]``。详见 :pep:`585` 与 :ref:`types-"
"genericalias`。"

#: ../../library/typing.rst:1927
msgid ""
"A generic version of :class:`builtins.set <set>`. Useful for annotating "
"return types. To annotate arguments it is preferred to use an abstract "
"collection type such as :class:`AbstractSet`."
msgstr ""
":class:`builtins.set <set>` 的泛型版本。适用于注解返回类型。注解参数时，最好使用 "
":class:`AbstractSet` 等抽象容器类型。"

#: ../../library/typing.rst:1931
msgid ""
":class:`builtins.set <set>` now supports ``[]``. See :pep:`585` and :ref"
":`types-genericalias`."
msgstr ""
":class:`builtins.set <set>` 现已支持 ``[]``。详见 :pep:`585` 和 :ref:`types-"
"genericalias`。"

#: ../../library/typing.rst:1937
msgid "A generic version of :class:`builtins.frozenset <frozenset>`."
msgstr ":class:`builtins.frozenset <frozenset>` 的泛型版本。"

#: ../../library/typing.rst:1939
msgid ""
":class:`builtins.frozenset <frozenset>` now supports ``[]``. See "
":pep:`585` and :ref:`types-genericalias`."
msgstr ""
":class:`builtins.frozenset <frozenset>` 现已支持 ``[]``。详见 :pep:`585` 和 :ref"
":`types-genericalias`。"

#: ../../library/typing.rst:1943
msgid ":data:`Tuple` is a special form."
msgstr ":data:`Tuple` 是一种特殊形式。"

#: ../../library/typing.rst:1946
msgid "Corresponding to types in :mod:`collections`"
msgstr ":mod:`collections` 对应类型"

#: ../../library/typing.rst:1950
msgid "A generic version of :class:`collections.defaultdict`."
msgstr ":class:`collections.defaultdict` 的泛型版本。"

#: ../../library/typing.rst:1954
msgid ""
":class:`collections.defaultdict` now supports ``[]``. See :pep:`585` and "
":ref:`types-genericalias`."
msgstr ""
":class:`collections.defaultdict` 现已支持 ``[]``。详见 :pep:`585` 与 :ref:`types-"
"genericalias`。"

#: ../../library/typing.rst:1960
msgid "A generic version of :class:`collections.OrderedDict`."
msgstr ":class:`collections.OrderedDict` 的泛型版本。"

#: ../../library/typing.rst:1964
msgid ""
":class:`collections.OrderedDict` now supports ``[]``. See :pep:`585` and "
":ref:`types-genericalias`."
msgstr ""
":class:`collections.OrderedDict` 现已支持 ``[]``。详见 :pep:`585` 与 :ref:`types-"
"genericalias`。"

#: ../../library/typing.rst:1970
msgid "A generic version of :class:`collections.ChainMap`."
msgstr ":class:`collections.ChainMap` 的泛型版本。"

#: ../../library/typing.rst:1975
msgid ""
":class:`collections.ChainMap` now supports ``[]``. See :pep:`585` and "
":ref:`types-genericalias`."
msgstr ""
":class:`collections.ChainMap` 现已支持 ``[]``。详见 :pep:`585` 和 :ref:`types-"
"genericalias`。"

#: ../../library/typing.rst:1981
msgid "A generic version of :class:`collections.Counter`."
msgstr ":class:`collections.Counter` 的泛型版本。"

#: ../../library/typing.rst:1986
msgid ""
":class:`collections.Counter` now supports ``[]``. See :pep:`585` and :ref"
":`types-genericalias`."
msgstr ""
":class:`collections.Counter` 现已支持 ``[]``。详见 :pep:`585` 和 :ref:`types-"
"genericalias`。"

#: ../../library/typing.rst:1992
msgid "A generic version of :class:`collections.deque`."
msgstr ":class:`collections.deque` 的泛型版本。"

#: ../../library/typing.rst:1997
msgid ""
":class:`collections.deque` now supports ``[]``. See :pep:`585` and :ref"
":`types-genericalias`."
msgstr ""
":class:`collections.deque` 现已支持 ``[]``。详见 :pep:`585` 和 :ref:`types-"
"genericalias`。"

#: ../../library/typing.rst:2002
msgid "Other concrete types"
msgstr "其他具象类型"

#: ../../library/typing.rst:2008
msgid ""
"Generic type ``IO[AnyStr]`` and its subclasses ``TextIO(IO[str])`` and "
"``BinaryIO(IO[bytes])`` represent the types of I/O streams such as "
"returned by :func:`open`."
msgstr ""
"泛型类型 ``IO[AnyStr]`` 及其子类 ``TextIO(IO[str])`` 与 ``BinaryIO(IO[bytes])`` 表示"
" I/O 流的类型，例如 :func:`open` 所返回的对象。"

#: ../../library/typing.rst:2015
msgid ""
"The ``typing.io`` namespace is deprecated and will be removed. These "
"types should be directly imported from ``typing`` instead."
msgstr ""

#: ../../library/typing.rst:2020
msgid ""
"These type aliases correspond to the return types from :func:`re.compile`"
" and :func:`re.match`.  These types (and the corresponding functions) are"
" generic in ``AnyStr`` and can be made specific by writing "
"``Pattern[str]``, ``Pattern[bytes]``, ``Match[str]``, or "
"``Match[bytes]``."
msgstr ""
"这些类型对应的是从 :func:`re.compile` 和 :func:`re.match` 返回的类型。 这些类型（及相应的函数）是 "
"``AnyStr`` 中的泛型并可通过编写 ``Pattern[str]``, ``Pattern[bytes]``, "
"``Match[str]`` 或 ``Match[bytes]`` 来具体指定。"

#: ../../library/typing.rst:2030
msgid ""
"The ``typing.re`` namespace is deprecated and will be removed. These "
"types should be directly imported from ``typing`` instead."
msgstr ""

#: ../../library/typing.rst:2031
msgid ""
"Classes ``Pattern`` and ``Match`` from :mod:`re` now support ``[]``. See "
":pep:`585` and :ref:`types-genericalias`."
msgstr ""
":mod:`re` 模块中的 ``Pattern`` 与 ``Match`` 类现已支持 ``[]``。详见 :pep:`585` 与 :ref"
":`types-genericalias`。"

#: ../../library/typing.rst:2037
msgid ""
"``Text`` is an alias for ``str``. It is provided to supply a forward "
"compatible path for Python 2 code: in Python 2, ``Text`` is an alias for "
"``unicode``."
msgstr ""
"``Text`` 是 ``str`` 的别名。提供了对 Python 2 代码的向下兼容：Python 2 中，``Text`` 是 "
"``unicode`` 的别名。"

#: ../../library/typing.rst:2041
msgid ""
"Use ``Text`` to indicate that a value must contain a unicode string in a "
"manner that is compatible with both Python 2 and Python 3::"
msgstr "使用 ``Text`` 时，值中必须包含 unicode 字符串，以兼容 Python 2 和 Python 3："

#: ../../library/typing.rst:2049
msgid ""
"Python 2 is no longer supported, and most type checkers also no longer "
"support type checking Python 2 code. Removal of the alias is not "
"currently planned, but users are encouraged to use :class:`str` instead "
"of ``Text`` wherever possible."
msgstr ""

#: ../../library/typing.rst:2056
msgid "Abstract Base Classes"
msgstr "抽象基类"

#: ../../library/typing.rst:2059
msgid "Corresponding to collections in :mod:`collections.abc`"
msgstr ":mod:`collections.abc` 对应的容器"

#: ../../library/typing.rst:2063
msgid "A generic version of :class:`collections.abc.Set`."
msgstr ":class:`collections.abc.Set`  的泛型版本。"

#: ../../library/typing.rst:2065
msgid ""
":class:`collections.abc.Set` now supports ``[]``. See :pep:`585` and :ref"
":`types-genericalias`."
msgstr ""
":class:`collections.abc.Set` 现已支持 ``[]``。详见 :pep:`585` 与 :ref:`types-"
"genericalias`。"

#: ../../library/typing.rst:2071
msgid "A generic version of :class:`collections.abc.ByteString`."
msgstr ":class:`collections.abc.ByteString` 的泛型版本。"

#: ../../library/typing.rst:2073
msgid ""
"This type represents the types :class:`bytes`, :class:`bytearray`, and "
":class:`memoryview` of byte sequences."
msgstr "该类型代表了 :class:`bytes`、:class:`bytearray`、:class:`memoryview` 等字节序列类型。"

#: ../../library/typing.rst:2076
msgid ""
"As a shorthand for this type, :class:`bytes` can be used to annotate "
"arguments of any of the types mentioned above."
msgstr "作为该类型的简称，:class:`bytes` 可用于标注上述任意类型的参数。"

#: ../../library/typing.rst:2079
msgid ""
":class:`collections.abc.ByteString` now supports ``[]``. See :pep:`585` "
"and :ref:`types-genericalias`."
msgstr ""
":class:`collections.abc.ByteString` 现已支持 ``[]``。详见 :pep:`585` 与 :ref"
":`types-genericalias`。"

#: ../../library/typing.rst:2085
msgid "A generic version of :class:`collections.abc.Collection`"
msgstr ":class:`collections.abc.Collection` 的泛型版本。"

#: ../../library/typing.rst:2089
msgid ""
":class:`collections.abc.Collection` now supports ``[]``. See :pep:`585` "
"and :ref:`types-genericalias`."
msgstr ""
":class:`collections.abc.Collection` 现已支持 ``[]``。详见 :pep:`585` 与 :ref"
":`types-genericalias`。"

#: ../../library/typing.rst:2095
msgid "A generic version of :class:`collections.abc.Container`."
msgstr ":class:`collections.abc.Container` 的泛型版本。"

#: ../../library/typing.rst:2097
msgid ""
":class:`collections.abc.Container` now supports ``[]``. See :pep:`585` "
"and :ref:`types-genericalias`."
msgstr ""
":class:`collections.abc.Container` 现已支持 ``[]``。详见 :pep:`585` 和 :ref"
":`types-genericalias`。"

#: ../../library/typing.rst:2103
msgid "A generic version of :class:`collections.abc.ItemsView`."
msgstr ":class:`collections.abc.ItemsView` 的泛型版本。"

#: ../../library/typing.rst:2105
msgid ""
":class:`collections.abc.ItemsView` now supports ``[]``. See :pep:`585` "
"and :ref:`types-genericalias`."
msgstr ""
":class:`collections.abc.ItemsView` 现已支持 ``[]``。详见 :pep:`585` 和 :ref"
":`types-genericalias`。"

#: ../../library/typing.rst:2111
msgid "A generic version of :class:`collections.abc.KeysView`."
msgstr ":class:`collections.abc.KeysView` 的泛型版本。"

#: ../../library/typing.rst:2113
msgid ""
":class:`collections.abc.KeysView` now supports ``[]``. See :pep:`585` and"
" :ref:`types-genericalias`."
msgstr ""
":class:`collections.abc.KeysView` 现已支持 ``[]``。详见 :pep:`585` 和 :ref"
":`types-genericalias`。"

#: ../../library/typing.rst:2119
msgid ""
"A generic version of :class:`collections.abc.Mapping`. This type can be "
"used as follows::"
msgstr ":class:`collections.abc.Mapping` 的泛型版本。用法如下："

#: ../../library/typing.rst:2125
msgid ""
":class:`collections.abc.Mapping` now supports ``[]``. See :pep:`585` and "
":ref:`types-genericalias`."
msgstr ""
":class:`collections.abc.Mapping` 现已支持 ``[]``。详见 :pep:`585` 和 :ref:`types-"
"genericalias`。"

#: ../../library/typing.rst:2131
msgid "A generic version of :class:`collections.abc.MappingView`."
msgstr ":class:`collections.abc.MappingView` 的泛型版本。"

#: ../../library/typing.rst:2133
msgid ""
":class:`collections.abc.MappingView` now supports ``[]``. See :pep:`585` "
"and :ref:`types-genericalias`."
msgstr ""
":class:`collections.abc.MappingView` 现已支持 ``[]``。详见 :pep:`585` 和 :ref"
":`types-genericalias`。"

#: ../../library/typing.rst:2139
msgid "A generic version of :class:`collections.abc.MutableMapping`."
msgstr ":class:`collections.abc.MutableMapping` 的泛型版本。"

#: ../../library/typing.rst:2141
msgid ""
":class:`collections.abc.MutableMapping` now supports ``[]``. See "
":pep:`585` and :ref:`types-genericalias`."
msgstr ""
":class:`collections.abc.MutableMapping` 现已支持 ``[]``。详见 :pep:`585` 和 :ref"
":`types-genericalias`。"

#: ../../library/typing.rst:2147
msgid "A generic version of :class:`collections.abc.MutableSequence`."
msgstr ":class:`collections.abc.MutableSequence` 的泛型版本。"

#: ../../library/typing.rst:2149
msgid ""
":class:`collections.abc.MutableSequence` now supports ``[]``. See "
":pep:`585` and :ref:`types-genericalias`."
msgstr ""
":class:`collections.abc.MutableSequence` 现已支持 ``[]``。详见 :pep:`585` 和 :ref"
":`types-genericalias`。"

#: ../../library/typing.rst:2155
msgid "A generic version of :class:`collections.abc.MutableSet`."
msgstr ":class:`collections.abc.MutableSet` 的泛型版本。"

#: ../../library/typing.rst:2157
msgid ""
":class:`collections.abc.MutableSet` now supports ``[]``. See :pep:`585` "
"and :ref:`types-genericalias`."
msgstr ""
":class:`collections.abc.MutableSet` 现已支持 ``[]``。详见 :pep:`585` 和 :ref"
":`types-genericalias`。"

#: ../../library/typing.rst:2163
msgid "A generic version of :class:`collections.abc.Sequence`."
msgstr ":class:`collections.abc.Sequence` 的泛型版本。"

#: ../../library/typing.rst:2165
msgid ""
":class:`collections.abc.Sequence` now supports ``[]``. See :pep:`585` and"
" :ref:`types-genericalias`."
msgstr ""
":class:`collections.abc.Sequence` 现已支持 ``[]``。详见 :pep:`585` 和 :ref"
":`types-genericalias`。"

#: ../../library/typing.rst:2171
msgid "A generic version of :class:`collections.abc.ValuesView`."
msgstr ":class:`collections.abc.ValuesView` 的泛型版本。"

#: ../../library/typing.rst:2173
msgid ""
":class:`collections.abc.ValuesView` now supports ``[]``. See :pep:`585` "
"and :ref:`types-genericalias`."
msgstr ""
":class:`collections.abc.ValuesView` 现已支持 ``[]``。详见 :pep:`585` 和 :ref"
":`types-genericalias`。"

#: ../../library/typing.rst:2178
msgid "Corresponding to other types in :mod:`collections.abc`"
msgstr ":mod:`collections.abc` 对应的其他类型"

#: ../../library/typing.rst:2182
msgid "A generic version of :class:`collections.abc.Iterable`."
msgstr ":class:`collections.abc.Iterable` 的泛型版本。"

#: ../../library/typing.rst:2184
msgid ""
":class:`collections.abc.Iterable` now supports ``[]``. See :pep:`585` and"
" :ref:`types-genericalias`."
msgstr ""
":class:`collections.abc.Iterable` 现已支持 ``[]``。详见 :pep:`585` 和 :ref"
":`types-genericalias`。"

#: ../../library/typing.rst:2190
msgid "A generic version of :class:`collections.abc.Iterator`."
msgstr ":class:`collections.abc.Iterator` 的泛型版本。"

#: ../../library/typing.rst:2192
msgid ""
":class:`collections.abc.Iterator` now supports ``[]``. See :pep:`585` and"
" :ref:`types-genericalias`."
msgstr ""
":class:`collections.abc.Iterator` 现已支持 ``[]``。详见 :pep:`585` 和 :ref"
":`types-genericalias`。"

#: ../../library/typing.rst:2198
msgid ""
"A generator can be annotated by the generic type ``Generator[YieldType, "
"SendType, ReturnType]``. For example::"
msgstr "生成器可以由泛型类型 ``Generator[YieldType, SendType, ReturnType]`` 注解。例如："

#: ../../library/typing.rst:2207
msgid ""
"Note that unlike many other generics in the typing module, the "
"``SendType`` of :class:`Generator` behaves contravariantly, not "
"covariantly or invariantly."
msgstr ""
"注意，与 typing 模块里的其他泛型不同， :class:`Generator` 的 ``SendType`` "
"属于逆变行为，不是协变行为，也是不变行为。"

#: ../../library/typing.rst:2211
msgid ""
"If your generator will only yield values, set the ``SendType`` and "
"``ReturnType`` to ``None``::"
msgstr "如果生成器只产生值，可将 ``SendType`` 与 ``ReturnType`` 设为 ``None``："

#: ../../library/typing.rst:2219
msgid ""
"Alternatively, annotate your generator as having a return type of either "
"``Iterable[YieldType]`` or ``Iterator[YieldType]``::"
msgstr "此外，还可以把生成器的返回类型注解为 ``Iterable[YieldType]`` 或 ``Iterator[YieldType]``："

#: ../../library/typing.rst:2227
msgid ""
":class:`collections.abc.Generator` now supports ``[]``. See :pep:`585` "
"and :ref:`types-genericalias`."
msgstr ""
":class:`collections.abc.Generator` 现已支持 ``[]``。详见 :pep:`585` 和 :ref"
":`types-genericalias`。"

#: ../../library/typing.rst:2233
#, fuzzy
msgid "An alias to :class:`collections.abc.Hashable`."
msgstr ":class:`collections.abc.Hashable` 的别名。"

#: ../../library/typing.rst:2235
#, fuzzy
msgid "Use :class:`collections.abc.Hashable` directly instead."
msgstr ":class:`collections.abc.Hashable` 的别名。"

#: ../../library/typing.rst:2240
msgid "A generic version of :class:`collections.abc.Reversible`."
msgstr ":class:`collections.abc.Reversible` 的泛型版本。"

#: ../../library/typing.rst:2242
msgid ""
":class:`collections.abc.Reversible` now supports ``[]``. See :pep:`585` "
"and :ref:`types-genericalias`."
msgstr ""
":class:`collections.abc.Reversible` 现已支持 ``[]``。详见 :pep:`585` 和 :ref"
":`types-genericalias`。"

#: ../../library/typing.rst:2248
#, fuzzy
msgid "An alias to :class:`collections.abc.Sized`."
msgstr ":class:`collections.abc.Sized` 的别名。"

#: ../../library/typing.rst:2250
#, fuzzy
msgid "Use :class:`collections.abc.Sized` directly instead."
msgstr ":class:`collections.abc.Sized` 的别名。"

#: ../../library/typing.rst:2254
msgid "Asynchronous programming"
msgstr "异步编程"

#: ../../library/typing.rst:2258
msgid ""
"A generic version of :class:`collections.abc.Coroutine`. The variance and"
" order of type variables correspond to those of :class:`Generator`, for "
"example::"
msgstr ""
":class:`collections.abc.Coroutine` 的泛型版本。类型变量的差异和顺序与 :class:`Generator` "
"的内容相对应，例如："

#: ../../library/typing.rst:2270
msgid ""
":class:`collections.abc.Coroutine` now supports ``[]``. See :pep:`585` "
"and :ref:`types-genericalias`."
msgstr ""
":class:`collections.abc.Coroutine` 现已支持 ``[]``。详见 :pep:`585` 和 :ref"
":`types-genericalias`。"

#: ../../library/typing.rst:2276
msgid ""
"An async generator can be annotated by the generic type "
"``AsyncGenerator[YieldType, SendType]``. For example::"
msgstr "异步生成器可由泛型类型 ``AsyncGenerator[YieldType, SendType]`` 注解。例如："

#: ../../library/typing.rst:2285
msgid ""
"Unlike normal generators, async generators cannot return a value, so "
"there is no ``ReturnType`` type parameter. As with :class:`Generator`, "
"the ``SendType`` behaves contravariantly."
msgstr ""
"与常规生成器不同，异步生成器不能返回值，因此没有 ``ReturnType`` 类型参数。 与 :class:`Generator` "
"类似，``SendType`` 也属于逆变行为。"

#: ../../library/typing.rst:2289
msgid ""
"If your generator will only yield values, set the ``SendType`` to "
"``None``::"
msgstr "如果生成器只产生值，可将 ``SendType`` 设置为 ``None``："

#: ../../library/typing.rst:2297
msgid ""
"Alternatively, annotate your generator as having a return type of either "
"``AsyncIterable[YieldType]`` or ``AsyncIterator[YieldType]``::"
msgstr ""
"此外，可用 ``AsyncIterable[YieldType]`` 或 ``AsyncIterator[YieldType]`` "
"注解生成器的返回类型："

#: ../../library/typing.rst:2307
msgid ""
":class:`collections.abc.AsyncGenerator` now supports ``[]``. See "
":pep:`585` and :ref:`types-genericalias`."
msgstr ""
":class:`collections.abc.AsyncGenerator` 现已支持 ``[]``。详见 :pep:`585` 和 :ref"
":`types-genericalias`。"

#: ../../library/typing.rst:2313
msgid "A generic version of :class:`collections.abc.AsyncIterable`."
msgstr ":class:`collections.abc.AsyncIterable` 的泛型版本。"

#: ../../library/typing.rst:2317
msgid ""
":class:`collections.abc.AsyncIterable` now supports ``[]``. See "
":pep:`585` and :ref:`types-genericalias`."
msgstr ""
":class:`collections.abc.AsyncIterable` 现已支持 ``[]``。详见 :pep:`585` 和 :ref"
":`types-genericalias`。"

#: ../../library/typing.rst:2323
msgid "A generic version of :class:`collections.abc.AsyncIterator`."
msgstr ":class:`collections.abc.AsyncIterator` 的泛型版本。"

#: ../../library/typing.rst:2327
msgid ""
":class:`collections.abc.AsyncIterator` now supports ``[]``. See "
":pep:`585` and :ref:`types-genericalias`."
msgstr ""
":class:`collections.abc.AsyncIterator` 现已支持 ``[]``。详见 :pep:`585` 和 :ref"
":`types-genericalias`。"

#: ../../library/typing.rst:2333
msgid "A generic version of :class:`collections.abc.Awaitable`."
msgstr ":class:`collections.abc.Awaitable` 的泛型版本。"

#: ../../library/typing.rst:2337
msgid ""
":class:`collections.abc.Awaitable` now supports ``[]``. See :pep:`585` "
"and :ref:`types-genericalias`."
msgstr ""
":class:`collections.abc.Awaitable` 现已支持 ``[]``。详见 :pep:`585` 和 :ref"
":`types-genericalias`。"

#: ../../library/typing.rst:2343
msgid "Context manager types"
msgstr "上下文管理器类型"

#: ../../library/typing.rst:2347
msgid "A generic version of :class:`contextlib.AbstractContextManager`."
msgstr ":class:`contextlib.AbstractContextManager` 的泛型版本。"

#: ../../library/typing.rst:2352
msgid ""
":class:`contextlib.AbstractContextManager` now supports ``[]``. See "
":pep:`585` and :ref:`types-genericalias`."
msgstr ""
":class:`contextlib.AbstractContextManager` 现已支持 ``[]``。详见 :pep:`585` 和 "
":ref:`types-genericalias`。"

#: ../../library/typing.rst:2358
msgid "A generic version of :class:`contextlib.AbstractAsyncContextManager`."
msgstr ":class:`contextlib.AbstractAsyncContextManager` 的泛型版本。"

#: ../../library/typing.rst:2363
msgid ""
":class:`contextlib.AbstractAsyncContextManager` now supports ``[]``. See "
":pep:`585` and :ref:`types-genericalias`."
msgstr ""
":class:`contextlib.AbstractAsyncContextManager` 现已支持 ``[]``。详见 :pep:`585`"
" 和 :ref:`types-genericalias`。"

#: ../../library/typing.rst:2368
msgid "Protocols"
msgstr "协议"

#: ../../library/typing.rst:2370
msgid "These protocols are decorated with :func:`runtime_checkable`."
msgstr "这些协议由 :func:`runtime_checkable` 装饰。"

#: ../../library/typing.rst:2374
msgid ""
"An ABC with one abstract method ``__abs__`` that is covariant in its "
"return type."
msgstr "含抽象方法 ``__abs__`` 的抽象基类，是其返回类型里的协变量。"

#: ../../library/typing.rst:2379
msgid "An ABC with one abstract method ``__bytes__``."
msgstr "含抽象方法 ``__bytes__`` 的抽象基类。"

#: ../../library/typing.rst:2383
msgid "An ABC with one abstract method ``__complex__``."
msgstr "含抽象方法 ``__complex__`` 的抽象基类。"

#: ../../library/typing.rst:2387
msgid "An ABC with one abstract method ``__float__``."
msgstr "含抽象方法 ``__float__`` 的抽象基类。"

#: ../../library/typing.rst:2391
msgid "An ABC with one abstract method ``__index__``."
msgstr "含抽象方法 ``__index__`` 的抽象基类。"

#: ../../library/typing.rst:2397
msgid "An ABC with one abstract method ``__int__``."
msgstr "含抽象方法 ``__int__`` 的抽象基类。"

#: ../../library/typing.rst:2401
msgid ""
"An ABC with one abstract method ``__round__`` that is covariant in its "
"return type."
msgstr "含抽象方法 ``__round__`` 的抽象基类，是其返回类型的协变量。"

#: ../../library/typing.rst:2405
msgid "Functions and decorators"
msgstr "函数与装饰器"

#: ../../library/typing.rst:2409
msgid "Cast a value to a type."
msgstr "把值强制转换为类型。"

#: ../../library/typing.rst:2411
msgid ""
"This returns the value unchanged.  To the type checker this signals that "
"the return value has the designated type, but at runtime we intentionally"
" don't check anything (we want this to be as fast as possible)."
msgstr "不变更返回值。对类型检查器而言，代表了返回值具有指定的类型，但运行时故意不做任何检查（以便让检查速度尽量快）。"

#: ../../library/typing.rst:2418
msgid ""
"Ask a static type checker to confirm that *val* has an inferred type of "
"*typ*."
msgstr ""

#: ../../library/typing.rst:2420
msgid ""
"When the type checker encounters a call to ``assert_type()``, it emits an"
" error if the value is not of the specified type::"
msgstr ""

#: ../../library/typing.rst:2427
msgid "At runtime this returns the first argument unchanged with no side effects."
msgstr ""

#: ../../library/typing.rst:2429
msgid ""
"This function is useful for ensuring the type checker's understanding of "
"a script is in line with the developer's intentions::"
msgstr ""

#: ../../library/typing.rst:2443
msgid "Ask a static type checker to confirm that a line of code is unreachable."
msgstr ""

#: ../../library/typing.rst:2456
msgid ""
"Here, the annotations allow the type checker to infer that the last case "
"can never execute, because ``arg`` is either an :class:`int` or a "
":class:`str`, and both options are covered by earlier cases. If a type "
"checker finds that a call to ``assert_never()`` is reachable, it will "
"emit an error. For example, if the type annotation for ``arg`` was "
"instead ``int | str | float``, the type checker would emit an error "
"pointing out that ``unreachable`` is of type :class:`float`. For a call "
"to ``assert_never`` to pass type checking, the inferred type of the "
"argument passed in must be the bottom type, :data:`Never`, and nothing "
"else."
msgstr ""

#: ../../library/typing.rst:2468
msgid "At runtime, this throws an exception when called."
msgstr ""

#: ../../library/typing.rst:2471
msgid ""
"`Unreachable Code and Exhaustiveness Checking "
"<https://typing.readthedocs.io/en/latest/source/unreachable.html>`__ has "
"more information about exhaustiveness checking with static typing."
msgstr ""

#: ../../library/typing.rst:2479
msgid "Reveal the inferred static type of an expression."
msgstr ""

#: ../../library/typing.rst:2481
msgid ""
"When a static type checker encounters a call to this function, it emits a"
" diagnostic with the type of the argument. For example::"
msgstr ""

#: ../../library/typing.rst:2487
msgid ""
"This can be useful when you want to debug how your type checker handles a"
" particular piece of code."
msgstr ""

#: ../../library/typing.rst:2490
msgid ""
"The function returns its argument unchanged, which allows using it within"
" an expression::"
msgstr ""

#: ../../library/typing.rst:2495
msgid ""
"Most type checkers support ``reveal_type()`` anywhere, even if the name "
"is not imported from ``typing``. Importing the name from ``typing`` "
"allows your code to run without runtime errors and communicates intent "
"more clearly."
msgstr ""

#: ../../library/typing.rst:2500
msgid ""
"At runtime, this function prints the runtime type of its argument to "
"stderr and returns it unchanged::"
msgstr ""

#: ../../library/typing.rst:2510
msgid ""
":data:`~typing.dataclass_transform` may be used to decorate a class, "
"metaclass, or a function that is itself a decorator. The presence of "
"``@dataclass_transform()`` tells a static type checker that the decorated"
" object performs runtime \"magic\" that transforms a class, giving it "
":func:`dataclasses.dataclass`-like behaviors."
msgstr ""

#: ../../library/typing.rst:2516
msgid "Example usage with a decorator function::"
msgstr ""

#: ../../library/typing.rst:2530
msgid "On a base class::"
msgstr ""

#: ../../library/typing.rst:2539
msgid "On a metaclass::"
msgstr ""

#: ../../library/typing.rst:2550
msgid ""
"The ``CustomerModel`` classes defined above will be treated by type "
"checkers similarly to classes created with :func:`@dataclasses.dataclass "
"<dataclasses.dataclass>`. For example, type checkers will assume these "
"classes have ``__init__`` methods that accept ``id`` and ``name``."
msgstr ""

#: ../../library/typing.rst:2556
msgid ""
"The decorated class, metaclass, or function may accept the following bool"
" arguments which type checkers will assume have the same effect as they "
"would have on the :func:`@dataclasses.dataclass<dataclasses.dataclass>` "
"decorator: ``init``, ``eq``, ``order``, ``unsafe_hash``, ``frozen``, "
"``match_args``, ``kw_only``, and ``slots``. It must be possible for the "
"value of these arguments (``True`` or ``False``) to be statically "
"evaluated."
msgstr ""

#: ../../library/typing.rst:2564
msgid ""
"The arguments to the ``dataclass_transform`` decorator can be used to "
"customize the default behaviors of the decorated class, metaclass, or "
"function:"
msgstr ""

#: ../../library/typing.rst:2568
msgid ""
"``eq_default`` indicates whether the ``eq`` parameter is assumed to be "
"``True`` or ``False`` if it is omitted by the caller."
msgstr ""

#: ../../library/typing.rst:2570
msgid ""
"``order_default`` indicates whether the ``order`` parameter is assumed to"
" be True or False if it is omitted by the caller."
msgstr ""

#: ../../library/typing.rst:2572
msgid ""
"``kw_only_default`` indicates whether the ``kw_only`` parameter is "
"assumed to be True or False if it is omitted by the caller."
msgstr ""

#: ../../library/typing.rst:2574
msgid ""
"``field_specifiers`` specifies a static list of supported classes or "
"functions that describe fields, similar to ``dataclasses.field()``."
msgstr ""

#: ../../library/typing.rst:2576
msgid ""
"Arbitrary other keyword arguments are accepted in order to allow for "
"possible future extensions."
msgstr ""

#: ../../library/typing.rst:2579
msgid ""
"Type checkers recognize the following optional arguments on field "
"specifiers:"
msgstr ""

#: ../../library/typing.rst:2582
msgid ""
"``init`` indicates whether the field should be included in the "
"synthesized ``__init__`` method. If unspecified, ``init`` defaults to "
"``True``."
msgstr ""

#: ../../library/typing.rst:2585
msgid "``default`` provides the default value for the field."
msgstr ""

#: ../../library/typing.rst:2586
msgid ""
"``default_factory`` provides a runtime callback that returns the default "
"value for the field. If neither ``default`` nor ``default_factory`` are "
"specified, the field is assumed to have no default value and must be "
"provided a value when the class is instantiated."
msgstr ""

#: ../../library/typing.rst:2591
msgid "``factory`` is an alias for ``default_factory``."
msgstr ""

#: ../../library/typing.rst:2592
msgid ""
"``kw_only`` indicates whether the field should be marked as keyword-only."
" If ``True``, the field will be keyword-only. If ``False``, it will not "
"be keyword-only. If unspecified, the value of the ``kw_only`` parameter "
"on the object decorated with ``dataclass_transform`` will be used, or if "
"that is unspecified, the value of ``kw_only_default`` on "
"``dataclass_transform`` will be used."
msgstr ""

#: ../../library/typing.rst:2598
msgid ""
"``alias`` provides an alternative name for the field. This alternative "
"name is used in the synthesized ``__init__`` method."
msgstr ""

#: ../../library/typing.rst:2601
msgid ""
"At runtime, this decorator records its arguments in the "
"``__dataclass_transform__`` attribute on the decorated object. It has no "
"other runtime effect."
msgstr ""

#: ../../library/typing.rst:2605
#, fuzzy
msgid "See :pep:`681` for more details."
msgstr "详见 :pep:`484`。"

#: ../../library/typing.rst:2611
msgid ""
"The ``@overload`` decorator allows describing functions and methods that "
"support multiple different combinations of argument types. A series of "
"``@overload``-decorated definitions must be followed by exactly one "
"non-``@overload``-decorated definition (for the same function/method). "
"The ``@overload``-decorated definitions are for the benefit of the type "
"checker only, since they will be overwritten by the "
"non-``@overload``-decorated definition, while the latter is used at "
"runtime but should be ignored by a type checker.  At runtime, calling a "
"``@overload``-decorated function directly will raise "
":exc:`NotImplementedError`. An example of overload that gives a more "
"precise type than can be expressed using a union or a type variable::"
msgstr ""
"``@overload`` 装饰器可以修饰支持多个不同参数类型组合的函数或方法。``@overload`` - 装饰定义的系列必须紧跟一个非 "
"``@overload``-装饰定义（用于同一个函数/方法）。``@overload``-装饰定义仅是为了协助类型检查器， 因为该装饰器会被非 "
"``@overload``-装饰定义覆盖，后者用于运行时，而且会被类型检查器忽略。在运行时直接调用 ``@overload`` 装饰的函数会触发 "
":exc:`NotImplementedError`。下面的重载示例给出了比联合类型或类型变量更精准的类型："

#: ../../library/typing.rst:2635
msgid "See :pep:`484` for details and comparison with other typing semantics."
msgstr "详见 :pep:`484`，与其他类型语义进行对比。"

#: ../../library/typing.rst:2637
msgid ""
"Overloaded functions can now be introspected at runtime using "
":func:`get_overloads`."
msgstr ""

#: ../../library/typing.rst:2644
msgid ""
"Return a sequence of :func:`@overload <overload>`-decorated definitions "
"for *func*. *func* is the function object for the implementation of the "
"overloaded function. For example, given the definition of ``process`` in "
"the documentation for :func:`@overload <overload>`, "
"``get_overloads(process)`` will return a sequence of three function "
"objects for the three defined overloads. If called on a function with no "
"overloads, ``get_overloads()`` returns an empty sequence."
msgstr ""

#: ../../library/typing.rst:2652
msgid ""
"``get_overloads()`` can be used for introspecting an overloaded function "
"at runtime."
msgstr ""

#: ../../library/typing.rst:2660
msgid ""
"Clear all registered overloads in the internal registry. This can be used"
" to reclaim the memory used by the registry."
msgstr ""

#: ../../library/typing.rst:2668
msgid ""
"A decorator to indicate to type checkers that the decorated method cannot"
" be overridden, and the decorated class cannot be subclassed. For "
"example::"
msgstr "告知类型检查器被装饰的方法不能被覆盖，且被装饰的类不能作为子类的装饰器，例如："

#: ../../library/typing.rst:2691
msgid ""
"The decorator will now set the ``__final__`` attribute to ``True`` on the"
" decorated object. Thus, a check like ``if getattr(obj, \"__final__\", "
"False)`` can be used at runtime to determine whether an object ``obj`` "
"has been marked as final. If the decorated object does not support "
"setting attributes, the decorator returns the object unchanged without "
"raising an exception."
msgstr ""
"装饰器现在将在被装饰的对象上设置 ``__final__`` 属性为 ``True``。因此，一个类似于 ``if getattr(obj, "
"\"__final__\",  False)`` 可以在运行时用来确定一个对象 ``obj`` 是否已经被标记为 "
"final。如果被装饰的对象不支持设置属性，装饰器会返回该对象而不引发异常。"

#: ../../library/typing.rst:2702
msgid "Decorator to indicate that annotations are not type hints."
msgstr "标明注解不是类型提示的装饰器。"

#: ../../library/typing.rst:2704
#, fuzzy
msgid ""
"This works as class or function :term:`decorator`.  With a class, it "
"applies recursively to all methods and classes defined in that class (but"
" not to methods defined in its superclasses or subclasses)."
msgstr "用作类或函数的 :term:`decorator`。用于类时，递归地应用于该类中定义的所有方法，（但不影响超类或子类中定义的方法）。"

#: ../../library/typing.rst:2708
msgid "This mutates the function(s) in place."
msgstr "本方法可直接修改函数。"

#: ../../library/typing.rst:2712
msgid "Decorator to give another decorator the :func:`no_type_check` effect."
msgstr "让其他装饰器具有 :func:`no_type_check` 效果的装饰器。"

#: ../../library/typing.rst:2714
msgid ""
"This wraps the decorator with something that wraps the decorated function"
" in :func:`no_type_check`."
msgstr "本装饰器用 :func:`no_type_check` 里的装饰函数打包其他装饰器。"

#: ../../library/typing.rst:2719
msgid "Decorator to mark a class or function to be unavailable at runtime."
msgstr "标记类或函数内不可用于运行时的装饰器。"

#: ../../library/typing.rst:2721
msgid ""
"This decorator is itself not available at runtime. It is mainly intended "
"to mark classes that are defined in type stub files if an implementation "
"returns an instance of a private class::"
msgstr "在运行时，该装饰器本身不可用。实现返回的是私有类实例时，它主要是用于标记在类型存根文件中定义的类。"

#: ../../library/typing.rst:2732
msgid ""
"Note that returning instances of private classes is not recommended. It "
"is usually preferable to make such classes public."
msgstr "注意，建议不要返回私有类实例，最好将之设为公共类。"

#: ../../library/typing.rst:2736
msgid "Introspection helpers"
msgstr "内省辅助器"

#: ../../library/typing.rst:2740
msgid ""
"Return a dictionary containing type hints for a function, method, module "
"or class object."
msgstr "返回函数、方法、模块、类对象的类型提示的字典。"

#: ../../library/typing.rst:2743
#, fuzzy
msgid ""
"This is often the same as ``obj.__annotations__``. In addition, forward "
"references encoded as string literals are handled by evaluating them in "
"``globals`` and ``locals`` namespaces. For a class ``C``, return a "
"dictionary constructed by merging all the ``__annotations__`` along "
"``C.__mro__`` in reverse order."
msgstr ""
"一般情况下，与 ``obj.__annotations__`` 相同。此外，可通过在 ``globals`` 与 ``locals`` "
"命名空间里进行评估，以此来处理编码为字符串字面量的前向引用。如有需要，在默认值设置为 ``None`` 时，可为函数或方法注解添加 "
"``Optional[t]``。对于类 ``C``，则返回由所有 ``__annotations__`` 与 ``C.__mro__`` "
"逆序合并而成的字典。"

#: ../../library/typing.rst:2749
msgid ""
"The function recursively replaces all ``Annotated[T, ...]`` with ``T``, "
"unless ``include_extras`` is set to ``True`` (see :class:`Annotated` for "
"more information). For example::"
msgstr ""
"本函数以递归地方式用 ``T`` 替换所有 ``Annotated[T, ...]``， 除非将 ``include_extras`` 的值设置为"
" ``True`` （详见 :class:`Annotated`）。例如："

#: ../../library/typing.rst:2764
msgid ""
":func:`get_type_hints` does not work with imported :ref:`type aliases "
"<type-aliases>` that include forward references. Enabling postponed "
"evaluation of annotations (:pep:`563`) may remove the need for most "
"forward references."
msgstr ""
":func:`get_type_hints` 在导入的 :ref:`type aliases <type-aliases>` "
"中不工作，该类型包括前向引用（forward references）。启用注解的延迟评估（:pep:`563`）可能会消除对大多数前向引用的需求。"

#: ../../library/typing.rst:2769
msgid "Added ``include_extras`` parameter as part of :pep:`593`."
msgstr ":pep:`593` 的组成部分，添加了 ``include_extras`` 参数。"

#: ../../library/typing.rst:2772
msgid ""
"Previously, ``Optional[t]`` was added for function and method annotations"
" if a default value equal to ``None`` was set. Now the annotation is "
"returned unchanged."
msgstr ""

#: ../../library/typing.rst:2780
msgid "Provide basic introspection for generic types and special typing forms."
msgstr "为泛型类型与特殊类型形式提供了基本的内省功能。"

#: ../../library/typing.rst:2782
msgid ""
"For a typing object of the form ``X[Y, Z, ...]`` these functions return "
"``X`` and ``(Y, Z, ...)``. If ``X`` is a generic alias for a builtin or "
":mod:`collections` class, it gets normalized to the original class. If "
"``X`` is a union or :class:`Literal` contained in another generic type, "
"the order of ``(Y, Z, ...)`` may be different from the order of the "
"original arguments ``[Y, Z, ...]`` due to type caching. For unsupported "
"objects return ``None`` and ``()`` correspondingly. Examples::"
msgstr ""
"对于 ``X[Y, Z, ...]`` 形式的类型对象，这些函数返回 ``X`` 与 ``(Y, Z, ...)``。如果 ``X`` "
"是内置对象或 :mod:`collections` class 的泛型别名，会将其标准化为原始类。如果 ``X`` "
"是一个联合体或包含在另一个通用类型中的 :class:`Literal`，由于类型缓存的原因，``(Y, Z, ...)`` 的顺序可能与原始实参"
" ``[Y, Z, ...]`` 的顺序不同。对于不支持的对象，相应地返回 ``None`` 和 ``()``。例子 ::"

#: ../../library/typing.rst:2801
msgid "Check if a type is a :class:`TypedDict`."
msgstr "检查一个类型是否为 :class:`TypedDict`。"

#: ../../library/typing.rst:2816
#, fuzzy
msgid ""
"A class used for internal typing representation of string forward "
"references. For example, ``List[\"SomeClass\"]`` is implicitly "
"transformed into ``List[ForwardRef(\"SomeClass\")]``.  This class should "
"not be instantiated by a user, but may be used by introspection tools."
msgstr ""
"用于字符串前向引用的内部类型表示的类。例如，``list[\"SomeClass\"]`` 会被隐式转换为 "
"``list[ForwardRef(\"SomeClass\")]``。这个类不应由用户来实例化，但可以由内省工具使用。"

#: ../../library/typing.rst:2822
msgid ""
":pep:`585` generic types such as ``list[\"SomeClass\"]`` will not be "
"implicitly transformed into ``list[ForwardRef(\"SomeClass\")]`` and thus "
"will not automatically resolve to ``list[SomeClass]``."
msgstr ""
":pep:`585` 泛型类型例如 ``list[\"SomeClass\"]`` 将不会被隐式地转换为 "
"``list[ForwardRef(\"SomeClass\")]`` 因而将不会自动解析为 ``list[SomeClass]``。"

#: ../../library/typing.rst:2829
msgid "Constant"
msgstr "常量"

#: ../../library/typing.rst:2833
msgid ""
"A special constant that is assumed to be ``True`` by 3rd party static "
"type checkers. It is ``False`` at runtime. Usage::"
msgstr "被第三方静态类型检查器假定为 ``True`` 的特殊常量。 在运行时为 ``False``。 用法如下::"

#: ../../library/typing.rst:2842
msgid ""
"The first type annotation must be enclosed in quotes, making it a "
"\"forward reference\", to hide the ``expensive_mod`` reference from the "
"interpreter runtime.  Type annotations for local variables are not "
"evaluated, so the second annotation does not need to be enclosed in "
"quotes."
msgstr ""
"第一个类型注解必须用引号标注，才能把它当作“前向引用”，从而在解释器运行时中隐藏 ``expensive_mod`` "
"引用。局部变量的类型注释不会被评估，因此，第二个注解不需要用引号引起来。"

#: ../../library/typing.rst:2849
msgid ""
"If ``from __future__ import annotations`` is used, annotations are not "
"evaluated at function definition time. Instead, they are stored as "
"strings in ``__annotations__``. This makes it unnecessary to use quotes "
"around the annotation (see :pep:`563`)."
msgstr ""

#: ../../library/typing.rst:2858
msgid "Deprecation Timeline of Major Features"
msgstr ""

#: ../../library/typing.rst:2860
msgid ""
"Certain features in ``typing`` are deprecated and may be removed in a "
"future version of Python. The following table summarizes major "
"deprecations for your convenience. This is subject to change, and not all"
" deprecations are listed."
msgstr ""

#: ../../library/typing.rst:2865
msgid "Feature"
msgstr ""

#: ../../library/typing.rst:2865
msgid "Deprecated in"
msgstr ""

#: ../../library/typing.rst:2865
msgid "Projected removal"
msgstr ""

#: ../../library/typing.rst:2865
msgid "PEP/issue"
msgstr ""

#: ../../library/typing.rst:2867
msgid "``typing.io`` and ``typing.re`` submodules"
msgstr ""

#: ../../library/typing.rst:2867
msgid "3.8"
msgstr ""

#: ../../library/typing.rst:2867 ../../library/typing.rst:2875
msgid "3.12"
msgstr ""

#: ../../library/typing.rst:2867
msgid ":issue:`38291`"
msgstr ""

#: ../../library/typing.rst:2870
msgid "``typing`` versions of standard collections"
msgstr ""

#: ../../library/typing.rst:2870
msgid "3.9"
msgstr ""

#: ../../library/typing.rst:2870 ../../library/typing.rst:2873
#: ../../library/typing.rst:2875
msgid "Undecided"
msgstr ""

#: ../../library/typing.rst:2870
msgid ":pep:`585`"
msgstr ""

#: ../../library/typing.rst:2873
msgid "``typing.Text``"
msgstr ""

#: ../../library/typing.rst:2873
msgid "3.11"
msgstr ""

#: ../../library/typing.rst:2873
msgid ":gh:`92332`"
msgstr ""

#: ../../library/typing.rst:2875
msgid "``typing.Hashable`` and ``typing.Sized``"
msgstr ""

#: ../../library/typing.rst:2875
msgid ":gh:`94309`"
msgstr ""

#~ msgid ""
#~ "A generic type can have any number"
#~ " of type variables, and type "
#~ "variables may be constrained::"
#~ msgstr "泛型类型支持多个类型变量，不过，类型变量可能会受到限制："

#~ msgid ""
#~ "The latter example's signature is "
#~ "essentially the overloading of ``(str, "
#~ "str) -> str`` and ``(bytes, bytes) "
#~ "-> bytes``.  Also note that if the"
#~ " arguments are instances of some "
#~ "subclass of :class:`str`, the return "
#~ "type is still plain :class:`str`."
#~ msgstr ""
#~ "本质上，后例的签名重载了 ``(str, str) -> str`` 与 "
#~ "``(bytes, bytes) -> bytes``。注意，参数是 "
#~ ":class:`str` 子类的实例时，返回类型仍是纯 :class:`str`。"

#~ msgid ""
#~ "If a type checker finds that a "
#~ "call to ``assert_never()`` is reachable, "
#~ "it will emit an error."
#~ msgstr ""

#~ msgid "Annotating an :meth:`object.__enter__` method which returns self."
#~ msgstr ""

#~ msgid ""
#~ "The functional syntax should also be "
#~ "used when any of the keys are "
#~ "not valid :ref:`identifiers`, for example "
#~ "because they are keywords or contain "
#~ "hyphens. Example::"
#~ msgstr ""

#~ msgid ""
#~ "A ``TypedDict`` cannot inherit from a"
#~ " non-TypedDict class, notably including "
#~ ":class:`Generic`. For example::"
#~ msgstr ""

#~ msgid ""
#~ "``Point2D.__required_keys__`` and "
#~ "``Point2D.__optional_keys__`` return :class:`frozenset`"
#~ " objects containing required and non-"
#~ "required keys, respectively. Currently the "
#~ "only way to declare both required "
#~ "and non-required keys in the same"
#~ " ``TypedDict`` is mixed inheritance, "
#~ "declaring a ``TypedDict`` with one value"
#~ " for the ``total`` argument and then"
#~ " inheriting it from another ``TypedDict``"
#~ " with a different value for "
#~ "``total``. Usage::"
#~ msgstr ""

#~ msgid "Assert to the type checker that a line of code is unreachable."
#~ msgstr ""

#~ msgid ""
#~ "Here, the annotations allow the type "
#~ "checker to infer that the last "
#~ "case can never execute, because ``arg``"
#~ " is either an :class:`int` or a "
#~ ":class:`str`, and both options are "
#~ "covered by earlier cases. If a "
#~ "type checker finds that a call to"
#~ " ``assert_never()`` is reachable, it will"
#~ " emit an error. For example, if "
#~ "the type annotation for ``arg`` was "
#~ "instead ``int | str | float``, the"
#~ " type checker would emit an error "
#~ "pointing out that ``unreachable`` is of"
#~ " type :class:`float`. For a call to"
#~ " ``assert_never`` to succeed, the inferred"
#~ " type of the argument passed in "
#~ "must be the bottom type, :data:`Never`,"
#~ " and nothing else."
#~ msgstr ""

#~ msgid ""
#~ "`Unreachable Code and Exhaustiveness Checking"
#~ " "
#~ "<https://typing.readthedocs.io/en/latest/source/unreachable.html>_`"
#~ " has more information about exhaustiveness"
#~ " checking with static typing."
#~ msgstr ""

#~ msgid ""
#~ "Return a sequence of :func:`@overload "
#~ "<overload>`-decorated definitions for *func*. "
#~ "*func* is the function object for "
#~ "the implementation of the overloaded "
#~ "function. For example, given the "
#~ "definition of ``process`` in the "
#~ "documentation for :func:`@overload <overload>`, "
#~ "``get_overloads(process)`` will return a "
#~ "sequence of three function objects for"
#~ " the three defined overloads. If "
#~ "called on a function with no "
#~ "overloads, ``get_overloads`` returns an empty"
#~ " sequence."
#~ msgstr ""

#~ msgid ""
#~ "``get_overloads`` can be used for "
#~ "introspecting an overloaded function at "
#~ "runtime."
#~ msgstr ""

#~ msgid ""
#~ "If ``from __future__ import annotations`` "
#~ "is used in Python 3.7 or later,"
#~ " annotations are not evaluated at "
#~ "function definition time. Instead, they "
#~ "are stored as strings in "
#~ "``__annotations__``. This makes it unnecessary"
#~ " to use quotes around the annotation."
#~ " (see :pep:`563`)."
#~ msgstr ""
#~ "Python 3.7 或更高版本中使用 ``from __future__ "
#~ "import annotations`` 时，函数定义时不处理注解，而是把注解当作字符串存储在 "
#~ "``__annotations__`` 里，这样就不必为注解使用引号。（详见 :pep:`563`）。"

#~ msgid ""
#~ ":pep:`655`: Marking individual TypedDict items"
#~ " as required or potentially-missing"
#~ msgstr ""

#~ msgid ""
#~ "You should use use :data:`Self` as "
#~ "calls to ``SubclassOfFoo.returns_self`` would "
#~ "have ``Foo`` as the return type "
#~ "and not ``SubclassOfFoo``."
#~ msgstr ""

#~ msgid ""
#~ "For more information, see :class:`TypedDict`"
#~ " and :pep:`655` (\"Marking individual "
#~ "TypedDict items as required or "
#~ "potentially-missing\")."
#~ msgstr ""

#~ msgid "The arguments to this decorator can be used to customize this behavior:"
#~ msgstr ""

