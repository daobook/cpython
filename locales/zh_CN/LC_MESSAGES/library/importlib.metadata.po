# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2021, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2021.
#
# Translators:
# eric R <trencyclopedia@gmail.com>, 2021
# Freesand Leo <yuqinju@163.com>, 2021
# Alpha Du <alphanow@gmail.com>, 2021
# xinetzone <735613050@qq.com>, 2022
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.10\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-10-12 09:44+0800\n"
"PO-Revision-Date: 2021-06-28 01:08+0000\n"
"Last-Translator: Alpha Du <alphanow@gmail.com>, 2021\n"
"Language: zh_CN\n"
"Language-Team: Chinese (China) (https://www.transifex.com/python-"
"doc/teams/5390/zh_CN/)\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.10.3\n"

#: ../../library/importlib.metadata.rst:5
msgid "Using :mod:`!importlib.metadata`"
msgstr "使用 :mod:`!importlib.metadata`"

#: ../../library/importlib.metadata.rst:11
msgid "``importlib.metadata`` is no longer provisional."
msgstr "``importlib.metadata`` 不再是暂定的。"

#: ../../library/importlib.metadata.rst:14
msgid "**Source code:** :source:`Lib/importlib/metadata/__init__.py`"
msgstr ""

#: ../../library/importlib.metadata.rst:16
msgid ""
"``importlib_metadata`` is a library that provides access to the metadata "
"of an installed `Distribution Package "
"<https://packaging.python.org/en/latest/glossary/#term-Distribution-"
"Package>`_, such as its entry points or its top-level names (`Import "
"Package <https://packaging.python.org/en/latest/glossary/#term-Import-"
"Package>`_\\s, modules, if any). Built in part on Python's import system,"
" this library intends to replace similar functionality in the `entry "
"point API`_ and `metadata API`_ of ``pkg_resources``.  Along with "
":mod:`importlib.resources`, this package can eliminate the need to use "
"the older and less efficient ``pkg_resources`` package."
msgstr ""
"``importlib_metadata`` 是一个库，它提供对已安装"
" `分发包 <https://packaging.python.org/en/latest/glossary/#term-Distribution-Package>`_ 的元数据的访问，"
"例如它的入口点或它的顶级名称（`导入包 <https://packaging.python.org/en/latest/glossary/#term-Import-Package>`_ 、模块，如果有的话）。"
"这个库部分构建在 Python 的 import 系统上，它打算取代 ``pkg_resources`` 的 `entry point API`_ 和 `metadata API`_ 中的类似功能。"
"连同 :mod:`importlib.resources`，这个包可以消除使用旧的和效率较低的 ``pkg_resources`` 包的需要。"

#: ../../library/importlib.metadata.rst:27
msgid ""
"``importlib_metadata`` operates on third-party *distribution packages* "
"installed into Python's ``site-packages`` directory via tools such as "
"`pip <https://pypi.org/project/pip/>`_. Specifically, it works with "
"distributions with discoverable ``dist-info`` or ``egg-info`` "
"directories, and metadata defined by the `Core metadata specifications "
"<https://packaging.python.org/en/latest/specifications/core-metadata"
"/#core-metadata>`_."
msgstr ""
"``importlib_metadata`` 操作通过 `pip <https://pypi.org/project/pip/>`_ 等工具安装到 Python 的 ``site-packages`` 目录中的第三方分发包。"
"具体来说，它适用于具有可发现的 ``dist-info`` 或 ``egg-info`` 目录的发行版，"
"以及由 `Core 元数据规范定义的元数据 <https://packaging.python.org/en/latest/specifications/core-metadata/#core-metadata>`_。"

#: ../../library/importlib.metadata.rst:36
msgid ""
"These are *not* necessarily equivalent to or correspond 1:1 with the top-"
"level *import package* names that can be imported inside Python code. One"
" *distribution package* can contain multiple *import packages* (and "
"single modules), and one top-level *import package* may map to multiple "
"*distribution packages* if it is a namespace package. You can use "
":ref:`package_distributions() <package-distributions>` to get a mapping "
"between them."
msgstr ""
"它们不一定等同于或与可在 Python 代码中导入的顶级导入包名 1:1 对应。"
"一个发布包可以包含多个导入包(和单个模块)，如果是命名空间包，一个顶级导入包可以映射到多个发布包。"
"您可以使用 :ref:`package_distributions() <package-distributions>` 来获取它们之间的映射。"

#: ../../library/importlib.metadata.rst:47
msgid ""
"By default, distribution metadata can live on the file system or in zip "
"archives on :data:`sys.path`.  Through an extension mechanism, the "
"metadata can live almost anywhere."
msgstr ""

#: ../../library/importlib.metadata.rst:62
msgid "https://importlib-metadata.readthedocs.io/"
msgstr ""

#: ../../library/importlib.metadata.rst:56
msgid ""
"The documentation for ``importlib_metadata``, which supplies a backport "
"of ``importlib.metadata``. This includes an `API reference <https"
"://importlib-metadata.readthedocs.io/en/latest/api.html>`__ for this "
"module's classes and functions, as well as a `migration guide <https"
"://importlib-metadata.readthedocs.io/en/latest/migration.html>`__ for "
"existing users of ``pkg_resources``."
msgstr ""

#: ../../library/importlib.metadata.rst:67
msgid "Overview"
msgstr "概述"

#: ../../library/importlib.metadata.rst:69
msgid ""
"Let's say you wanted to get the version string for a `Distribution "
"Package <https://packaging.python.org/en/latest/glossary/#term-"
"Distribution-Package>`_ you've installed using ``pip``.  We start by "
"creating a virtual environment and installing something into it:"
msgstr ""

#: ../../library/importlib.metadata.rst:80
msgid "You can get the version string for ``wheel`` by running the following:"
msgstr ""

#: ../../library/importlib.metadata.rst:89
msgid ""
"You can also get a collection of entry points selectable by properties of"
" the EntryPoint (typically 'group' or 'name'), such as "
"``console_scripts``, ``distutils.commands`` and others.  Each group "
"contains a collection of :ref:`EntryPoint <entry-points>` objects."
msgstr ""

#: ../../library/importlib.metadata.rst:93
msgid "You can get the :ref:`metadata for a distribution <metadata>`::"
msgstr ""

#: ../../library/importlib.metadata.rst:98
msgid ""
"You can also get a :ref:`distribution's version number <version>`, list "
"its :ref:`constituent files <files>`, and get a list of the "
"distribution's :ref:`requirements`."
msgstr ""

#: ../../library/importlib.metadata.rst:104
msgid "Functional API"
msgstr "功能性 API"

#: ../../library/importlib.metadata.rst:106
msgid "This package provides the following functionality via its public API."
msgstr ""

#: ../../library/importlib.metadata.rst:112
msgid "Entry points"
msgstr ""

#: ../../library/importlib.metadata.rst:114
msgid ""
"The ``entry_points()`` function returns a collection of entry points. "
"Entry points are represented by ``EntryPoint`` instances; each "
"``EntryPoint`` has a ``.name``, ``.group``, and ``.value`` attributes and"
" a ``.load()`` method to resolve the value.  There are also ``.module``, "
"``.attr``, and ``.extras`` attributes for getting the components of the "
"``.value`` attribute."
msgstr ""

#: ../../library/importlib.metadata.rst:121
msgid "Query all entry points::"
msgstr ""

#: ../../library/importlib.metadata.rst:125
msgid ""
"The ``entry_points()`` function returns an ``EntryPoints`` object, a "
"collection of all ``EntryPoint`` objects with ``names`` and ``groups`` "
"attributes for convenience::"
msgstr ""

#: ../../library/importlib.metadata.rst:132
msgid ""
"``EntryPoints`` has a ``select`` method to select entry points matching "
"specific properties. Select entry points in the ``console_scripts`` "
"group::"
msgstr ""

#: ../../library/importlib.metadata.rst:138
msgid ""
"Equivalently, since ``entry_points`` passes keyword arguments through to "
"select::"
msgstr ""

#: ../../library/importlib.metadata.rst:143
msgid "Pick out a specific script named \"wheel\" (found in the wheel project)::"
msgstr ""

#: ../../library/importlib.metadata.rst:149
msgid "Equivalently, query for that entry point during selection::"
msgstr ""

#: ../../library/importlib.metadata.rst:154
msgid "Inspect the resolved entry point::"
msgstr ""

#: ../../library/importlib.metadata.rst:168
msgid ""
"The ``group`` and ``name`` are arbitrary values defined by the package "
"author and usually a client will wish to resolve all entry points for a "
"particular group.  Read `the setuptools docs "
"<https://setuptools.pypa.io/en/latest/userguide/entry_point.html>`_ for "
"more information on entry points, their definition, and usage."
msgstr ""

#: ../../library/importlib.metadata.rst:174
msgid "*Compatibility Note*"
msgstr ""

#: ../../library/importlib.metadata.rst:176
msgid ""
"The \"selectable\" entry points were introduced in ``importlib_metadata``"
" 3.6 and Python 3.10. Prior to those changes, ``entry_points`` accepted "
"no parameters and always returned a dictionary of entry points, keyed by "
"group. With ``importlib_metadata`` 5.0 and Python 3.12, ``entry_points`` "
"always returns an ``EntryPoints`` object. See "
"`backports.entry_points_selectable "
"<https://pypi.org/project/backports.entry_points_selectable>`_ for "
"compatibility options."
msgstr ""

#: ../../library/importlib.metadata.rst:188
msgid "Distribution metadata"
msgstr ""

#: ../../library/importlib.metadata.rst:190
msgid ""
"Every `Distribution Package "
"<https://packaging.python.org/en/latest/glossary/#term-Distribution-"
"Package>`_ includes some metadata, which you can extract using the "
"``metadata()`` function::"
msgstr ""

#: ../../library/importlib.metadata.rst:196
msgid ""
"The keys of the returned data structure, a ``PackageMetadata``, name the "
"metadata keywords, and the values are returned unparsed from the "
"distribution metadata::"
msgstr ""

#: ../../library/importlib.metadata.rst:203
msgid ""
"``PackageMetadata`` also presents a ``json`` attribute that returns all "
"the metadata in a JSON-compatible form per :PEP:`566`::"
msgstr ""

#: ../../library/importlib.metadata.rst:211
msgid ""
"The actual type of the object returned by ``metadata()`` is an "
"implementation detail and should be accessed only through the interface "
"described by the `PackageMetadata protocol <https://importlib-"
"metadata.readthedocs.io/en/latest/api.html#importlib_metadata.PackageMetadata>`."
msgstr ""

#: ../../library/importlib.metadata.rst:216
msgid ""
"The ``Description`` is now included in the metadata when presented "
"through the payload. Line continuation characters have been removed."
msgstr ""

#: ../../library/importlib.metadata.rst:220
msgid "The ``json`` attribute was added."
msgstr ""

#: ../../library/importlib.metadata.rst:227
msgid "Distribution versions"
msgstr ""

#: ../../library/importlib.metadata.rst:229
msgid ""
"The ``version()`` function is the quickest way to get a `Distribution "
"Package <https://packaging.python.org/en/latest/glossary/#term-"
"Distribution-Package>`_'s version number, as a string::"
msgstr ""

#: ../../library/importlib.metadata.rst:240
msgid "Distribution files"
msgstr ""

#: ../../library/importlib.metadata.rst:242
msgid ""
"You can also get the full set of files contained within a distribution.  "
"The ``files()`` function takes a `Distribution Package "
"<https://packaging.python.org/en/latest/glossary/#term-Distribution-"
"Package>`_ name and returns all of the files installed by this "
"distribution.  Each file object returned is a ``PackagePath``, a "
":class:`pathlib.PurePath` derived object with additional ``dist``, "
"``size``, and ``hash`` properties as indicated by the metadata.  For "
"example::"
msgstr ""

#: ../../library/importlib.metadata.rst:259
msgid "Once you have the file, you can also read its contents::"
msgstr ""

#: ../../library/importlib.metadata.rst:270
msgid ""
"You can also use the ``locate`` method to get a the absolute path to the "
"file::"
msgstr ""

#: ../../library/importlib.metadata.rst:276
msgid ""
"In the case where the metadata file listing files (RECORD or SOURCES.txt)"
" is missing, ``files()`` will return ``None``. The caller may wish to "
"wrap calls to ``files()`` in `always_iterable <https://more-"
"itertools.readthedocs.io/en/stable/api.html#more_itertools.always_iterable>`_"
" or otherwise guard against this condition if the target distribution is "
"not known to have the metadata present."
msgstr ""

#: ../../library/importlib.metadata.rst:287
msgid "Distribution requirements"
msgstr ""

#: ../../library/importlib.metadata.rst:289
msgid ""
"To get the full set of requirements for a `Distribution Package "
"<https://packaging.python.org/en/latest/glossary/#term-Distribution-"
"Package>`_, use the ``requires()`` function::"
msgstr ""

#: ../../library/importlib.metadata.rst:301
msgid "Mapping import to distribution packages"
msgstr ""

#: ../../library/importlib.metadata.rst:303
msgid ""
"A convenience method to resolve the `Distribution Package "
"<https://packaging.python.org/en/latest/glossary/#term-Distribution-"
"Package>`_ name (or names, in the case of a namespace package) that "
"provide each importable top-level Python module or `Import Package "
"<https://packaging.python.org/en/latest/glossary/#term-Import-"
"Package>`_::"
msgstr ""

#: ../../library/importlib.metadata.rst:316
msgid "Distributions"
msgstr ""

#: ../../library/importlib.metadata.rst:318
msgid ""
"While the above API is the most common and convenient usage, you can get "
"all of that information from the ``Distribution`` class.  A "
"``Distribution`` is an abstract object that represents the metadata for a"
" Python `Distribution Package "
"<https://packaging.python.org/en/latest/glossary/#term-Distribution-"
"Package>`_.  You can get the ``Distribution`` instance::"
msgstr ""

#: ../../library/importlib.metadata.rst:327
msgid ""
"Thus, an alternative way to get the version number is through the "
"``Distribution`` instance::"
msgstr ""

#: ../../library/importlib.metadata.rst:333
msgid ""
"There are all kinds of additional metadata available on the "
"``Distribution`` instance::"
msgstr ""

#: ../../library/importlib.metadata.rst:341
msgid ""
"The full set of available metadata is not described here. See the `Core "
"metadata specifications "
"<https://packaging.python.org/en/latest/specifications/core-metadata"
"/#core-metadata>`_ for additional details."
msgstr ""

#: ../../library/importlib.metadata.rst:346
msgid "Distribution Discovery"
msgstr ""

#: ../../library/importlib.metadata.rst:348
msgid ""
"By default, this package provides built-in support for discovery of "
"metadata for file system and zip file `Distribution Package "
"<https://packaging.python.org/en/latest/glossary/#term-Distribution-"
"Package>`_\\s. This metadata finder search defaults to ``sys.path``, but "
"varies slightly in how it interprets those values from how other import "
"machinery does. In particular:"
msgstr ""

#: ../../library/importlib.metadata.rst:352
msgid ""
"``importlib.metadata`` does not honor :class:`bytes` objects on "
"``sys.path``."
msgstr ""

#: ../../library/importlib.metadata.rst:353
msgid ""
"``importlib.metadata`` will incidentally honor :py:class:`pathlib.Path` "
"objects on ``sys.path`` even though such values will be ignored for "
"imports."
msgstr ""

#: ../../library/importlib.metadata.rst:357
msgid "Extending the search algorithm"
msgstr ""

#: ../../library/importlib.metadata.rst:359
msgid ""
"Because `Distribution Package "
"<https://packaging.python.org/en/latest/glossary/#term-Distribution-"
"Package>`_ metadata is not available through :data:`sys.path` searches, "
"or package loaders directly, the metadata for a distribution is found "
"through import system `finders`_.  To find a distribution package's "
"metadata, ``importlib.metadata`` queries the list of :term:`meta path "
"finders <meta path finder>` on :data:`sys.meta_path`."
msgstr ""

#: ../../library/importlib.metadata.rst:367
msgid ""
"By default ``importlib_metadata`` installs a finder for distribution "
"packages found on the file system. This finder doesn't actually find any "
"*distributions*, but it can find their metadata."
msgstr ""

#: ../../library/importlib.metadata.rst:372
msgid ""
"The abstract class :py:class:`importlib.abc.MetaPathFinder` defines the "
"interface expected of finders by Python's import system. "
"``importlib.metadata`` extends this protocol by looking for an optional "
"``find_distributions`` callable on the finders from :data:`sys.meta_path`"
" and presents this extended interface as the ``DistributionFinder`` "
"abstract base class, which defines this abstract method::"
msgstr ""

#: ../../library/importlib.metadata.rst:386
msgid ""
"The ``DistributionFinder.Context`` object provides ``.path`` and "
"``.name`` properties indicating the path to search and name to match and "
"may supply other relevant context."
msgstr ""

#: ../../library/importlib.metadata.rst:390
msgid ""
"What this means in practice is that to support finding distribution "
"package metadata in locations other than the file system, subclass "
"``Distribution`` and implement the abstract methods. Then from a custom "
"finder, return instances of this derived ``Distribution`` in the "
"``find_distributions()`` method."
msgstr ""

#~ msgid "**Source code:** :source:`Lib/importlib/metadata.py`"
#~ msgstr ""

#~ msgid ""
#~ "A convience method to resolve the "
#~ "distribution or distributions (in the "
#~ "case of a namespace package) for "
#~ "top-level Python packages or modules::"
#~ msgstr ""

#~ msgid "Footnotes"
#~ msgstr "备注"

#~ msgid ""
#~ "``importlib.metadata`` is a library that "
#~ "provides for access to installed package"
#~ " metadata.  Built in part on Python's"
#~ " import system, this library intends "
#~ "to replace similar functionality in the"
#~ " `entry point API`_ and `metadata "
#~ "API`_ of ``pkg_resources``.  Along with "
#~ ":mod:`importlib.resources` in Python 3.7 and"
#~ " newer (backported as `importlib_resources`_ "
#~ "for older versions of Python), this "
#~ "can eliminate the need to use the"
#~ " older and less efficient ``pkg_resources``"
#~ " package."
#~ msgstr ""

#~ msgid ""
#~ "The ``group`` and ``name`` are arbitrary"
#~ " values defined by the package author"
#~ " and usually a client will wish "
#~ "to resolve all entry points for a"
#~ " particular group.  Read `the setuptools"
#~ " docs "
#~ "<https://setuptools.readthedocs.io/en/latest/setuptools.html"
#~ "#dynamic-discovery-of-services-and-"
#~ "plugins>`_ for more information on entry"
#~ " points, their definition, and usage."
#~ msgstr ""

#~ msgid ""
#~ "``importlib.metadata`` is a library that "
#~ "provides for access to installed package"
#~ " metadata.  Built in part on Python's"
#~ " import system, this library intends "
#~ "to replace similar functionality in the"
#~ " `entry point API`_ and `metadata "
#~ "API`_ of ``pkg_resources``.  Along with "
#~ ":mod:`importlib.resources` (with new features "
#~ "backported to the `importlib_resources`_ "
#~ "package), this can eliminate the need"
#~ " to use the older and less "
#~ "efficient ``pkg_resources`` package."
#~ msgstr ""

#~ msgid ""
#~ "By \"installed package\" we generally "
#~ "mean a third-party package installed "
#~ "into Python's ``site-packages`` directory "
#~ "via tools such as `pip "
#~ "<https://pypi.org/project/pip/>`_.  Specifically, it "
#~ "means a package with either a "
#~ "discoverable ``dist-info`` or ``egg-"
#~ "info`` directory, and metadata defined "
#~ "by :pep:`566` or its older "
#~ "specifications. By default, package metadata"
#~ " can live on the file system or"
#~ " in zip archives on :data:`sys.path`.  "
#~ "Through an extension mechanism, the "
#~ "metadata can live almost anywhere."
#~ msgstr ""

#~ msgid ""
#~ "Let's say you wanted to get the"
#~ " version string for a package you've"
#~ " installed using ``pip``.  We start "
#~ "by creating a virtual environment and"
#~ " installing something into it:"
#~ msgstr ""

#~ msgid ""
#~ "You can also get the set of "
#~ "entry points keyed by group, such "
#~ "as ``console_scripts``, ``distutils.commands`` and"
#~ " others.  Each group contains a "
#~ "sequence of :ref:`EntryPoint <entry-points>`"
#~ " objects."
#~ msgstr ""

#~ msgid ""
#~ "The ``entry_points()`` function returns an "
#~ "``EntryPoints`` object, a sequence of "
#~ "all ``EntryPoint`` objects with ``names`` "
#~ "and ``groups`` attributes for convenience::"
#~ msgstr ""

#~ msgid ""
#~ "The \"selectable\" entry points were "
#~ "introduced in ``importlib_metadata`` 3.6 and"
#~ " Python 3.10. Prior to those changes,"
#~ " ``entry_points`` accepted no parameters "
#~ "and always returned a dictionary of "
#~ "entry points, keyed by group. For "
#~ "compatibility, if no parameters are "
#~ "passed to entry_points, a ``SelectableGroups``"
#~ " object is returned, implementing that "
#~ "dict interface. In the future, calling"
#~ " ``entry_points`` with no parameters will"
#~ " return an ``EntryPoints`` object. Users"
#~ " should rely on the selection "
#~ "interface to retrieve entry points by"
#~ " group."
#~ msgstr ""

#~ msgid ""
#~ "Every distribution includes some metadata, "
#~ "which you can extract using the "
#~ "``metadata()`` function::"
#~ msgstr ""

#~ msgid ""
#~ "The ``version()`` function is the "
#~ "quickest way to get a distribution's "
#~ "version number, as a string::"
#~ msgstr ""

#~ msgid ""
#~ "You can also get the full set "
#~ "of files contained within a "
#~ "distribution.  The ``files()`` function takes"
#~ " a distribution package name and "
#~ "returns all of the files installed "
#~ "by this distribution.  Each file object"
#~ " returned is a ``PackagePath``, a "
#~ ":class:`pathlib.PurePath` derived object with "
#~ "additional ``dist``, ``size``, and ``hash``"
#~ " properties as indicated by the "
#~ "metadata.  For example::"
#~ msgstr ""

#~ msgid ""
#~ "To get the full set of "
#~ "requirements for a distribution, use the"
#~ " ``requires()`` function::"
#~ msgstr ""

#~ msgid "Package distributions"
#~ msgstr ""

#~ msgid ""
#~ "A convenience method to resolve the "
#~ "distribution or distributions (in the "
#~ "case of a namespace package) for "
#~ "top-level Python packages or modules::"
#~ msgstr ""

#~ msgid ""
#~ "While the above API is the most"
#~ " common and convenient usage, you can"
#~ " get all of that information from "
#~ "the ``Distribution`` class.  A "
#~ "``Distribution`` is an abstract object "
#~ "that represents the metadata for a "
#~ "Python package.  You can get the "
#~ "``Distribution`` instance::"
#~ msgstr ""

#~ msgid ""
#~ "The full set of available metadata "
#~ "is not described here.  See :pep:`566`"
#~ " for additional details."
#~ msgstr ""

#~ msgid ""
#~ "Because package metadata is not "
#~ "available through :data:`sys.path` searches, "
#~ "or package loaders directly, the "
#~ "metadata for a package is found "
#~ "through import system :ref:`finders "
#~ "<finders-and-loaders>`.  To find a "
#~ "distribution package's metadata, "
#~ "``importlib.metadata`` queries the list of "
#~ ":term:`meta path finders <meta path "
#~ "finder>` on :data:`sys.meta_path`."
#~ msgstr ""

#~ msgid ""
#~ "The default ``PathFinder`` for Python "
#~ "includes a hook that calls into "
#~ "``importlib.metadata.MetadataPathFinder`` for finding "
#~ "distributions loaded from typical file-"
#~ "system-based paths."
#~ msgstr ""

