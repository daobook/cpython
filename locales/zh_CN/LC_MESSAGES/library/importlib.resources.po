# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2022, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2022.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.11\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-01-16 17:17+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.0\n"

#: ../../library/importlib.resources.rst:2
msgid ":mod:`importlib.resources` -- Resources"
msgstr ""

#: ../../library/importlib.resources.rst:7
msgid "**Source code:** :source:`Lib/importlib/resources.py`"
msgstr ""

#: ../../library/importlib.resources.rst:13
msgid ""
"This module leverages Python's import system to provide access to "
"*resources* within *packages*.  If you can import a package, you can "
"access resources within that package.  Resources can be opened or read, "
"in either binary or text mode."
msgstr ""
"这个模块利用 Python 的导入系统来提供对包内资源的访问。"
"如果您可以导入一个包，那么您就可以访问该包中的资源。资源可以以二进制或文本模式打开或读取。"

#: ../../library/importlib.resources.rst:18
msgid ""
"Resources are roughly akin to files inside directories, though it's "
"important to keep in mind that this is just a metaphor.  Resources and "
"packages **do not** have to exist as physical files and directories on "
"the file system."
msgstr ""
"资源大致上类似于目录中的文件，但重要的是要记住这只是一个比喻。资源和包 **不** 必须以物理文件和目录的形式存在于文件系统中。"

#: ../../library/importlib.resources.rst:24
msgid ""
"This module provides functionality similar to `pkg_resources "
"<https://setuptools.readthedocs.io/en/latest/pkg_resources.html>`_ `Basic"
" Resource Access "
"<http://setuptools.readthedocs.io/en/latest/pkg_resources.html#basic-"
"resource-access>`_ without the performance overhead of that package.  "
"This makes reading resources included in packages easier, with more "
"stable and consistent semantics."
msgstr ""
"这个模块提供了类似于 `pkg_resources <https://setuptools.readthedocs.io/en/latest/pkg_resources.html>`_ "
"`基本资源访问 <http://setuptools.readthedocs.io/en/latest/pkg_resources.html#basic-"
"resource-access>`_ 的功能，而没有该包的性能开销。这使得读取包中包含的资源变得更容易，具有更稳定和一致的语义。"

#: ../../library/importlib.resources.rst:32
msgid ""
"The standalone backport of this module provides more information on "
"`using importlib.resources <http://importlib-"
"resources.readthedocs.io/en/latest/using.html>`_ and `migrating from "
"pkg_resources to importlib.resources <http://importlib-"
"resources.readthedocs.io/en/latest/migration.html>`_ and `migrating "
"legacy usage <https://importlib-"
"resources.readthedocs.io/en/latest/using.html#migrating-from-legacy>`_."
msgstr ""

#: ../../library/importlib.resources.rst:40
msgid ""
"Loaders that wish to support resource reading should implement a "
"``get_resource_reader(fullname)`` method as specified by "
":class:`importlib.abc.ResourceReader`."
msgstr ""
"希望支持资源读取的加载器应该实现 :class:`importlib.abc.ResourceReader` 指定的 ``get_resource_reader(fullname)`` 方法。"

#: ../../library/importlib.resources.rst:44
msgid "The following types are defined."
msgstr "定义了以下类型。"

#: ../../library/importlib.resources.rst:48
msgid ""
"The ``Package`` type is defined as ``Union[str, ModuleType]``.  This "
"means that where the function describes accepting a ``Package``, you can "
"pass in either a string or a module.  Module objects must have a "
"resolvable ``__spec__.submodule_search_locations`` that is not ``None``."
msgstr ""
"``Package`` 的类型定义为 ``Union[str, ModuleType]``。"
"这意味着，在函数描述接受 ``Package`` 的地方，你可以传入一个字符串或一个模块。"
"模块对象必须有一个可解析的 ``__spec__.submodule_search_locations`` ，而不是 ``None``。"

#: ../../library/importlib.resources.rst:55
msgid ""
"This type describes the resource names passed into the various functions "
"in this package.  This is defined as ``Union[str, os.PathLike]``."
msgstr ""
"这种类型描述了传递到这个包中的各种函数中的资源名。它被定义为 ``Union[str, os.PathLike]``。"

#: ../../library/importlib.resources.rst:59
msgid "The following functions are available."
msgstr "提供以下功能。"

#: ../../library/importlib.resources.rst:64
msgid ""
"Returns an :class:`importlib.resources.abc.Traversable` object "
"representing the resource container for the package (think directory) and"
" its resources (think files). A Traversable may contain other containers "
"(think subdirectories)."
msgstr ""
"返回 :class:`importlib.resources.abc.Traversable` 对象表示包（考虑目录）及其资源（考虑文件）的资源容器。"
"可遍历的对象可能包含其他容器（可以考虑子目录）。"

#: ../../library/importlib.resources.rst:69
#: ../../library/importlib.resources.rst:182
msgid ""
"*package* is either a name or a module object which conforms to the "
"``Package`` requirements."
msgstr ""
"*package* 可以是一个符合 ``Package`` 要求的名称，也可以是一个模块对象。"

#: ../../library/importlib.resources.rst:76
msgid ""
"Given a :class:`importlib.resources.abc.Traversable` object representing "
"a file, typically from :func:`importlib.resources.files`, return a "
"context manager for use in a :keyword:`with` statement. The context "
"manager provides a :class:`pathlib.Path` object."
msgstr ""
"鉴于 :class:`importlib.resources.abc.Traversable` 对象，通常来自 :func:`importlib.resources.files`，"
"返回一个上下文管理器，用于 :keyword:`with` 语句。上下文管理器提供了  :class:`pathlib.Path`  的对象。"

#: ../../library/importlib.resources.rst:81
msgid ""
"Exiting the context manager cleans up any temporary file created when the"
" resource was extracted from e.g. a zip file."
msgstr ""
"退出上下文管理器会清除资源提取时创建的任何临时文件，例如 zip 文件。"

#: ../../library/importlib.resources.rst:84
msgid ""
"Use ``as_file`` when the Traversable methods (``read_text``, etc) are "
"insufficient and an actual file on the file system is required."
msgstr ""
"当 Traversable 方法（``read_text`` 等）不足且需要文件系统上的实际文件时，使用 ``as_file``。"

#: ../../library/importlib.resources.rst:92
msgid "Open for binary reading the *resource* within *package*."
msgstr "打开用于二进制读取 *package* 中的 *resource*。"

#: ../../library/importlib.resources.rst:94
msgid ""
"*package* is either a name or a module object which conforms to the "
"``Package`` requirements.  *resource* is the name of the resource to open"
" within *package*; it may not contain path separators and it may not have"
" sub-resources (i.e. it cannot be a directory).  This function returns a "
"``typing.BinaryIO`` instance, a binary I/O stream open for reading."
msgstr ""

#: ../../library/importlib.resources.rst:105
msgid ""
"Open for text reading the *resource* within *package*.  By default, the "
"resource is opened for reading as UTF-8."
msgstr ""

#: ../../library/importlib.resources.rst:108
msgid ""
"*package* is either a name or a module object which conforms to the "
"``Package`` requirements.  *resource* is the name of the resource to open"
" within *package*; it may not contain path separators and it may not have"
" sub-resources (i.e. it cannot be a directory).  *encoding* and *errors* "
"have the same meaning as with built-in :func:`open`."
msgstr ""

#: ../../library/importlib.resources.rst:114
msgid ""
"This function returns a ``typing.TextIO`` instance, a text I/O stream "
"open for reading."
msgstr ""

#: ../../library/importlib.resources.rst:122
msgid ""
"Read and return the contents of the *resource* within *package* as "
"``bytes``."
msgstr ""

#: ../../library/importlib.resources.rst:125
msgid ""
"*package* is either a name or a module object which conforms to the "
"``Package`` requirements.  *resource* is the name of the resource to open"
" within *package*; it may not contain path separators and it may not have"
" sub-resources (i.e. it cannot be a directory).  This function returns "
"the contents of the resource as :class:`bytes`."
msgstr ""

#: ../../library/importlib.resources.rst:136
msgid ""
"Read and return the contents of *resource* within *package* as a ``str``."
" By default, the contents are read as strict UTF-8."
msgstr ""

#: ../../library/importlib.resources.rst:139
msgid ""
"*package* is either a name or a module object which conforms to the "
"``Package`` requirements.  *resource* is the name of the resource to open"
" within *package*; it may not contain path separators and it may not have"
" sub-resources (i.e. it cannot be a directory).  *encoding* and *errors* "
"have the same meaning as with built-in :func:`open`.  This function "
"returns the contents of the resource as :class:`str`."
msgstr ""

#: ../../library/importlib.resources.rst:151
msgid ""
"Return the path to the *resource* as an actual file system path.  This "
"function returns a context manager for use in a :keyword:`with` "
"statement. The context manager provides a :class:`pathlib.Path` object."
msgstr ""

#: ../../library/importlib.resources.rst:155
msgid ""
"Exiting the context manager cleans up any temporary file created when the"
" resource needs to be extracted from e.g. a zip file."
msgstr ""

#: ../../library/importlib.resources.rst:158
msgid ""
"*package* is either a name or a module object which conforms to the "
"``Package`` requirements.  *resource* is the name of the resource to open"
" within *package*; it may not contain path separators and it may not have"
" sub-resources (i.e. it cannot be a directory)."
msgstr ""

#: ../../library/importlib.resources.rst:168
msgid ""
"Return ``True`` if there is a resource named *name* in the package, "
"otherwise ``False``.  Remember that directories are *not* resources! "
"*package* is either a name or a module object which conforms to the "
"``Package`` requirements."
msgstr ""

#: ../../library/importlib.resources.rst:178
msgid ""
"Return an iterable over the named items within the package.  The iterable"
" returns :class:`str` resources (e.g. files) and non-resources (e.g. "
"directories).  The iterable does not recurse into subdirectories."
msgstr ""

