# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2021, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2021.
#
# Translators:
# Freesand Leo <yuqinju@163.com>, 2021
# ppcfish <ppcfish@gmail.com>, 2021
# stone jing <stonejing1817@gmail.com>, 2021
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.10\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-06-23 10:34+0800\n"
"PO-Revision-Date: 2021-06-28 00:50+0000\n"
"Last-Translator: stone jing <stonejing1817@gmail.com>, 2021\n"
"Language: zh_CN\n"
"Language-Team: Chinese (China) (https://www.transifex.com/python-"
"doc/teams/5390/zh_CN/)\n"
"Plural-Forms: nplurals=1; plural=0\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.1\n"

#: ../../c-api/type.rst:6
msgid "Type Objects"
msgstr "类型对象"

#: ../../c-api/type.rst:13
msgid "The C structure of the objects used to describe built-in types."
msgstr "对象的 C 结构用于描述 built-in 类型。"

#: ../../c-api/type.rst:18
msgid ""
"This is the type object for type objects; it is the same object as "
":class:`type` in the Python layer."
msgstr "这是属于 type 对象的 type object，它在 Python 层面和 :class:`type` 是相同的对象。"

#: ../../c-api/type.rst:24
msgid ""
"Return non-zero if the object *o* is a type object, including instances "
"of types derived from the standard type object.  Return 0 in all other "
"cases. This function always succeeds."
msgstr ""

#: ../../c-api/type.rst:31
msgid ""
"Return non-zero if the object *o* is a type object, but not a subtype of "
"the standard type object.  Return 0 in all other cases.  This function "
"always succeeds."
msgstr ""

#: ../../c-api/type.rst:38
msgid "Clear the internal lookup cache. Return the current version tag."
msgstr ""

#: ../../c-api/type.rst:42
msgid ""
"Return the :c:member:`~PyTypeObject.tp_flags` member of *type*. This "
"function is primarily meant for use with `Py_LIMITED_API`; the individual"
" flag bits are guaranteed to be stable across Python releases, but access"
" to :c:member:`~PyTypeObject.tp_flags` itself is not part of the limited "
"API."
msgstr ""

#: ../../c-api/type.rst:49
msgid "The return type is now ``unsigned long`` rather than ``long``."
msgstr ""

#: ../../c-api/type.rst:55
msgid ""
"Invalidate the internal lookup cache for the type and all of its "
"subtypes.  This function must be called after any manual modification of "
"the attributes or base classes of the type."
msgstr ""

#: ../../c-api/type.rst:62
msgid ""
"Return non-zero if the type object *o* sets the feature *feature*. Type "
"features are denoted by single bit flags."
msgstr ""

#: ../../c-api/type.rst:68
msgid ""
"Return true if the type object includes support for the cycle detector; "
"this tests the type flag :const:`Py_TPFLAGS_HAVE_GC`."
msgstr ""

#: ../../c-api/type.rst:74
msgid "Return true if *a* is a subtype of *b*."
msgstr ""

#: ../../c-api/type.rst:76
msgid ""
"This function only checks for actual subtypes, which means that "
":meth:`~class.__subclasscheck__` is not called on *b*.  Call "
":c:func:`PyObject_IsSubclass` to do the same check that "
":func:`issubclass` would do."
msgstr ""

#: ../../c-api/type.rst:84
msgid ""
"Generic handler for the :c:member:`~PyTypeObject.tp_alloc` slot of a type"
" object.  Use Python's default memory allocation mechanism to allocate a "
"new instance and initialize all its contents to ``NULL``."
msgstr ""

#: ../../c-api/type.rst:90
msgid ""
"Generic handler for the :c:member:`~PyTypeObject.tp_new` slot of a type "
"object.  Create a new instance using the type's "
":c:member:`~PyTypeObject.tp_alloc` slot."
msgstr ""

#: ../../c-api/type.rst:95
msgid ""
"Finalize a type object.  This should be called on all type objects to "
"finish their initialization.  This function is responsible for adding "
"inherited slots from a type's base class.  Return ``0`` on success, or "
"return ``-1`` and sets an exception on error."
msgstr ""

#: ../../c-api/type.rst:101
msgid ""
"If some of the base classes implements the GC protocol and the provided "
"type does not include the :const:`Py_TPFLAGS_HAVE_GC` in its flags, then "
"the GC protocol will be automatically implemented from its parents. On "
"the contrary, if the type being created does include "
":const:`Py_TPFLAGS_HAVE_GC` in its flags then it **must** implement the "
"GC protocol itself by at least implementing the "
":c:member:`~PyTypeObject.tp_traverse` handle."
msgstr ""

#: ../../c-api/type.rst:111
msgid ""
"Return the type's name. Equivalent to getting the type's ``__name__`` "
"attribute."
msgstr ""

#: ../../c-api/type.rst:117
msgid ""
"Return the type's qualified name. Equivalent to getting the type's "
"``__qualname__`` attribute."
msgstr ""

#: ../../c-api/type.rst:124
msgid ""
"Return the function pointer stored in the given slot. If the result is "
"``NULL``, this indicates that either the slot is ``NULL``, or that the "
"function was called with invalid parameters. Callers will typically cast "
"the result pointer into the appropriate function type."
msgstr ""

#: ../../c-api/type.rst:130
msgid ""
"See :c:member:`PyType_Slot.slot` for possible values of the *slot* "
"argument."
msgstr ""

#: ../../c-api/type.rst:134
msgid ""
":c:func:`PyType_GetSlot` can now accept all types. Previously, it was "
"limited to :ref:`heap types <heap-types>`."
msgstr ""

#: ../../c-api/type.rst:140
msgid ""
"Return the module object associated with the given type when the type was"
" created using :c:func:`PyType_FromModuleAndSpec`."
msgstr ""

#: ../../c-api/type.rst:143 ../../c-api/type.rst:163
msgid ""
"If no module is associated with the given type, sets "
":py:class:`TypeError` and returns ``NULL``."
msgstr ""

#: ../../c-api/type.rst:146
msgid ""
"This function is usually used to get the module in which a method is "
"defined. Note that in such a method, ``PyType_GetModule(Py_TYPE(self))`` "
"may not return the intended result. ``Py_TYPE(self)`` may be a *subclass*"
" of the intended class, and subclasses are not necessarily defined in the"
" same module as their superclass. See :c:type:`PyCMethod` to get the "
"class that defines the method. See :c:func:`PyType_GetModuleByDef` for "
"cases when ``PyCMethod`` cannot be used."
msgstr ""

#: ../../c-api/type.rst:159
msgid ""
"Return the state of the module object associated with the given type. "
"This is a shortcut for calling :c:func:`PyModule_GetState()` on the "
"result of :c:func:`PyType_GetModule`."
msgstr ""

#: ../../c-api/type.rst:166
msgid ""
"If the *type* has an associated module but its state is ``NULL``, returns"
" ``NULL`` without setting an exception."
msgstr ""

#: ../../c-api/type.rst:173
msgid ""
"Find the first superclass whose module was created from the given "
":c:type:`PyModuleDef` *def*, and return that module."
msgstr ""

#: ../../c-api/type.rst:176
msgid ""
"If no module is found, raises a :py:class:`TypeError` and returns "
"``NULL``."
msgstr ""

#: ../../c-api/type.rst:178
msgid ""
"This function is intended to be used together with "
":c:func:`PyModule_GetState()` to get module state from slot methods (such"
" as :c:member:`~PyTypeObject.tp_init` or "
":c:member:`~PyNumberMethods.nb_add`) and other places where a method's "
"defining class cannot be passed using the :c:type:`PyCMethod` calling "
"convention."
msgstr ""

#: ../../c-api/type.rst:188
msgid "Creating Heap-Allocated Types"
msgstr ""

#: ../../c-api/type.rst:190
msgid ""
"The following functions and structs are used to create :ref:`heap types "
"<heap-types>`."
msgstr ""

#: ../../c-api/type.rst:195
msgid ""
"Create and return a :ref:`heap type <heap-types>` from the *spec* (see "
":const:`Py_TPFLAGS_HEAPTYPE`)."
msgstr ""

#: ../../c-api/type.rst:198
msgid ""
"The metaclass *metaclass* is used to construct the resulting type object."
" When *metaclass* is ``NULL``, the metaclass is derived from *bases* (or "
"*Py_tp_base[s]* slots if *bases* is ``NULL``, see below). Note that "
"metaclasses that override :c:member:`~PyTypeObject.tp_new` are not "
"supported."
msgstr ""

#: ../../c-api/type.rst:204
msgid ""
"The *bases* argument can be used to specify base classes; it can either "
"be only one class or a tuple of classes. If *bases* is ``NULL``, the "
"*Py_tp_bases* slot is used instead. If that also is ``NULL``, the "
"*Py_tp_base* slot is used instead. If that also is ``NULL``, the new type"
" derives from :class:`object`."
msgstr ""

#: ../../c-api/type.rst:210
msgid ""
"The *module* argument can be used to record the module in which the new "
"class is defined. It must be a module object or ``NULL``. If not "
"``NULL``, the module is associated with the new type and can later be "
"retrieved with :c:func:`PyType_GetModule`. The associated module is not "
"inherited by subclasses; it must be specified for each class "
"individually."
msgstr ""

#: ../../c-api/type.rst:217
msgid "This function calls :c:func:`PyType_Ready` on the new type."
msgstr ""

#: ../../c-api/type.rst:219
msgid ""
"Note that this function does *not* fully match the behavior of calling "
":py:class:`type() <type>` or using the :keyword:`class` statement. With "
"user-provided base types or metaclasses, prefer :ref:`calling <capi-"
"call>` :py:class:`type` (or the metaclass) over ``PyType_From*`` "
"functions. Specifically:"
msgstr ""

#: ../../c-api/type.rst:226
msgid ""
":py:meth:`~object.__new__` is not called on the new class (and it must be"
" set to ``type.__new__``)."
msgstr ""

#: ../../c-api/type.rst:228
msgid ":py:meth:`~object.__init__` is not called on the new class."
msgstr ""

#: ../../c-api/type.rst:229
msgid ":py:meth:`~object.__init_subclass__` is not called on any bases."
msgstr ""

#: ../../c-api/type.rst:230
msgid ":py:meth:`~object.__set_name__` is not called on new descriptors."
msgstr ""

#: ../../c-api/type.rst:236
msgid "Equivalent to ``PyType_FromMetaclass(NULL, module, spec, bases)``."
msgstr ""

#: ../../c-api/type.rst:242
msgid ""
"The function now accepts a single class as the *bases* argument and "
"``NULL`` as the ``tp_doc`` slot."
msgstr ""

#: ../../c-api/type.rst:247 ../../c-api/type.rst:259
msgid ""
"The function now finds and uses a metaclass corresponding to the provided"
" base classes.  Previously, only :class:`type` instances were returned."
msgstr ""

#: ../../c-api/type.rst:253
msgid "Equivalent to ``PyType_FromMetaclass(NULL, NULL, spec, bases)``."
msgstr ""

#: ../../c-api/type.rst:264
msgid "Equivalent to ``PyType_FromMetaclass(NULL, NULL, spec, NULL)``."
msgstr ""

#: ../../c-api/type.rst:268
msgid ""
"The function now finds and uses a metaclass corresponding to the base "
"classes provided in *Py_tp_base[s]* slots. Previously, only :class:`type`"
" instances were returned."
msgstr ""

#: ../../c-api/type.rst:274
msgid "Structure defining a type's behavior."
msgstr ""

#: ../../c-api/type.rst:278
msgid "Name of the type, used to set :c:member:`PyTypeObject.tp_name`."
msgstr ""

#: ../../c-api/type.rst:283
msgid ""
"Size of the instance in bytes, used to set "
":c:member:`PyTypeObject.tp_basicsize` and "
":c:member:`PyTypeObject.tp_itemsize`."
msgstr ""

#: ../../c-api/type.rst:289
msgid "Type flags, used to set :c:member:`PyTypeObject.tp_flags`."
msgstr ""

#: ../../c-api/type.rst:291
msgid ""
"If the ``Py_TPFLAGS_HEAPTYPE`` flag is not set, "
":c:func:`PyType_FromSpecWithBases` sets it automatically."
msgstr ""

#: ../../c-api/type.rst:296
msgid ""
"Array of :c:type:`PyType_Slot` structures. Terminated by the special slot"
" value ``{0, NULL}``."
msgstr ""

#: ../../c-api/type.rst:299
msgid "Each slot ID should be specified at most once."
msgstr ""

#: ../../c-api/type.rst:303
msgid ""
"Structure defining optional functionality of a type, containing a slot ID"
" and a value pointer."
msgstr ""

#: ../../c-api/type.rst:308
msgid "A slot ID."
msgstr ""

#: ../../c-api/type.rst:310
msgid ""
"Slot IDs are named like the field names of the structures "
":c:type:`PyTypeObject`, :c:type:`PyNumberMethods`, "
":c:type:`PySequenceMethods`, :c:type:`PyMappingMethods` and "
":c:type:`PyAsyncMethods` with an added ``Py_`` prefix. For example, use:"
msgstr ""

#: ../../c-api/type.rst:316
msgid "``Py_tp_dealloc`` to set :c:member:`PyTypeObject.tp_dealloc`"
msgstr ""

#: ../../c-api/type.rst:317
msgid "``Py_nb_add`` to set :c:member:`PyNumberMethods.nb_add`"
msgstr ""

#: ../../c-api/type.rst:318
msgid "``Py_sq_length`` to set :c:member:`PySequenceMethods.sq_length`"
msgstr ""

#: ../../c-api/type.rst:320
msgid ""
"The following fields cannot be set at all using :c:type:`PyType_Spec` and"
" :c:type:`PyType_Slot`:"
msgstr ""

#: ../../c-api/type.rst:323
msgid ":c:member:`~PyTypeObject.tp_dict`"
msgstr ":c:member:`~PyTypeObject.tp_dict`"

#: ../../c-api/type.rst:324
msgid ":c:member:`~PyTypeObject.tp_mro`"
msgstr ""

#: ../../c-api/type.rst:325
msgid ":c:member:`~PyTypeObject.tp_cache`"
msgstr ""

#: ../../c-api/type.rst:326
msgid ":c:member:`~PyTypeObject.tp_subclasses`"
msgstr ""

#: ../../c-api/type.rst:327
msgid ":c:member:`~PyTypeObject.tp_weaklist`"
msgstr ""

#: ../../c-api/type.rst:328
msgid ":c:member:`~PyTypeObject.tp_vectorcall`"
msgstr ""

#: ../../c-api/type.rst:329
msgid ""
":c:member:`~PyTypeObject.tp_weaklistoffset` (see :ref:`PyMemberDef "
"<pymemberdef-offsets>`)"
msgstr ""

#: ../../c-api/type.rst:331
msgid ""
":c:member:`~PyTypeObject.tp_dictoffset` (see :ref:`PyMemberDef "
"<pymemberdef-offsets>`)"
msgstr ""

#: ../../c-api/type.rst:333
msgid ""
":c:member:`~PyTypeObject.tp_vectorcall_offset` (see :ref:`PyMemberDef "
"<pymemberdef-offsets>`)"
msgstr ""

#: ../../c-api/type.rst:336
msgid ""
"Setting :c:data:`Py_tp_bases` or :c:data:`Py_tp_base` may be problematic "
"on some platforms. To avoid issues, use the *bases* argument of "
":py:func:`PyType_FromSpecWithBases` instead."
msgstr ""

#: ../../c-api/type.rst:343
msgid "Slots in :c:type:`PyBufferProcs` may be set in the unlimited API."
msgstr ""

#: ../../c-api/type.rst:345
msgid ""
":c:member:`~PyBufferProcs.bf_getbuffer` and "
":c:member:`~PyBufferProcs.bf_releasebuffer` are now available under the "
"limited API."
msgstr ""

#: ../../c-api/type.rst:352
msgid ""
"The desired value of the slot. In most cases, this is a pointer to a "
"function."
msgstr ""

#: ../../c-api/type.rst:355
msgid "Slots other than ``Py_tp_doc`` may not be ``NULL``."
msgstr ""

#~ msgid ""
#~ "The *module* argument can be used "
#~ "to record the module in which the"
#~ " new class is defined. It must "
#~ "be a module object or ``NULL``. If"
#~ " not ``NULL``, the module is "
#~ "associated with the new type and "
#~ "can later be retreived with "
#~ ":c:func:`PyType_GetModule`. The associated module"
#~ " is not inherited by subclasses; it"
#~ " must be specified for each class "
#~ "individually."
#~ msgstr ""

#~ msgid ""
#~ "This function is usually used to "
#~ "get the module in which a method"
#~ " is defined. Note that in such "
#~ "a method, ``PyType_GetModule(Py_TYPE(self))`` may"
#~ " not return the intended result. "
#~ "``Py_TYPE(self)`` may be a *subclass* of"
#~ " the intended class, and subclasses "
#~ "are not necessarily defined in the "
#~ "same module as their superclass. See "
#~ ":c:type:`PyCMethod` to get the class "
#~ "that defines the method."
#~ msgstr ""

#~ msgid ""
#~ "The following fields cannot be set "
#~ "using :c:type:`PyType_Spec` and "
#~ ":c:type:`PyType_Slot` under the limited API:"
#~ msgstr ""

#~ msgid ":c:member:`~PyBufferProcs.bf_getbuffer`"
#~ msgstr ":c:member:`~PyBufferProcs.bf_getbuffer`"

#~ msgid ":c:member:`~PyBufferProcs.bf_releasebuffer`"
#~ msgstr ":c:member:`~PyBufferProcs.bf_releasebuffer`"

#~ msgid "Slots in :c:type:`PyBufferProcs` in may be set in the unlimited API."
#~ msgstr ""

#~ msgid ""
#~ ":c:member:`~PyBufferProcs.bf_getbuffer` and "
#~ ":c:member:`~PyBufferProcs.bf_releasebuffer` are now "
#~ "available under limited API."
#~ msgstr ""

#~ msgid ""
#~ "Creates and returns a :ref:`heap type"
#~ " <heap-types>` from the *spec* "
#~ "(:const:`Py_TPFLAGS_HEAPTYPE`)."
#~ msgstr ""

#~ msgid "Equivalent to ``PyType_FromModuleAndSpec(NULL, spec, bases)``."
#~ msgstr ""

#~ msgid "Equivalent to ``PyType_FromSpecWithBases(spec, NULL)``."
#~ msgstr ""

