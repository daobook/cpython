# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2021, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
# Translators:
# dannyvi <dannyvis@icloud.com>, 2021
# Freesand Leo <yuqinju@163.com>, 2021
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.10\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-06-29 12:56+0000\n"
"PO-Revision-Date: 2021-06-28 00:49+0000\n"
"Last-Translator: Freesand Leo <yuqinju@163.com>, 2021\n"
"Language-Team: Chinese (China) (https://www.transifex.com/python-doc/teams/5390/zh_CN/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: zh_CN\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../c-api/iter.rst:6
msgid "Iterator Protocol"
msgstr "迭代器协议"

#: ../../c-api/iter.rst:8
msgid "There are two functions specifically for working with iterators."
msgstr "迭代器有两个函数。"

#: ../../c-api/iter.rst:12
msgid ""
"Return non-zero if the object *o* supports the iterator protocol, and ``0`` "
"otherwise.  This function always succeeds."
msgstr "如果对象 *o* 支持迭代器协议则返回非零值，否则返回 ``0``。 此函数总是会成功执行。"

#: ../../c-api/iter.rst:17
msgid ""
"Returns non-zero if the object 'obj' provides :class:`AsyncIterator` "
"protocols, and ``0`` otherwise.  This function always succeeds."
msgstr ""
"如果对象 'obj' 提供了 :class:`AsyncIterator` 协议则返回非零值，否则返回 ``0``。 此函数总是会成功执行。"

#: ../../c-api/iter.rst:24
msgid ""
"Return the next value from the iteration *o*.  The object must be an "
"iterator (it is up to the caller to check this).  If there are no remaining "
"values, returns ``NULL`` with no exception set.  If an error occurs while "
"retrieving the item, returns ``NULL`` and passes along the exception."
msgstr ""
"返回迭代 *o* 的下一个值。 对象必须是一个迭代器（这应由调用者来判断）。 如果没有余下的值，则返回 ``NULL`` 并且不设置异常。 "
"如果在获取条目时发生了错误，则返回 ``NULL`` 并且传递异常。"

#: ../../c-api/iter.rst:29
msgid ""
"To write a loop which iterates over an iterator, the C code should look "
"something like this::"
msgstr "要为迭代器编写一个一个循环，C代码应该看起来像这样 ::"

#: ../../c-api/iter.rst:58
msgid ""
"The enum value used to represent different results of :c:func:`PyIter_Send`."
msgstr "用于代表 :c:func:`PyIter_Send` 的不同结果的枚举值。"

#: ../../c-api/iter.rst:65
msgid "Sends the *arg* value into the iterator *iter*. Returns:"
msgstr "将 *arg* 值发送到迭代器 *iter*。 返回:"

#: ../../c-api/iter.rst:67
msgid ""
"``PYGEN_RETURN`` if iterator returns. Return value is returned via "
"*presult*."
msgstr "``PYGEN_RETURN``，如果迭代器返回的话。 返回值会通过 *presult* 来返回。"

#: ../../c-api/iter.rst:68
msgid ""
"``PYGEN_NEXT`` if iterator yields. Yielded value is returned via *presult*."
msgstr "``PYGEN_NEXT``，如果迭代器生成值的话。 生成的值会通过 *presult* 来返回。"

#: ../../c-api/iter.rst:69
msgid ""
"``PYGEN_ERROR`` if iterator has raised and exception. *presult* is set to "
"``NULL``."
msgstr "``PYGEN_ERROR``，如果迭代器引发异常的话。  *presult* 会被设为 ``NULL``。"
