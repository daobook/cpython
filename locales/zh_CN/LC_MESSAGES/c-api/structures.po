# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2021, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2021.
#
# Translators:
# ppcfish <ppcfish@gmail.com>, 2021
# Iterator <xicheng.li@ucdconnect.ie>, 2021
# Fw[a]rd <howard.main@outlook.com>, 2021
# Freesand Leo <yuqinju@163.com>, 2021
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.10\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-04-29 14:49+0800\n"
"PO-Revision-Date: 2021-06-28 00:50+0000\n"
"Last-Translator: Freesand Leo <yuqinju@163.com>, 2021\n"
"Language: zh_CN\n"
"Language-Team: Chinese (China) (https://www.transifex.com/python-"
"doc/teams/5390/zh_CN/)\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.10.1\n"

#: ../../c-api/structures.rst:6
msgid "Common Object Structures"
msgstr "公用对象的结构"

#: ../../c-api/structures.rst:8
msgid ""
"There are a large number of structures which are used in the definition "
"of object types for Python.  This section describes these structures and "
"how they are used."
msgstr "大量的结构体被用于定义Python的对象类型。这一节描述了这些的结构体和它们的使用方法。"

#: ../../c-api/structures.rst:14
msgid "Base object types and macros"
msgstr "基本的对象类型和宏"

#: ../../c-api/structures.rst:16
msgid ""
"All Python objects ultimately share a small number of fields at the "
"beginning of the object's representation in memory.  These are "
"represented by the :c:type:`PyObject` and :c:type:`PyVarObject` types, "
"which are defined, in turn, by the expansions of some macros also used, "
"whether directly or indirectly, in the definition of all other Python "
"objects."
msgstr ""
"所有的 Python 对象都在对象的内存表示的开始部分共享少量的字段。 这些字段用 :c:type:`PyObject` 或 "
":c:type:`PyVarObject` 类型来表示，这些类型又由一些宏定义，这些宏也直接或间接地用于所有其他 Python 对象的定义。"

#: ../../c-api/structures.rst:25
msgid ""
"All object types are extensions of this type.  This is a type which "
"contains the information Python needs to treat a pointer to an object as "
"an object.  In a normal \"release\" build, it contains only the object's "
"reference count and a pointer to the corresponding type object. Nothing "
"is actually declared to be a :c:type:`PyObject`, but every pointer to a "
"Python object can be cast to a :c:type:`PyObject*`.  Access to the "
"members must be done by using the macros :c:macro:`Py_REFCNT` and "
":c:macro:`Py_TYPE`."
msgstr ""

#: ../../c-api/structures.rst:37
msgid ""
"This is an extension of :c:type:`PyObject` that adds the :attr:`ob_size` "
"field.  This is only used for objects that have some notion of *length*. "
"This type does not often appear in the Python/C API. Access to the "
"members must be done by using the macros :c:macro:`Py_REFCNT`, "
":c:macro:`Py_TYPE`, and :c:macro:`Py_SIZE`."
msgstr ""

#: ../../c-api/structures.rst:46
msgid ""
"This is a macro used when declaring new types which represent objects "
"without a varying length.  The PyObject_HEAD macro expands to::"
msgstr ""

#: ../../c-api/structures.rst:51
msgid "See documentation of :c:type:`PyObject` above."
msgstr ""

#: ../../c-api/structures.rst:56
msgid ""
"This is a macro used when declaring new types which represent objects "
"with a length that varies from instance to instance. The "
"PyObject_VAR_HEAD macro expands to::"
msgstr ""

#: ../../c-api/structures.rst:62
msgid "See documentation of :c:type:`PyVarObject` above."
msgstr ""

#: ../../c-api/structures.rst:67
msgid ""
"Test if the *x* object is the *y* object, the same as ``x is y`` in "
"Python."
msgstr ""

#: ../../c-api/structures.rst:74
msgid ""
"Test if an object is the ``None`` singleton, the same as ``x is None`` in"
" Python."
msgstr ""

#: ../../c-api/structures.rst:82
msgid ""
"Test if an object is the ``True`` singleton, the same as ``x is True`` in"
" Python."
msgstr ""

#: ../../c-api/structures.rst:90
msgid ""
"Test if an object is the ``False`` singleton, the same as ``x is False`` "
"in Python."
msgstr ""

#: ../../c-api/structures.rst:98
msgid "Get the type of the Python object *o*."
msgstr ""

#: ../../c-api/structures.rst:100
msgid "Return a :term:`borrowed reference`."
msgstr ""

#: ../../c-api/structures.rst:102
msgid "Use the :c:func:`Py_SET_TYPE` function to set an object type."
msgstr ""

#: ../../c-api/structures.rst:104
msgid ""
":c:func:`Py_TYPE()` is changed to an inline static function. The "
"parameter type is no longer :c:type:`const PyObject*`."
msgstr ""

#: ../../c-api/structures.rst:111
msgid ""
"Return non-zero if the object *o* type is *type*. Return zero otherwise. "
"Equivalent to: ``Py_TYPE(o) == type``."
msgstr ""

#: ../../c-api/structures.rst:119
msgid "Set the object *o* type to *type*."
msgstr ""

#: ../../c-api/structures.rst:126
msgid "Get the reference count of the Python object *o*."
msgstr ""

#: ../../c-api/structures.rst:128
msgid ""
"Use the :c:func:`Py_SET_REFCNT()` function to set an object reference "
"count."
msgstr ""

#: ../../c-api/structures.rst:130
msgid "The parameter type is no longer :c:type:`const PyObject*`."
msgstr ""

#: ../../c-api/structures.rst:133
msgid ":c:func:`Py_REFCNT()` is changed to the inline static function."
msgstr ""

#: ../../c-api/structures.rst:139
msgid "Set the object *o* reference counter to *refcnt*."
msgstr ""

#: ../../c-api/structures.rst:146
msgid "Get the size of the Python object *o*."
msgstr ""

#: ../../c-api/structures.rst:148
msgid "Use the :c:func:`Py_SET_SIZE` function to set an object size."
msgstr ""

#: ../../c-api/structures.rst:150
msgid ""
":c:func:`Py_SIZE()` is changed to an inline static function. The "
"parameter type is no longer :c:type:`const PyVarObject*`."
msgstr ""

#: ../../c-api/structures.rst:157
msgid "Set the object *o* size to *size*."
msgstr ""

#: ../../c-api/structures.rst:164
msgid ""
"This is a macro which expands to initialization values for a new "
":c:type:`PyObject` type.  This macro expands to::"
msgstr ""

#: ../../c-api/structures.rst:173
msgid ""
"This is a macro which expands to initialization values for a new "
":c:type:`PyVarObject` type, including the :attr:`ob_size` field. This "
"macro expands to::"
msgstr ""

#: ../../c-api/structures.rst:182
msgid "Implementing functions and methods"
msgstr ""

#: ../../c-api/structures.rst:186
msgid ""
"Type of the functions used to implement most Python callables in C. "
"Functions of this type take two :c:type:`PyObject*` parameters and return"
" one such value.  If the return value is ``NULL``, an exception shall "
"have been set.  If not ``NULL``, the return value is interpreted as the "
"return value of the function as exposed in Python.  The function must "
"return a new reference."
msgstr ""

#: ../../c-api/structures.rst:193
msgid "The function signature is::"
msgstr ""

#: ../../c-api/structures.rst:200
msgid ""
"Type of the functions used to implement Python callables in C with "
"signature :const:`METH_VARARGS | METH_KEYWORDS`. The function signature "
"is::"
msgstr ""

#: ../../c-api/structures.rst:211
msgid ""
"Type of the functions used to implement Python callables in C with "
"signature :const:`METH_FASTCALL`. The function signature is::"
msgstr ""

#: ../../c-api/structures.rst:221
msgid ""
"Type of the functions used to implement Python callables in C with "
"signature :const:`METH_FASTCALL | METH_KEYWORDS`. The function signature "
"is::"
msgstr ""

#: ../../c-api/structures.rst:232
msgid ""
"Type of the functions used to implement Python callables in C with "
"signature :const:`METH_METHOD | METH_FASTCALL | METH_KEYWORDS`. The "
"function signature is::"
msgstr ""

#: ../../c-api/structures.rst:247
msgid ""
"Structure used to describe a method of an extension type.  This structure"
" has four fields:"
msgstr ""

#: ../../c-api/structures.rst:251 ../../c-api/structures.rst:412
#: ../../c-api/structures.rst:508
msgid "Field"
msgstr "域"

#: ../../c-api/structures.rst:251 ../../c-api/structures.rst:412
#: ../../c-api/structures.rst:508
msgid "C Type"
msgstr "C 类型"

#: ../../c-api/structures.rst:251 ../../c-api/structures.rst:412
#: ../../c-api/structures.rst:508
msgid "Meaning"
msgstr "含意"

#: ../../c-api/structures.rst:253
msgid ":attr:`ml_name`"
msgstr ":attr:`ml_name`"

#: ../../c-api/structures.rst:253 ../../c-api/structures.rst:261
#: ../../c-api/structures.rst:414 ../../c-api/structures.rst:427
#: ../../c-api/structures.rst:443 ../../c-api/structures.rst:510
#: ../../c-api/structures.rst:518
msgid "const char \\*"
msgstr ""

#: ../../c-api/structures.rst:253
msgid "name of the method"
msgstr ""

#: ../../c-api/structures.rst:255
msgid ":attr:`ml_meth`"
msgstr ":attr:`ml_meth`"

#: ../../c-api/structures.rst:255
msgid "PyCFunction"
msgstr ""

#: ../../c-api/structures.rst:255
msgid "pointer to the C implementation"
msgstr ""

#: ../../c-api/structures.rst:258
msgid ":attr:`ml_flags`"
msgstr ""

#: ../../c-api/structures.rst:258 ../../c-api/structures.rst:416
#: ../../c-api/structures.rst:423 ../../c-api/structures.rst:439
msgid "int"
msgstr "int"

#: ../../c-api/structures.rst:258
msgid "flag bits indicating how the call should be constructed"
msgstr ""

#: ../../c-api/structures.rst:261
msgid ":attr:`ml_doc`"
msgstr ":attr:`ml_doc`"

#: ../../c-api/structures.rst:261 ../../c-api/structures.rst:427
msgid "points to the contents of the docstring"
msgstr ""

#: ../../c-api/structures.rst:265
msgid ""
"The :attr:`ml_meth` is a C function pointer.  The functions may be of "
"different types, but they always return :c:type:`PyObject*`.  If the "
"function is not of the :c:type:`PyCFunction`, the compiler will require a"
" cast in the method table. Even though :c:type:`PyCFunction` defines the "
"first parameter as :c:type:`PyObject*`, it is common that the method "
"implementation uses the specific C type of the *self* object."
msgstr ""

#: ../../c-api/structures.rst:272
msgid ""
"The :attr:`ml_flags` field is a bitfield which can include the following "
"flags. The individual flags indicate either a calling convention or a "
"binding convention."
msgstr ""

#: ../../c-api/structures.rst:276
msgid "There are these calling conventions:"
msgstr ""

#: ../../c-api/structures.rst:280
msgid ""
"This is the typical calling convention, where the methods have the type "
":c:type:`PyCFunction`. The function expects two :c:type:`PyObject*` "
"values. The first one is the *self* object for methods; for module "
"functions, it is the module object.  The second parameter (often called "
"*args*) is a tuple object representing all arguments. This parameter is "
"typically processed using :c:func:`PyArg_ParseTuple` or "
":c:func:`PyArg_UnpackTuple`."
msgstr ""

#: ../../c-api/structures.rst:290
msgid ""
"Methods with these flags must be of type "
":c:type:`PyCFunctionWithKeywords`. The function expects three parameters:"
" *self*, *args*, *kwargs* where *kwargs* is a dictionary of all the "
"keyword arguments or possibly ``NULL`` if there are no keyword arguments."
"  The parameters are typically processed using "
":c:func:`PyArg_ParseTupleAndKeywords`."
msgstr ""

#: ../../c-api/structures.rst:299
msgid ""
"Fast calling convention supporting only positional arguments. The methods"
" have the type :c:type:`_PyCFunctionFast`. The first parameter is *self*,"
" the second parameter is a C array of :c:type:`PyObject*` values "
"indicating the arguments and the third parameter is the number of "
"arguments (the length of the array)."
msgstr ""

#: ../../c-api/structures.rst:309
msgid "``METH_FASTCALL`` is now part of the stable ABI."
msgstr ""

#: ../../c-api/structures.rst:314
msgid ""
"Extension of :const:`METH_FASTCALL` supporting also keyword arguments, "
"with methods of type :c:type:`_PyCFunctionFastWithKeywords`. Keyword "
"arguments are passed the same way as in the :ref:`vectorcall protocol "
"<vectorcall>`: there is an additional fourth :c:type:`PyObject*` "
"parameter which is a tuple representing the names of the keyword "
"arguments (which are guaranteed to be strings) or possibly ``NULL`` if "
"there are no keywords.  The values of the keyword arguments are stored in"
" the *args* array, after the positional arguments."
msgstr ""

#: ../../c-api/structures.rst:324
msgid "This is not part of the :ref:`limited API <stable>`."
msgstr ""

#: ../../c-api/structures.rst:331
msgid ""
"Extension of :const:`METH_FASTCALL | METH_KEYWORDS` supporting the "
"*defining class*, that is, the class that contains the method in "
"question. The defining class might be a superclass of ``Py_TYPE(self)``."
msgstr ""

#: ../../c-api/structures.rst:335
msgid ""
"The method needs to be of type :c:type:`PyCMethod`, the same as for "
"``METH_FASTCALL | METH_KEYWORDS`` with ``defining_class`` argument added "
"after ``self``."
msgstr ""

#: ../../c-api/structures.rst:344
msgid ""
"Methods without parameters don't need to check whether arguments are "
"given if they are listed with the :const:`METH_NOARGS` flag.  They need "
"to be of type :c:type:`PyCFunction`.  The first parameter is typically "
"named *self* and will hold a reference to the module or object instance."
"  In all cases the second parameter will be ``NULL``."
msgstr ""

#: ../../c-api/structures.rst:350
msgid ""
"The function must have 2 parameters. Since the second parameter is "
"unused, :c:macro:`Py_UNUSED` can be used to prevent a compiler warning."
msgstr ""

#: ../../c-api/structures.rst:356
msgid ""
"Methods with a single object argument can be listed with the "
":const:`METH_O` flag, instead of invoking :c:func:`PyArg_ParseTuple` with"
" a ``\"O\"`` argument. They have the type :c:type:`PyCFunction`, with the"
" *self* parameter, and a :c:type:`PyObject*` parameter representing the "
"single argument."
msgstr ""

#: ../../c-api/structures.rst:362
msgid ""
"These two constants are not used to indicate the calling convention but "
"the binding when use with methods of classes.  These may not be used for "
"functions defined for modules.  At most one of these flags may be set for"
" any given method."
msgstr ""

#: ../../c-api/structures.rst:372
msgid ""
"The method will be passed the type object as the first parameter rather "
"than an instance of the type.  This is used to create *class methods*, "
"similar to what is created when using the :func:`classmethod` built-in "
"function."
msgstr ""

#: ../../c-api/structures.rst:382
msgid ""
"The method will be passed ``NULL`` as the first parameter rather than an "
"instance of the type.  This is used to create *static methods*, similar "
"to what is created when using the :func:`staticmethod` built-in function."
msgstr ""

#: ../../c-api/structures.rst:386
msgid ""
"One other constant controls whether a method is loaded in place of "
"another definition with the same method name."
msgstr ""

#: ../../c-api/structures.rst:392
msgid ""
"The method will be loaded in place of existing definitions.  Without "
"*METH_COEXIST*, the default is to skip repeated definitions.  Since slot "
"wrappers are loaded before the method table, the existence of a "
"*sq_contains* slot, for example, would generate a wrapped method named "
":meth:`__contains__` and preclude the loading of a corresponding "
"PyCFunction with the same name.  With the flag defined, the PyCFunction "
"will be loaded in place of the wrapper object and will co-exist with the "
"slot.  This is helpful because calls to PyCFunctions are optimized more "
"than wrapper object calls."
msgstr ""

#: ../../c-api/structures.rst:404
msgid "Accessing attributes of extension types"
msgstr ""

#: ../../c-api/structures.rst:408
msgid ""
"Structure which describes an attribute of a type which corresponds to a C"
" struct member.  Its fields are:"
msgstr ""

#: ../../c-api/structures.rst:414
msgid ":attr:`name`"
msgstr ":attr:`name`"

#: ../../c-api/structures.rst:414
msgid "name of the member"
msgstr ""

#: ../../c-api/structures.rst:416
msgid ":attr:`!type`"
msgstr ""

#: ../../c-api/structures.rst:416
msgid "the type of the member in the C struct"
msgstr ""

#: ../../c-api/structures.rst:419
msgid ":attr:`offset`"
msgstr ":attr:`offset`"

#: ../../c-api/structures.rst:419 ../../c-api/structures.rst:455
msgid "Py_ssize_t"
msgstr "Py_ssize_t"

#: ../../c-api/structures.rst:419
msgid "the offset in bytes that the member is located on the type's object struct"
msgstr ""

#: ../../c-api/structures.rst:423
msgid ":attr:`flags`"
msgstr ":attr:`flags`"

#: ../../c-api/structures.rst:423
msgid "flag bits indicating if the field should be read-only or writable"
msgstr ""

#: ../../c-api/structures.rst:427
msgid ":attr:`doc`"
msgstr ":attr:`doc`"

#: ../../c-api/structures.rst:431
msgid ""
":attr:`!type` can be one of many ``T_`` macros corresponding to various C"
" types.  When the member is accessed in Python, it will be converted to "
"the equivalent Python type."
msgstr ""

#: ../../c-api/structures.rst:436
msgid "Macro name"
msgstr ""

#: ../../c-api/structures.rst:436
msgid "C type"
msgstr "C 类型"

#: ../../c-api/structures.rst:438
msgid "T_SHORT"
msgstr "T_SHORT"

#: ../../c-api/structures.rst:438
msgid "short"
msgstr "short"

#: ../../c-api/structures.rst:439
msgid "T_INT"
msgstr "T_INT"

#: ../../c-api/structures.rst:440
msgid "T_LONG"
msgstr "T_LONG"

#: ../../c-api/structures.rst:440
msgid "long"
msgstr "长整型"

#: ../../c-api/structures.rst:441
msgid "T_FLOAT"
msgstr "T_FLOAT"

#: ../../c-api/structures.rst:441
msgid "float"
msgstr "float"

#: ../../c-api/structures.rst:442
msgid "T_DOUBLE"
msgstr "T_DOUBLE"

#: ../../c-api/structures.rst:442
msgid "double"
msgstr "double"

#: ../../c-api/structures.rst:443
msgid "T_STRING"
msgstr "T_STRING"

#: ../../c-api/structures.rst:444
msgid "T_OBJECT"
msgstr "T_OBJECT"

#: ../../c-api/structures.rst:444 ../../c-api/structures.rst:445
msgid "PyObject \\*"
msgstr ""

#: ../../c-api/structures.rst:445
msgid "T_OBJECT_EX"
msgstr "T_OBJECT_EX"

#: ../../c-api/structures.rst:446
msgid "T_CHAR"
msgstr "T_CHAR"

#: ../../c-api/structures.rst:446 ../../c-api/structures.rst:447
#: ../../c-api/structures.rst:452
msgid "char"
msgstr ""

#: ../../c-api/structures.rst:447
msgid "T_BYTE"
msgstr "T_BYTE"

#: ../../c-api/structures.rst:448
msgid "T_UBYTE"
msgstr "T_UBYTE"

#: ../../c-api/structures.rst:448
msgid "unsigned char"
msgstr "unsigned char"

#: ../../c-api/structures.rst:449
msgid "T_UINT"
msgstr "T_UINT"

#: ../../c-api/structures.rst:449
msgid "unsigned int"
msgstr "unsigned int"

#: ../../c-api/structures.rst:450
msgid "T_USHORT"
msgstr "T_USHORT"

#: ../../c-api/structures.rst:450
msgid "unsigned short"
msgstr "unsigned short"

#: ../../c-api/structures.rst:451
msgid "T_ULONG"
msgstr "T_ULONG"

#: ../../c-api/structures.rst:451
msgid "unsigned long"
msgstr "unsigned long"

#: ../../c-api/structures.rst:452
msgid "T_BOOL"
msgstr ""

#: ../../c-api/structures.rst:453
msgid "T_LONGLONG"
msgstr "T_LONGLONG"

#: ../../c-api/structures.rst:453
msgid "long long"
msgstr "long long"

#: ../../c-api/structures.rst:454
msgid "T_ULONGLONG"
msgstr "T_ULONGLONG"

#: ../../c-api/structures.rst:454
msgid "unsigned long long"
msgstr "unsigned long long"

#: ../../c-api/structures.rst:455
msgid "T_PYSSIZET"
msgstr "T_PYSSIZET"

#: ../../c-api/structures.rst:458
msgid ""
":c:macro:`T_OBJECT` and :c:macro:`T_OBJECT_EX` differ in that "
":c:macro:`T_OBJECT` returns ``None`` if the member is ``NULL`` and "
":c:macro:`T_OBJECT_EX` raises an :exc:`AttributeError`.  Try to use "
":c:macro:`T_OBJECT_EX` over :c:macro:`T_OBJECT` because "
":c:macro:`T_OBJECT_EX` handles use of the :keyword:`del` statement on "
"that attribute more correctly than :c:macro:`T_OBJECT`."
msgstr ""

#: ../../c-api/structures.rst:465
msgid ""
":attr:`flags` can be ``0`` for write and read access or "
":c:macro:`READONLY` for read-only access.  Using :c:macro:`T_STRING` for "
":attr:`type` implies :c:macro:`READONLY`.  :c:macro:`T_STRING` data is "
"interpreted as UTF-8. Only :c:macro:`T_OBJECT` and :c:macro:`T_OBJECT_EX`"
" members can be deleted.  (They are set to ``NULL``)."
msgstr ""

#: ../../c-api/structures.rst:473
msgid ""
"Heap allocated types (created using :c:func:`PyType_FromSpec` or "
"similar), ``PyMemberDef`` may contain definitions for the special members"
" ``__dictoffset__``, ``__weaklistoffset__`` and ``__vectorcalloffset__``,"
" corresponding to :c:member:`~PyTypeObject.tp_dictoffset`, "
":c:member:`~PyTypeObject.tp_weaklistoffset` and "
":c:member:`~PyTypeObject.tp_vectorcall_offset` in type objects. These "
"must be defined with ``T_PYSSIZET`` and ``READONLY``, for example::"
msgstr ""

#: ../../c-api/structures.rst:490
msgid ""
"Get an attribute belonging to the object at address *obj_addr*.  The "
"attribute is described by ``PyMemberDef`` *m*.  Returns ``NULL`` on "
"error."
msgstr ""

#: ../../c-api/structures.rst:497
msgid ""
"Set an attribute belonging to the object at address *obj_addr* to object "
"*o*. The attribute to set is described by ``PyMemberDef`` *m*.  Returns "
"``0`` if successful and a negative value on failure."
msgstr ""

#: ../../c-api/structures.rst:504
msgid ""
"Structure to define property-like access for a type. See also description"
" of the :c:member:`PyTypeObject.tp_getset` slot."
msgstr ""

#: ../../c-api/structures.rst:510
msgid "name"
msgstr "名称"

#: ../../c-api/structures.rst:510
msgid "attribute name"
msgstr ""

#: ../../c-api/structures.rst:512
msgid "get"
msgstr ""

#: ../../c-api/structures.rst:512
msgid "getter"
msgstr ""

#: ../../c-api/structures.rst:512
msgid "C function to get the attribute"
msgstr ""

#: ../../c-api/structures.rst:514
msgid "set"
msgstr ""

#: ../../c-api/structures.rst:514
msgid "setter"
msgstr ""

#: ../../c-api/structures.rst:514
msgid ""
"optional C function to set or delete the attribute, if omitted the "
"attribute is readonly"
msgstr ""

#: ../../c-api/structures.rst:518
msgid "doc"
msgstr ""

#: ../../c-api/structures.rst:518
msgid "optional docstring"
msgstr ""

#: ../../c-api/structures.rst:520
msgid "closure"
msgstr ""

#: ../../c-api/structures.rst:520
msgid "void \\*"
msgstr ""

#: ../../c-api/structures.rst:520
msgid "optional function pointer, providing additional data for getter and setter"
msgstr ""

#: ../../c-api/structures.rst:525
msgid ""
"The ``get`` function takes one :c:type:`PyObject*` parameter (the "
"instance) and a function pointer (the associated ``closure``)::"
msgstr ""

#: ../../c-api/structures.rst:530
msgid ""
"It should return a new reference on success or ``NULL`` with a set "
"exception on failure."
msgstr ""

#: ../../c-api/structures.rst:533
msgid ""
"``set`` functions take two :c:type:`PyObject*` parameters (the instance "
"and the value to be set) and a function pointer (the associated "
"``closure``)::"
msgstr ""

#: ../../c-api/structures.rst:538
msgid ""
"In case the attribute should be deleted the second parameter is ``NULL``."
" Should return ``0`` on success or ``-1`` with a set exception on "
"failure."
msgstr ""

#~ msgid "The :c:func:`Py_SET_TYPE` function must be used to set an object type."
#~ msgstr ""

#~ msgid ""
#~ ":c:func:`Py_REFCNT()` is changed to the "
#~ "inline static function. Use "
#~ ":c:func:`Py_SET_REFCNT()` to set an object "
#~ "reference count."
#~ msgstr ""

#~ msgid "The :c:func:`Py_SET_SIZE` function must be used to set an object size."
#~ msgstr ""

#~ msgid ":c:func:`Py_TYPE()` is changed to an inline static function."
#~ msgstr ""

#~ msgid ":c:func:`Py_SIZE()` is changed to an inline static function."
#~ msgstr ""

#~ msgid "C Function to get the attribute"
#~ msgstr ""

