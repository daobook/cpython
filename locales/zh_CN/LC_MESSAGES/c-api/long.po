# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2021, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2021.
#
# Translators:
# Freesand Leo <yuqinju@163.com>, 2021
# Iterator <xicheng.li@ucdconnect.ie>, 2021
# Sean Chao <seanchao0804@gmail.com>, 2021
# helloworldSB <warningfor163@foxmail.com>, 2021
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.10\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-10-12 09:44+0800\n"
"PO-Revision-Date: 2021-06-28 00:49+0000\n"
"Last-Translator: helloworldSB <warningfor163@foxmail.com>, 2021\n"
"Language: zh_CN\n"
"Language-Team: Chinese (China) (https://www.transifex.com/python-"
"doc/teams/5390/zh_CN/)\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.10.3\n"

#: ../../c-api/long.rst:6
msgid "Integer Objects"
msgstr "整数型对象"

#: ../../c-api/long.rst:11
msgid ""
"All integers are implemented as \"long\" integer objects of arbitrary "
"size."
msgstr "所有整数都使用以任意大小的长整数对象表示。"

#: ../../c-api/long.rst:13
msgid ""
"On error, most ``PyLong_As*`` APIs return ``(return type)-1`` which "
"cannot be distinguished from a number.  Use :c:func:`PyErr_Occurred` to "
"disambiguate."
msgstr ""
"在出错时，大多数 ``PyLong_As*`` API返回 ``(返回类型)-1`` ，无法与一般的数字区分开来。请使用 "
":c:func:`PyErr_Occurred` 来区分。"

#: ../../c-api/long.rst:18
msgid "This subtype of :c:type:`PyObject` represents a Python integer object."
msgstr "表示 Python 整数对象的 :c:type:`PyObject` 子类型。"

#: ../../c-api/long.rst:23
msgid ""
"This instance of :c:type:`PyTypeObject` represents the Python integer "
"type. This is the same object as :class:`int` in the Python layer."
msgstr "这个 :c:type:`PyTypeObject` 的实例表示 Python 的整数类型。与Python层中的 :class:`int` 相同。"

#: ../../c-api/long.rst:29
msgid ""
"Return true if its argument is a :c:type:`PyLongObject` or a subtype of "
":c:type:`PyLongObject`.  This function always succeeds."
msgstr ""
"如果它的参数是 :c:type:`PyLongObject` 或 :c:type:`PyLongObject` 的子类型则返回真值。 "
"此函数总是会成功执行。"

#: ../../c-api/long.rst:35
msgid ""
"Return true if its argument is a :c:type:`PyLongObject`, but not a "
"subtype of :c:type:`PyLongObject`.  This function always succeeds."
msgstr ""
"如果它的参数是 :c:type:`PyLongObject`，但不是 :c:type:`PyLongObject` 的子类型则返回真值。 "
"此函数总是会成功执行。"

#: ../../c-api/long.rst:41
msgid ""
"Return a new :c:type:`PyLongObject` object from *v*, or ``NULL`` on "
"failure."
msgstr "由 *v* 返回一个新的 :c:type:`PyLongObject` 对象，失败时返回 ``NULL`` 。"

#: ../../c-api/long.rst:43
#, fuzzy
msgid ""
"The current implementation keeps an array of integer objects for all "
"integers between ``-5`` and ``256``. When you create an int in that range"
" you actually just get back a reference to the existing object."
msgstr ""
"当前的实现维护了一个整数对象数组，包含 ``-5`` 和 ``256`` 之间的所有整数对象。当你在这个范围内创建一个 int "
"时，实际上得到的是一个对已有对象的引用。"

#: ../../c-api/long.rst:50
#, fuzzy
msgid ""
"Return a new :c:type:`PyLongObject` object from a C :c:expr:`unsigned "
"long`, or ``NULL`` on failure."
msgstr ""
"由 C :c:type:`unsigned long` 类型返回一个新的 :c:type:`PyLongObject` 对象，失败时返回 "
"``NULL`` 。"

#: ../../c-api/long.rst:56
msgid ""
"Return a new :c:type:`PyLongObject` object from a C :c:type:`Py_ssize_t`,"
" or ``NULL`` on failure."
msgstr ""
"从 C :c:type:`Py_ssize_t` 类型返回一个新的 :c:type:`PyLongObject` 对象，如果失败则返回 "
"``NULL`` 。"

#: ../../c-api/long.rst:62
msgid ""
"Return a new :c:type:`PyLongObject` object from a C :c:type:`size_t`, or "
"``NULL`` on failure."
msgstr "从 C :c:type:`size_t` 返回一个新的 :c:type:`PyLongObject` 对象，如果失败则返回 ``NULL`` 。"

#: ../../c-api/long.rst:68
#, fuzzy
msgid ""
"Return a new :c:type:`PyLongObject` object from a C :c:expr:`long long`, "
"or ``NULL`` on failure."
msgstr "从 C :c:type:`long long` 返回一个新的 :c:type:`PyLongObject` 对象，失败时返回 ``NULL`` 。"

#: ../../c-api/long.rst:74
#, fuzzy
msgid ""
"Return a new :c:type:`PyLongObject` object from a C :c:expr:`unsigned "
"long long`, or ``NULL`` on failure."
msgstr ""
"从 C :c:type:`unsigned long long` 返回一个新的 :c:type:`PyLongObject` 对象，失败时返回 "
"``NULL`` 。"

#: ../../c-api/long.rst:80
msgid ""
"Return a new :c:type:`PyLongObject` object from the integer part of *v*, "
"or ``NULL`` on failure."
msgstr "从 *v* 的整数部分返回一个新的 :c:type:`PyLongObject` 对象，如果失败则返回 ``NULL`` 。"

#: ../../c-api/long.rst:86
#, fuzzy
msgid ""
"Return a new :c:type:`PyLongObject` based on the string value in *str*, "
"which is interpreted according to the radix in *base*, or ``NULL`` on "
"failure.  If *pend* is non-``NULL``, *\\*pend* will point to the end of "
"*str* on success or to the first character that could not be processed on"
" error.  If *base* is ``0``, *str* is interpreted using the "
":ref:`integers` definition; in this case, leading zeros in a non-zero "
"decimal number raises a :exc:`ValueError`.  If *base* is not ``0``, it "
"must be between ``2`` and ``36``, inclusive.  Leading and trailing "
"whitespace and single underscores after a base specifier and between "
"digits are ignored.  If there are no digits or *str* is not NULL-"
"terminated following the digits and trailing whitespace, "
":exc:`ValueError` will be raised."
msgstr ""
"根据 *str* 字符串值返回一个新的 :c:type:`PyLongObject` ，*base* 指定基数。如果 *pend* 不是 "
"``NULL`` ， */*pend* 将指向 *str* 中表示这个数字部分的后面的第一个字符。如果 *base* 是 ``0`` ， "
"*str* 将使用 :ref:`integers` 定义来解释；在这种情况下，一个非零的十进制数中的前导零会引发一个 "
":exc:`ValueError` 。如果 *base* 不是 ``0`` ，它必须在 ``2`` 和 ``36`` "
"之间，包括2和36。基数说明符后以及数字之间的前导空格、单下划线将被忽略。如果没有数字，将引发 :exc:`ValueError`。"

#: ../../c-api/long.rst:100
msgid ""
"Convert a sequence of Unicode digits in the string *u* to a Python "
"integer value."
msgstr "将字符串 *u* 中的 Unicode 数字序列转换为 Python 整数值。"

#: ../../c-api/long.rst:108
msgid ""
"Create a Python integer from the pointer *p*. The pointer value can be "
"retrieved from the resulting value using :c:func:`PyLong_AsVoidPtr`."
msgstr "从指针 *p* 创建一个 Python 整数。可以使用 :c:func:`PyLong_AsVoidPtr` 返回的指针值。"

#: ../../c-api/long.rst:119 ../../c-api/long.rst:137
msgid ""
"Return a C :c:expr:`long` representation of *obj*.  If *obj* is not an "
"instance of :c:type:`PyLongObject`, first call its :meth:`__index__` "
"method (if present) to convert it to a :c:type:`PyLongObject`."
msgstr ""

#: ../../c-api/long.rst:123
#, fuzzy
msgid ""
"Raise :exc:`OverflowError` if the value of *obj* is out of range for a "
":c:expr:`long`."
msgstr "如果 *obj* 的值溢出了 :c:type:`long` 的范围，会引发 :exc:`OverflowError`。"

#: ../../c-api/long.rst:126 ../../c-api/long.rst:146 ../../c-api/long.rst:167
#: ../../c-api/long.rst:187 ../../c-api/long.rst:210
msgid "Returns ``-1`` on error.  Use :c:func:`PyErr_Occurred` to disambiguate."
msgstr "发生错误时返回 ``-1`` 。使用 :c:func:`PyErr_Occurred` 来消歧义。"

#: ../../c-api/long.rst:128 ../../c-api/long.rst:148 ../../c-api/long.rst:169
#: ../../c-api/long.rst:191 ../../c-api/long.rst:275 ../../c-api/long.rst:295
msgid "Use :meth:`__index__` if available."
msgstr "如果可用将使用 :meth:`__index__`。"

#: ../../c-api/long.rst:131 ../../c-api/long.rst:151 ../../c-api/long.rst:172
#: ../../c-api/long.rst:194 ../../c-api/long.rst:278 ../../c-api/long.rst:298
msgid "This function will no longer use :meth:`__int__`."
msgstr ""

#: ../../c-api/long.rst:141
msgid ""
"If the value of *obj* is greater than :const:`LONG_MAX` or less than "
":const:`LONG_MIN`, set *\\*overflow* to ``1`` or ``-1``, respectively, "
"and return ``-1``; otherwise, set *\\*overflow* to ``0``.  If any other "
"exception occurs set *\\*overflow* to ``0`` and return ``-1`` as usual."
msgstr ""

#: ../../c-api/long.rst:160 ../../c-api/long.rst:178
msgid ""
"Return a C :c:expr:`long long` representation of *obj*.  If *obj* is not "
"an instance of :c:type:`PyLongObject`, first call its :meth:`__index__` "
"method (if present) to convert it to a :c:type:`PyLongObject`."
msgstr ""

#: ../../c-api/long.rst:164
#, fuzzy
msgid ""
"Raise :exc:`OverflowError` if the value of *obj* is out of range for a "
":c:expr:`long long`."
msgstr "如果 *obj* 值超出 :c:type:`long long` ，触发 :exc:`OverflowError`"

#: ../../c-api/long.rst:182
msgid ""
"If the value of *obj* is greater than :const:`LLONG_MAX` or less than "
":const:`LLONG_MIN`, set *\\*overflow* to ``1`` or ``-1``, respectively, "
"and return ``-1``; otherwise, set *\\*overflow* to ``0``.  If any other "
"exception occurs set *\\*overflow* to ``0`` and return ``-1`` as usual."
msgstr ""

#: ../../c-api/long.rst:204
msgid ""
"Return a C :c:type:`Py_ssize_t` representation of *pylong*.  *pylong* "
"must be an instance of :c:type:`PyLongObject`."
msgstr ""

#: ../../c-api/long.rst:207
msgid ""
"Raise :exc:`OverflowError` if the value of *pylong* is out of range for a"
" :c:type:`Py_ssize_t`."
msgstr ""

#: ../../c-api/long.rst:219
msgid ""
"Return a C :c:expr:`unsigned long` representation of *pylong*.  *pylong* "
"must be an instance of :c:type:`PyLongObject`."
msgstr ""

#: ../../c-api/long.rst:222
#, fuzzy
msgid ""
"Raise :exc:`OverflowError` if the value of *pylong* is out of range for a"
" :c:expr:`unsigned long`."
msgstr "如果 *obj* 值超出 :c:type:`long long` ，触发 :exc:`OverflowError`"

#: ../../c-api/long.rst:225
msgid ""
"Returns ``(unsigned long)-1`` on error. Use :c:func:`PyErr_Occurred` to "
"disambiguate."
msgstr ""

#: ../../c-api/long.rst:235
msgid ""
"Return a C :c:type:`size_t` representation of *pylong*.  *pylong* must be"
" an instance of :c:type:`PyLongObject`."
msgstr ""

#: ../../c-api/long.rst:238
msgid ""
"Raise :exc:`OverflowError` if the value of *pylong* is out of range for a"
" :c:type:`size_t`."
msgstr ""

#: ../../c-api/long.rst:241
msgid ""
"Returns ``(size_t)-1`` on error. Use :c:func:`PyErr_Occurred` to "
"disambiguate."
msgstr ""

#: ../../c-api/long.rst:250
msgid ""
"Return a C :c:expr:`unsigned long long` representation of *pylong*.  "
"*pylong* must be an instance of :c:type:`PyLongObject`."
msgstr ""

#: ../../c-api/long.rst:253
#, fuzzy
msgid ""
"Raise :exc:`OverflowError` if the value of *pylong* is out of range for "
"an :c:expr:`unsigned long long`."
msgstr "如果 *obj* 值超出 :c:type:`long long` ，触发 :exc:`OverflowError`"

#: ../../c-api/long.rst:256
msgid ""
"Returns ``(unsigned long long)-1`` on error. Use :c:func:`PyErr_Occurred`"
" to disambiguate."
msgstr ""

#: ../../c-api/long.rst:259
msgid "A negative *pylong* now raises :exc:`OverflowError`, not :exc:`TypeError`."
msgstr ""

#: ../../c-api/long.rst:265
msgid ""
"Return a C :c:expr:`unsigned long` representation of *obj*.  If *obj* is "
"not an instance of :c:type:`PyLongObject`, first call its "
":meth:`__index__` method (if present) to convert it to a "
":c:type:`PyLongObject`."
msgstr ""

#: ../../c-api/long.rst:269
msgid ""
"If the value of *obj* is out of range for an :c:expr:`unsigned long`, "
"return the reduction of that value modulo ``ULONG_MAX + 1``."
msgstr ""

#: ../../c-api/long.rst:272
msgid ""
"Returns ``(unsigned long)-1`` on error.  Use :c:func:`PyErr_Occurred` to "
"disambiguate."
msgstr ""

#: ../../c-api/long.rst:284
msgid ""
"Return a C :c:expr:`unsigned long long` representation of *obj*.  If "
"*obj* is not an instance of :c:type:`PyLongObject`, first call its "
":meth:`__index__` method (if present) to convert it to a "
":c:type:`PyLongObject`."
msgstr ""

#: ../../c-api/long.rst:289
msgid ""
"If the value of *obj* is out of range for an :c:expr:`unsigned long "
"long`, return the reduction of that value modulo ``ULLONG_MAX + 1``."
msgstr ""

#: ../../c-api/long.rst:292
msgid ""
"Returns ``(unsigned long long)-1`` on error.  Use "
":c:func:`PyErr_Occurred` to disambiguate."
msgstr ""

#: ../../c-api/long.rst:304
msgid ""
"Return a C :c:expr:`double` representation of *pylong*.  *pylong* must be"
" an instance of :c:type:`PyLongObject`."
msgstr ""

#: ../../c-api/long.rst:307
#, fuzzy
msgid ""
"Raise :exc:`OverflowError` if the value of *pylong* is out of range for a"
" :c:expr:`double`."
msgstr "如果 *obj* 的值溢出了 :c:type:`long` 的范围，会引发 :exc:`OverflowError`。"

#: ../../c-api/long.rst:310
msgid "Returns ``-1.0`` on error.  Use :c:func:`PyErr_Occurred` to disambiguate."
msgstr ""

#: ../../c-api/long.rst:315
msgid ""
"Convert a Python integer *pylong* to a C :c:expr:`void` pointer. If "
"*pylong* cannot be converted, an :exc:`OverflowError` will be raised.  "
"This is only assured to produce a usable :c:expr:`void` pointer for "
"values created with :c:func:`PyLong_FromVoidPtr`."
msgstr ""

#: ../../c-api/long.rst:320
msgid "Returns ``NULL`` on error.  Use :c:func:`PyErr_Occurred` to disambiguate."
msgstr ""

#~ msgid ""
#~ "Return a C :c:type:`long` representation "
#~ "of *obj*.  If *obj* is not an "
#~ "instance of :c:type:`PyLongObject`, first call"
#~ " its :meth:`__index__` method (if present)"
#~ " to convert it to a "
#~ ":c:type:`PyLongObject`."
#~ msgstr ""

#~ msgid ""
#~ "Return a C :c:type:`long long` "
#~ "representation of *obj*.  If *obj* is"
#~ " not an instance of :c:type:`PyLongObject`,"
#~ " first call its :meth:`__index__` method"
#~ " (if present) to convert it to "
#~ "a :c:type:`PyLongObject`."
#~ msgstr ""

#~ msgid ""
#~ "Return a C :c:type:`unsigned long` "
#~ "representation of *pylong*.  *pylong* must "
#~ "be an instance of :c:type:`PyLongObject`."
#~ msgstr ""

#~ msgid ""
#~ "Raise :exc:`OverflowError` if the value "
#~ "of *pylong* is out of range for"
#~ " a :c:type:`unsigned long`."
#~ msgstr ""

#~ msgid ""
#~ "Return a C :c:type:`unsigned long long`"
#~ " representation of *pylong*.  *pylong* must"
#~ " be an instance of :c:type:`PyLongObject`."
#~ msgstr ""

#~ msgid ""
#~ "Raise :exc:`OverflowError` if the value "
#~ "of *pylong* is out of range for"
#~ " an :c:type:`unsigned long long`."
#~ msgstr ""

#~ msgid ""
#~ "Return a C :c:type:`unsigned long` "
#~ "representation of *obj*.  If *obj* is"
#~ " not an instance of :c:type:`PyLongObject`,"
#~ " first call its :meth:`__index__` method"
#~ " (if present) to convert it to "
#~ "a :c:type:`PyLongObject`."
#~ msgstr ""

#~ msgid ""
#~ "If the value of *obj* is out "
#~ "of range for an :c:type:`unsigned long`,"
#~ " return the reduction of that value"
#~ " modulo ``ULONG_MAX + 1``."
#~ msgstr ""

#~ msgid ""
#~ "Return a C :c:type:`unsigned long long`"
#~ " representation of *obj*.  If *obj* "
#~ "is not an instance of "
#~ ":c:type:`PyLongObject`, first call its "
#~ ":meth:`__index__` method (if present) to "
#~ "convert it to a :c:type:`PyLongObject`."
#~ msgstr ""

#~ msgid ""
#~ "If the value of *obj* is out "
#~ "of range for an :c:type:`unsigned long"
#~ " long`, return the reduction of that"
#~ " value modulo ``ULLONG_MAX + 1``."
#~ msgstr ""

#~ msgid ""
#~ "Return a C :c:type:`double` representation "
#~ "of *pylong*.  *pylong* must be an "
#~ "instance of :c:type:`PyLongObject`."
#~ msgstr ""

#~ msgid ""
#~ "Raise :exc:`OverflowError` if the value "
#~ "of *pylong* is out of range for"
#~ " a :c:type:`double`."
#~ msgstr ""

#~ msgid ""
#~ "Convert a Python integer *pylong* to "
#~ "a C :c:type:`void` pointer. If *pylong*"
#~ " cannot be converted, an "
#~ ":exc:`OverflowError` will be raised.  This "
#~ "is only assured to produce a "
#~ "usable :c:type:`void` pointer for values "
#~ "created with :c:func:`PyLong_FromVoidPtr`."
#~ msgstr ""

